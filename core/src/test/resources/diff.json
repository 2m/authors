{
  "url": "https://api.github.com/repos/akka/alpakka/compare/v0.1...v0.2",
  "html_url": "https://github.com/akka/alpakka/compare/v0.1...v0.2",
  "permalink_url": "https://github.com/akka/alpakka/compare/akka:6525eb1...akka:a0f4af7",
  "diff_url": "https://github.com/akka/alpakka/compare/v0.1...v0.2.diff",
  "patch_url": "https://github.com/akka/alpakka/compare/v0.1...v0.2.patch",
  "base_commit": {
    "sha": "6525eb15979d5dc12033932c92ba8ac964219472",
    "commit": {
      "author": {
        "name": "Martynas Mickevičius",
        "email": "mmartynas@gmail.com",
        "date": "2016-11-10T15:36:17Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-10T15:36:17Z"
      },
      "message": "Merge pull request #29 from 2m/wip-use-common-bintray-package\n\nUse common bintray package",
      "tree": {
        "sha": "2d7b92e62bacb9e0360e0ff8282b0210aef82c0b",
        "url": "https://api.github.com/repos/akka/alpakka/git/trees/2d7b92e62bacb9e0360e0ff8282b0210aef82c0b"
      },
      "url": "https://api.github.com/repos/akka/alpakka/git/commits/6525eb15979d5dc12033932c92ba8ac964219472",
      "comment_count": 0
    },
    "url": "https://api.github.com/repos/akka/alpakka/commits/6525eb15979d5dc12033932c92ba8ac964219472",
    "html_url": "https://github.com/akka/alpakka/commit/6525eb15979d5dc12033932c92ba8ac964219472",
    "comments_url": "https://api.github.com/repos/akka/alpakka/commits/6525eb15979d5dc12033932c92ba8ac964219472/comments",
    "author": {
      "login": "2m",
      "id": 422086,
      "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/2m",
      "html_url": "https://github.com/2m",
      "followers_url": "https://api.github.com/users/2m/followers",
      "following_url": "https://api.github.com/users/2m/following{/other_user}",
      "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
      "organizations_url": "https://api.github.com/users/2m/orgs",
      "repos_url": "https://api.github.com/users/2m/repos",
      "events_url": "https://api.github.com/users/2m/events{/privacy}",
      "received_events_url": "https://api.github.com/users/2m/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f082177974cd898fe91199d4094890be688f933a",
        "url": "https://api.github.com/repos/akka/alpakka/commits/f082177974cd898fe91199d4094890be688f933a",
        "html_url": "https://github.com/akka/alpakka/commit/f082177974cd898fe91199d4094890be688f933a"
      },
      {
        "sha": "db32156106fdaa6af09cd73902550ec1bf175207",
        "url": "https://api.github.com/repos/akka/alpakka/commits/db32156106fdaa6af09cd73902550ec1bf175207",
        "html_url": "https://github.com/akka/alpakka/commit/db32156106fdaa6af09cd73902550ec1bf175207"
      }
    ]
  },
  "merge_base_commit": {
    "sha": "6525eb15979d5dc12033932c92ba8ac964219472",
    "commit": {
      "author": {
        "name": "Martynas Mickevičius",
        "email": "mmartynas@gmail.com",
        "date": "2016-11-10T15:36:17Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-11-10T15:36:17Z"
      },
      "message": "Merge pull request #29 from 2m/wip-use-common-bintray-package\n\nUse common bintray package",
      "tree": {
        "sha": "2d7b92e62bacb9e0360e0ff8282b0210aef82c0b",
        "url": "https://api.github.com/repos/akka/alpakka/git/trees/2d7b92e62bacb9e0360e0ff8282b0210aef82c0b"
      },
      "url": "https://api.github.com/repos/akka/alpakka/git/commits/6525eb15979d5dc12033932c92ba8ac964219472",
      "comment_count": 0
    },
    "url": "https://api.github.com/repos/akka/alpakka/commits/6525eb15979d5dc12033932c92ba8ac964219472",
    "html_url": "https://github.com/akka/alpakka/commit/6525eb15979d5dc12033932c92ba8ac964219472",
    "comments_url": "https://api.github.com/repos/akka/alpakka/commits/6525eb15979d5dc12033932c92ba8ac964219472/comments",
    "author": {
      "login": "2m",
      "id": 422086,
      "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/2m",
      "html_url": "https://github.com/2m",
      "followers_url": "https://api.github.com/users/2m/followers",
      "following_url": "https://api.github.com/users/2m/following{/other_user}",
      "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
      "organizations_url": "https://api.github.com/users/2m/orgs",
      "repos_url": "https://api.github.com/users/2m/repos",
      "events_url": "https://api.github.com/users/2m/events{/privacy}",
      "received_events_url": "https://api.github.com/users/2m/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f082177974cd898fe91199d4094890be688f933a",
        "url": "https://api.github.com/repos/akka/alpakka/commits/f082177974cd898fe91199d4094890be688f933a",
        "html_url": "https://github.com/akka/alpakka/commit/f082177974cd898fe91199d4094890be688f933a"
      },
      {
        "sha": "db32156106fdaa6af09cd73902550ec1bf175207",
        "url": "https://api.github.com/repos/akka/alpakka/commits/db32156106fdaa6af09cd73902550ec1bf175207",
        "html_url": "https://github.com/akka/alpakka/commit/db32156106fdaa6af09cd73902550ec1bf175207"
      }
    ]
  },
  "status": "ahead",
  "ahead_by": 43,
  "behind_by": 0,
  "total_commits": 43,
  "commits": [
    {
      "sha": "ae0bd1c05b593397217370046b56756e9afd63c9",
      "commit": {
        "author": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-11T07:39:54Z"
        },
        "committer": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-11T07:44:02Z"
        },
        "message": "Publish unidoc",
        "tree": {
          "sha": "ca9277c7b19fc3a2fd02b4257750e960a1a74abf",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/ca9277c7b19fc3a2fd02b4257750e960a1a74abf"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/ae0bd1c05b593397217370046b56756e9afd63c9",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/ae0bd1c05b593397217370046b56756e9afd63c9",
      "html_url": "https://github.com/akka/alpakka/commit/ae0bd1c05b593397217370046b56756e9afd63c9",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/ae0bd1c05b593397217370046b56756e9afd63c9/comments",
      "author": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "6525eb15979d5dc12033932c92ba8ac964219472",
          "url": "https://api.github.com/repos/akka/alpakka/commits/6525eb15979d5dc12033932c92ba8ac964219472",
          "html_url": "https://github.com/akka/alpakka/commit/6525eb15979d5dc12033932c92ba8ac964219472"
        }
      ]
    },
    {
      "sha": "c83971c970d0d049043b9c03bfa545fe3f9ab045",
      "commit": {
        "author": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-11T08:10:57Z"
        },
        "committer": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-11T08:10:57Z"
        },
        "message": "Fix sonatype credential environment variables",
        "tree": {
          "sha": "39c199793f6d5c7dfe43dd90fc0e676c3a6011e3",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/39c199793f6d5c7dfe43dd90fc0e676c3a6011e3"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/c83971c970d0d049043b9c03bfa545fe3f9ab045",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/c83971c970d0d049043b9c03bfa545fe3f9ab045",
      "html_url": "https://github.com/akka/alpakka/commit/c83971c970d0d049043b9c03bfa545fe3f9ab045",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/c83971c970d0d049043b9c03bfa545fe3f9ab045/comments",
      "author": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "6525eb15979d5dc12033932c92ba8ac964219472",
          "url": "https://api.github.com/repos/akka/alpakka/commits/6525eb15979d5dc12033932c92ba8ac964219472",
          "html_url": "https://github.com/akka/alpakka/commit/6525eb15979d5dc12033932c92ba8ac964219472"
        }
      ]
    },
    {
      "sha": "3163ca2873103dc19aca1dfbbafaa3e8efe20d16",
      "commit": {
        "author": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-11T08:13:42Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-11T08:13:42Z"
        },
        "message": "Merge pull request #31 from 2m/wib-publish-unidoc\n\nPublish unidoc",
        "tree": {
          "sha": "ca9277c7b19fc3a2fd02b4257750e960a1a74abf",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/ca9277c7b19fc3a2fd02b4257750e960a1a74abf"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/3163ca2873103dc19aca1dfbbafaa3e8efe20d16",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/3163ca2873103dc19aca1dfbbafaa3e8efe20d16",
      "html_url": "https://github.com/akka/alpakka/commit/3163ca2873103dc19aca1dfbbafaa3e8efe20d16",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/3163ca2873103dc19aca1dfbbafaa3e8efe20d16/comments",
      "author": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "6525eb15979d5dc12033932c92ba8ac964219472",
          "url": "https://api.github.com/repos/akka/alpakka/commits/6525eb15979d5dc12033932c92ba8ac964219472",
          "html_url": "https://github.com/akka/alpakka/commit/6525eb15979d5dc12033932c92ba8ac964219472"
        },
        {
          "sha": "ae0bd1c05b593397217370046b56756e9afd63c9",
          "url": "https://api.github.com/repos/akka/alpakka/commits/ae0bd1c05b593397217370046b56756e9afd63c9",
          "html_url": "https://github.com/akka/alpakka/commit/ae0bd1c05b593397217370046b56756e9afd63c9"
        }
      ]
    },
    {
      "sha": "7b4f7ead24d25493d92ebf04245cae3d76812594",
      "commit": {
        "author": {
          "name": "Patrik Nordwall",
          "email": "patrik.nordwall@gmail.com",
          "date": "2016-11-11T09:31:15Z"
        },
        "committer": {
          "name": "Patrik Nordwall",
          "email": "patrik.nordwall@gmail.com",
          "date": "2016-11-11T09:34:39Z"
        },
        "message": "Link to latest documentation",
        "tree": {
          "sha": "b7d69fcb8bae54155944e0e7e56d43de0ab5c7e6",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/b7d69fcb8bae54155944e0e7e56d43de0ab5c7e6"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/7b4f7ead24d25493d92ebf04245cae3d76812594",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/7b4f7ead24d25493d92ebf04245cae3d76812594",
      "html_url": "https://github.com/akka/alpakka/commit/7b4f7ead24d25493d92ebf04245cae3d76812594",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/7b4f7ead24d25493d92ebf04245cae3d76812594/comments",
      "author": {
        "login": "patriknw",
        "id": 336161,
        "avatar_url": "https://avatars.githubusercontent.com/u/336161?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/patriknw",
        "html_url": "https://github.com/patriknw",
        "followers_url": "https://api.github.com/users/patriknw/followers",
        "following_url": "https://api.github.com/users/patriknw/following{/other_user}",
        "gists_url": "https://api.github.com/users/patriknw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/patriknw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/patriknw/subscriptions",
        "organizations_url": "https://api.github.com/users/patriknw/orgs",
        "repos_url": "https://api.github.com/users/patriknw/repos",
        "events_url": "https://api.github.com/users/patriknw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/patriknw/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "patriknw",
        "id": 336161,
        "avatar_url": "https://avatars.githubusercontent.com/u/336161?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/patriknw",
        "html_url": "https://github.com/patriknw",
        "followers_url": "https://api.github.com/users/patriknw/followers",
        "following_url": "https://api.github.com/users/patriknw/following{/other_user}",
        "gists_url": "https://api.github.com/users/patriknw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/patriknw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/patriknw/subscriptions",
        "organizations_url": "https://api.github.com/users/patriknw/orgs",
        "repos_url": "https://api.github.com/users/patriknw/repos",
        "events_url": "https://api.github.com/users/patriknw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/patriknw/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "5d4c9d3e38586189b938bdafeceeb4da21b1a09f",
          "url": "https://api.github.com/repos/akka/alpakka/commits/5d4c9d3e38586189b938bdafeceeb4da21b1a09f",
          "html_url": "https://github.com/akka/alpakka/commit/5d4c9d3e38586189b938bdafeceeb4da21b1a09f"
        }
      ]
    },
    {
      "sha": "27e99cc5ce1275b7f34fb5b37d7881cfa15cacdd",
      "commit": {
        "author": {
          "name": "Patrik Nordwall",
          "email": "patrik.nordwall@gmail.com",
          "date": "2016-11-11T11:50:55Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-11T11:50:55Z"
        },
        "message": "Merge pull request #33 from akka/wip-doc-link-patriknw\n\nLink to latest documentation",
        "tree": {
          "sha": "0d647c3370aefc51968afdcb0426cb7b04af51c9",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/0d647c3370aefc51968afdcb0426cb7b04af51c9"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/27e99cc5ce1275b7f34fb5b37d7881cfa15cacdd",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/27e99cc5ce1275b7f34fb5b37d7881cfa15cacdd",
      "html_url": "https://github.com/akka/alpakka/commit/27e99cc5ce1275b7f34fb5b37d7881cfa15cacdd",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/27e99cc5ce1275b7f34fb5b37d7881cfa15cacdd/comments",
      "author": {
        "login": "patriknw",
        "id": 336161,
        "avatar_url": "https://avatars.githubusercontent.com/u/336161?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/patriknw",
        "html_url": "https://github.com/patriknw",
        "followers_url": "https://api.github.com/users/patriknw/followers",
        "following_url": "https://api.github.com/users/patriknw/following{/other_user}",
        "gists_url": "https://api.github.com/users/patriknw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/patriknw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/patriknw/subscriptions",
        "organizations_url": "https://api.github.com/users/patriknw/orgs",
        "repos_url": "https://api.github.com/users/patriknw/repos",
        "events_url": "https://api.github.com/users/patriknw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/patriknw/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "3163ca2873103dc19aca1dfbbafaa3e8efe20d16",
          "url": "https://api.github.com/repos/akka/alpakka/commits/3163ca2873103dc19aca1dfbbafaa3e8efe20d16",
          "html_url": "https://github.com/akka/alpakka/commit/3163ca2873103dc19aca1dfbbafaa3e8efe20d16"
        },
        {
          "sha": "7b4f7ead24d25493d92ebf04245cae3d76812594",
          "url": "https://api.github.com/repos/akka/alpakka/commits/7b4f7ead24d25493d92ebf04245cae3d76812594",
          "html_url": "https://github.com/akka/alpakka/commit/7b4f7ead24d25493d92ebf04245cae3d76812594"
        }
      ]
    },
    {
      "sha": "25cc01d865e78cad53e2f4d1907bcfdb0d4645d0",
      "commit": {
        "author": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-11T12:07:58Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-11T12:07:58Z"
        },
        "message": "Merge pull request #32 from 2m/wip-fix-sona-creds\n\nFix sonatype credential environment variables",
        "tree": {
          "sha": "7ce83a53d8bb2e9b0bd498725cec2b64e193ec2a",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/7ce83a53d8bb2e9b0bd498725cec2b64e193ec2a"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/25cc01d865e78cad53e2f4d1907bcfdb0d4645d0",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/25cc01d865e78cad53e2f4d1907bcfdb0d4645d0",
      "html_url": "https://github.com/akka/alpakka/commit/25cc01d865e78cad53e2f4d1907bcfdb0d4645d0",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/25cc01d865e78cad53e2f4d1907bcfdb0d4645d0/comments",
      "author": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "27e99cc5ce1275b7f34fb5b37d7881cfa15cacdd",
          "url": "https://api.github.com/repos/akka/alpakka/commits/27e99cc5ce1275b7f34fb5b37d7881cfa15cacdd",
          "html_url": "https://github.com/akka/alpakka/commit/27e99cc5ce1275b7f34fb5b37d7881cfa15cacdd"
        },
        {
          "sha": "c83971c970d0d049043b9c03bfa545fe3f9ab045",
          "url": "https://api.github.com/repos/akka/alpakka/commits/c83971c970d0d049043b9c03bfa545fe3f9ab045",
          "html_url": "https://github.com/akka/alpakka/commit/c83971c970d0d049043b9c03bfa545fe3f9ab045"
        }
      ]
    },
    {
      "sha": "24e3c04c6ac6707ff1ad05b74a0ce2369fca5946",
      "commit": {
        "author": {
          "name": "Martin Krasser",
          "email": "krasserm@googlemail.com",
          "date": "2016-11-11T13:30:53Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-11T13:30:53Z"
        },
        "message": "Eventuate and FS2 connectors\n\n- closes #39\r\n- closes #40",
        "tree": {
          "sha": "37b81bf45a12180a4689207df5539e349e9c96eb",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/37b81bf45a12180a4689207df5539e349e9c96eb"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/24e3c04c6ac6707ff1ad05b74a0ce2369fca5946",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/24e3c04c6ac6707ff1ad05b74a0ce2369fca5946",
      "html_url": "https://github.com/akka/alpakka/commit/24e3c04c6ac6707ff1ad05b74a0ce2369fca5946",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/24e3c04c6ac6707ff1ad05b74a0ce2369fca5946/comments",
      "author": {
        "login": "krasserm",
        "id": 202907,
        "avatar_url": "https://avatars.githubusercontent.com/u/202907?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/krasserm",
        "html_url": "https://github.com/krasserm",
        "followers_url": "https://api.github.com/users/krasserm/followers",
        "following_url": "https://api.github.com/users/krasserm/following{/other_user}",
        "gists_url": "https://api.github.com/users/krasserm/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/krasserm/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/krasserm/subscriptions",
        "organizations_url": "https://api.github.com/users/krasserm/orgs",
        "repos_url": "https://api.github.com/users/krasserm/repos",
        "events_url": "https://api.github.com/users/krasserm/events{/privacy}",
        "received_events_url": "https://api.github.com/users/krasserm/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "25cc01d865e78cad53e2f4d1907bcfdb0d4645d0",
          "url": "https://api.github.com/repos/akka/alpakka/commits/25cc01d865e78cad53e2f4d1907bcfdb0d4645d0",
          "html_url": "https://github.com/akka/alpakka/commit/25cc01d865e78cad53e2f4d1907bcfdb0d4645d0"
        }
      ]
    },
    {
      "sha": "4e82461c4c5a0d924fc8c0a3ad1fa80fbfeac845",
      "commit": {
        "author": {
          "name": "Patrik Nordwall",
          "email": "patrik.nordwall@gmail.com",
          "date": "2016-11-11T14:31:23Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-11T14:31:23Z"
        },
        "message": "Merge pull request #41 from krasserm/patch-1\n\nEventuate and FS2 connectors",
        "tree": {
          "sha": "37b81bf45a12180a4689207df5539e349e9c96eb",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/37b81bf45a12180a4689207df5539e349e9c96eb"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/4e82461c4c5a0d924fc8c0a3ad1fa80fbfeac845",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/4e82461c4c5a0d924fc8c0a3ad1fa80fbfeac845",
      "html_url": "https://github.com/akka/alpakka/commit/4e82461c4c5a0d924fc8c0a3ad1fa80fbfeac845",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/4e82461c4c5a0d924fc8c0a3ad1fa80fbfeac845/comments",
      "author": {
        "login": "patriknw",
        "id": 336161,
        "avatar_url": "https://avatars.githubusercontent.com/u/336161?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/patriknw",
        "html_url": "https://github.com/patriknw",
        "followers_url": "https://api.github.com/users/patriknw/followers",
        "following_url": "https://api.github.com/users/patriknw/following{/other_user}",
        "gists_url": "https://api.github.com/users/patriknw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/patriknw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/patriknw/subscriptions",
        "organizations_url": "https://api.github.com/users/patriknw/orgs",
        "repos_url": "https://api.github.com/users/patriknw/repos",
        "events_url": "https://api.github.com/users/patriknw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/patriknw/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "25cc01d865e78cad53e2f4d1907bcfdb0d4645d0",
          "url": "https://api.github.com/repos/akka/alpakka/commits/25cc01d865e78cad53e2f4d1907bcfdb0d4645d0",
          "html_url": "https://github.com/akka/alpakka/commit/25cc01d865e78cad53e2f4d1907bcfdb0d4645d0"
        },
        {
          "sha": "24e3c04c6ac6707ff1ad05b74a0ce2369fca5946",
          "url": "https://api.github.com/repos/akka/alpakka/commits/24e3c04c6ac6707ff1ad05b74a0ce2369fca5946",
          "html_url": "https://github.com/akka/alpakka/commit/24e3c04c6ac6707ff1ad05b74a0ce2369fca5946"
        }
      ]
    },
    {
      "sha": "ae7f194a4927b1f89c1f9d1facddc16d1d845599",
      "commit": {
        "author": {
          "name": "Stephen Nancekivell",
          "email": "stephennancekivell@gmail.com",
          "date": "2016-11-13T00:46:52Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-13T00:46:52Z"
        },
        "message": "Add link to reactive mongo",
        "tree": {
          "sha": "ba548cbf9129ef237a686378e9faa5e369f2700e",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/ba548cbf9129ef237a686378e9faa5e369f2700e"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/ae7f194a4927b1f89c1f9d1facddc16d1d845599",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/ae7f194a4927b1f89c1f9d1facddc16d1d845599",
      "html_url": "https://github.com/akka/alpakka/commit/ae7f194a4927b1f89c1f9d1facddc16d1d845599",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/ae7f194a4927b1f89c1f9d1facddc16d1d845599/comments",
      "author": {
        "login": "stephennancekivell",
        "id": 727013,
        "avatar_url": "https://avatars.githubusercontent.com/u/727013?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stephennancekivell",
        "html_url": "https://github.com/stephennancekivell",
        "followers_url": "https://api.github.com/users/stephennancekivell/followers",
        "following_url": "https://api.github.com/users/stephennancekivell/following{/other_user}",
        "gists_url": "https://api.github.com/users/stephennancekivell/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/stephennancekivell/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/stephennancekivell/subscriptions",
        "organizations_url": "https://api.github.com/users/stephennancekivell/orgs",
        "repos_url": "https://api.github.com/users/stephennancekivell/repos",
        "events_url": "https://api.github.com/users/stephennancekivell/events{/privacy}",
        "received_events_url": "https://api.github.com/users/stephennancekivell/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "4e82461c4c5a0d924fc8c0a3ad1fa80fbfeac845",
          "url": "https://api.github.com/repos/akka/alpakka/commits/4e82461c4c5a0d924fc8c0a3ad1fa80fbfeac845",
          "html_url": "https://github.com/akka/alpakka/commit/4e82461c4c5a0d924fc8c0a3ad1fa80fbfeac845"
        }
      ]
    },
    {
      "sha": "c745a171454a201303c5ee08cd4a0bdc886097cc",
      "commit": {
        "author": {
          "name": "Heiko Seeberger",
          "email": "mail@heikoseeberger.de",
          "date": "2016-11-13T09:17:04Z"
        },
        "committer": {
          "name": "Heiko Seeberger",
          "email": "mail@heikoseeberger.de",
          "date": "2016-11-13T09:17:04Z"
        },
        "message": "Parallelize Travis build (closes #50)",
        "tree": {
          "sha": "64bd56a6aa1be87a7c36182f5d19aace37c0f65a",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/64bd56a6aa1be87a7c36182f5d19aace37c0f65a"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/c745a171454a201303c5ee08cd4a0bdc886097cc",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/c745a171454a201303c5ee08cd4a0bdc886097cc",
      "html_url": "https://github.com/akka/alpakka/commit/c745a171454a201303c5ee08cd4a0bdc886097cc",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/c745a171454a201303c5ee08cd4a0bdc886097cc/comments",
      "author": {
        "login": "hseeberger",
        "id": 41911,
        "avatar_url": "https://avatars.githubusercontent.com/u/41911?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hseeberger",
        "html_url": "https://github.com/hseeberger",
        "followers_url": "https://api.github.com/users/hseeberger/followers",
        "following_url": "https://api.github.com/users/hseeberger/following{/other_user}",
        "gists_url": "https://api.github.com/users/hseeberger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hseeberger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hseeberger/subscriptions",
        "organizations_url": "https://api.github.com/users/hseeberger/orgs",
        "repos_url": "https://api.github.com/users/hseeberger/repos",
        "events_url": "https://api.github.com/users/hseeberger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hseeberger/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "hseeberger",
        "id": 41911,
        "avatar_url": "https://avatars.githubusercontent.com/u/41911?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hseeberger",
        "html_url": "https://github.com/hseeberger",
        "followers_url": "https://api.github.com/users/hseeberger/followers",
        "following_url": "https://api.github.com/users/hseeberger/following{/other_user}",
        "gists_url": "https://api.github.com/users/hseeberger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hseeberger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hseeberger/subscriptions",
        "organizations_url": "https://api.github.com/users/hseeberger/orgs",
        "repos_url": "https://api.github.com/users/hseeberger/repos",
        "events_url": "https://api.github.com/users/hseeberger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hseeberger/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "4e82461c4c5a0d924fc8c0a3ad1fa80fbfeac845",
          "url": "https://api.github.com/repos/akka/alpakka/commits/4e82461c4c5a0d924fc8c0a3ad1fa80fbfeac845",
          "html_url": "https://github.com/akka/alpakka/commit/4e82461c4c5a0d924fc8c0a3ad1fa80fbfeac845"
        }
      ]
    },
    {
      "sha": "80bd9a66d7c729fbe70449d3fcbab5c91168d3b2",
      "commit": {
        "author": {
          "name": "Konrad Malawski",
          "email": "ktoso@project13.pl",
          "date": "2016-11-13T10:59:12Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-13T10:59:12Z"
        },
        "message": "Merge pull request #51 from hseeberger/50-parallelize-travis-build\n\nParallelize Travis build (closes #50)",
        "tree": {
          "sha": "64bd56a6aa1be87a7c36182f5d19aace37c0f65a",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/64bd56a6aa1be87a7c36182f5d19aace37c0f65a"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/80bd9a66d7c729fbe70449d3fcbab5c91168d3b2",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/80bd9a66d7c729fbe70449d3fcbab5c91168d3b2",
      "html_url": "https://github.com/akka/alpakka/commit/80bd9a66d7c729fbe70449d3fcbab5c91168d3b2",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/80bd9a66d7c729fbe70449d3fcbab5c91168d3b2/comments",
      "author": {
        "login": "ktoso",
        "id": 120979,
        "avatar_url": "https://avatars.githubusercontent.com/u/120979?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ktoso",
        "html_url": "https://github.com/ktoso",
        "followers_url": "https://api.github.com/users/ktoso/followers",
        "following_url": "https://api.github.com/users/ktoso/following{/other_user}",
        "gists_url": "https://api.github.com/users/ktoso/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ktoso/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ktoso/subscriptions",
        "organizations_url": "https://api.github.com/users/ktoso/orgs",
        "repos_url": "https://api.github.com/users/ktoso/repos",
        "events_url": "https://api.github.com/users/ktoso/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ktoso/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "4e82461c4c5a0d924fc8c0a3ad1fa80fbfeac845",
          "url": "https://api.github.com/repos/akka/alpakka/commits/4e82461c4c5a0d924fc8c0a3ad1fa80fbfeac845",
          "html_url": "https://github.com/akka/alpakka/commit/4e82461c4c5a0d924fc8c0a3ad1fa80fbfeac845"
        },
        {
          "sha": "c745a171454a201303c5ee08cd4a0bdc886097cc",
          "url": "https://api.github.com/repos/akka/alpakka/commits/c745a171454a201303c5ee08cd4a0bdc886097cc",
          "html_url": "https://github.com/akka/alpakka/commit/c745a171454a201303c5ee08cd4a0bdc886097cc"
        }
      ]
    },
    {
      "sha": "1061f8c14343d3f5d8968dea0dd8dcf9fe393df8",
      "commit": {
        "author": {
          "name": "Jan Ypma",
          "email": "jyp@tradeshift.com",
          "date": "2016-11-10T08:10:15Z"
        },
        "committer": {
          "name": "Jan Ypma",
          "email": "jyp@tradeshift.com",
          "date": "2016-11-14T08:50:30Z"
        },
        "message": "Initial import of https://github.com/bluelabsio/s3-stream\n\nIncluding chunk-to-disk support and minor repackaging.",
        "tree": {
          "sha": "2e698c8dfd8c9160da6ac1cd888203ee674478c3",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/2e698c8dfd8c9160da6ac1cd888203ee674478c3"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/1061f8c14343d3f5d8968dea0dd8dcf9fe393df8",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/1061f8c14343d3f5d8968dea0dd8dcf9fe393df8",
      "html_url": "https://github.com/akka/alpakka/commit/1061f8c14343d3f5d8968dea0dd8dcf9fe393df8",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/1061f8c14343d3f5d8968dea0dd8dcf9fe393df8/comments",
      "author": {
        "login": "jypma",
        "id": 483519,
        "avatar_url": "https://avatars.githubusercontent.com/u/483519?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jypma",
        "html_url": "https://github.com/jypma",
        "followers_url": "https://api.github.com/users/jypma/followers",
        "following_url": "https://api.github.com/users/jypma/following{/other_user}",
        "gists_url": "https://api.github.com/users/jypma/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jypma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jypma/subscriptions",
        "organizations_url": "https://api.github.com/users/jypma/orgs",
        "repos_url": "https://api.github.com/users/jypma/repos",
        "events_url": "https://api.github.com/users/jypma/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jypma/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "jypma",
        "id": 483519,
        "avatar_url": "https://avatars.githubusercontent.com/u/483519?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jypma",
        "html_url": "https://github.com/jypma",
        "followers_url": "https://api.github.com/users/jypma/followers",
        "following_url": "https://api.github.com/users/jypma/following{/other_user}",
        "gists_url": "https://api.github.com/users/jypma/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jypma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jypma/subscriptions",
        "organizations_url": "https://api.github.com/users/jypma/orgs",
        "repos_url": "https://api.github.com/users/jypma/repos",
        "events_url": "https://api.github.com/users/jypma/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jypma/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "80bd9a66d7c729fbe70449d3fcbab5c91168d3b2",
          "url": "https://api.github.com/repos/akka/alpakka/commits/80bd9a66d7c729fbe70449d3fcbab5c91168d3b2",
          "html_url": "https://github.com/akka/alpakka/commit/80bd9a66d7c729fbe70449d3fcbab5c91168d3b2"
        }
      ]
    },
    {
      "sha": "0470128203ff7c2a44a06b119fff7c0d562ec2f4",
      "commit": {
        "author": {
          "name": "Alexander Golubev",
          "email": "alexander.golubev@gmail.com",
          "date": "2016-11-14T00:48:52Z"
        },
        "committer": {
          "name": "Jan Ypma",
          "email": "jyp@tradeshift.com",
          "date": "2016-11-14T08:50:30Z"
        },
        "message": "=s3 30 move settings to config file and add S3Settings",
        "tree": {
          "sha": "e08fd4b743a6e8eba8f8d5b470e7591e4e46a3d1",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/e08fd4b743a6e8eba8f8d5b470e7591e4e46a3d1"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/0470128203ff7c2a44a06b119fff7c0d562ec2f4",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/0470128203ff7c2a44a06b119fff7c0d562ec2f4",
      "html_url": "https://github.com/akka/alpakka/commit/0470128203ff7c2a44a06b119fff7c0d562ec2f4",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/0470128203ff7c2a44a06b119fff7c0d562ec2f4/comments",
      "author": {
        "login": "agolubev",
        "id": 461456,
        "avatar_url": "https://avatars.githubusercontent.com/u/461456?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/agolubev",
        "html_url": "https://github.com/agolubev",
        "followers_url": "https://api.github.com/users/agolubev/followers",
        "following_url": "https://api.github.com/users/agolubev/following{/other_user}",
        "gists_url": "https://api.github.com/users/agolubev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/agolubev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/agolubev/subscriptions",
        "organizations_url": "https://api.github.com/users/agolubev/orgs",
        "repos_url": "https://api.github.com/users/agolubev/repos",
        "events_url": "https://api.github.com/users/agolubev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/agolubev/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "jypma",
        "id": 483519,
        "avatar_url": "https://avatars.githubusercontent.com/u/483519?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jypma",
        "html_url": "https://github.com/jypma",
        "followers_url": "https://api.github.com/users/jypma/followers",
        "following_url": "https://api.github.com/users/jypma/following{/other_user}",
        "gists_url": "https://api.github.com/users/jypma/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jypma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jypma/subscriptions",
        "organizations_url": "https://api.github.com/users/jypma/orgs",
        "repos_url": "https://api.github.com/users/jypma/repos",
        "events_url": "https://api.github.com/users/jypma/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jypma/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1061f8c14343d3f5d8968dea0dd8dcf9fe393df8",
          "url": "https://api.github.com/repos/akka/alpakka/commits/1061f8c14343d3f5d8968dea0dd8dcf9fe393df8",
          "html_url": "https://github.com/akka/alpakka/commit/1061f8c14343d3f5d8968dea0dd8dcf9fe393df8"
        }
      ]
    },
    {
      "sha": "4d26f99bd0f4d217e33f4e51c75418026c956cbc",
      "commit": {
        "author": {
          "name": "Alexander Golubev",
          "email": "alexander.golubev@gmail.com",
          "date": "2016-11-14T03:40:44Z"
        },
        "committer": {
          "name": "Jan Ypma",
          "email": "jyp@tradeshift.com",
          "date": "2016-11-14T08:50:30Z"
        },
        "message": "optimizations of SplitAfter stage",
        "tree": {
          "sha": "31d3c254553fb6749a9a28bc078378adfdb61a99",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/31d3c254553fb6749a9a28bc078378adfdb61a99"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/4d26f99bd0f4d217e33f4e51c75418026c956cbc",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/4d26f99bd0f4d217e33f4e51c75418026c956cbc",
      "html_url": "https://github.com/akka/alpakka/commit/4d26f99bd0f4d217e33f4e51c75418026c956cbc",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/4d26f99bd0f4d217e33f4e51c75418026c956cbc/comments",
      "author": {
        "login": "agolubev",
        "id": 461456,
        "avatar_url": "https://avatars.githubusercontent.com/u/461456?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/agolubev",
        "html_url": "https://github.com/agolubev",
        "followers_url": "https://api.github.com/users/agolubev/followers",
        "following_url": "https://api.github.com/users/agolubev/following{/other_user}",
        "gists_url": "https://api.github.com/users/agolubev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/agolubev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/agolubev/subscriptions",
        "organizations_url": "https://api.github.com/users/agolubev/orgs",
        "repos_url": "https://api.github.com/users/agolubev/repos",
        "events_url": "https://api.github.com/users/agolubev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/agolubev/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "jypma",
        "id": 483519,
        "avatar_url": "https://avatars.githubusercontent.com/u/483519?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jypma",
        "html_url": "https://github.com/jypma",
        "followers_url": "https://api.github.com/users/jypma/followers",
        "following_url": "https://api.github.com/users/jypma/following{/other_user}",
        "gists_url": "https://api.github.com/users/jypma/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jypma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jypma/subscriptions",
        "organizations_url": "https://api.github.com/users/jypma/orgs",
        "repos_url": "https://api.github.com/users/jypma/repos",
        "events_url": "https://api.github.com/users/jypma/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jypma/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "0470128203ff7c2a44a06b119fff7c0d562ec2f4",
          "url": "https://api.github.com/repos/akka/alpakka/commits/0470128203ff7c2a44a06b119fff7c0d562ec2f4",
          "html_url": "https://github.com/akka/alpakka/commit/0470128203ff7c2a44a06b119fff7c0d562ec2f4"
        }
      ]
    },
    {
      "sha": "6302dd09bc21f6e9e1677617cd1492a872c2daa2",
      "commit": {
        "author": {
          "name": "Alexander Golubev",
          "email": "alexander.golubev@gmail.com",
          "date": "2016-11-15T04:31:44Z"
        },
        "committer": {
          "name": "Jan Ypma",
          "email": "jyp@tradeshift.com",
          "date": "2016-11-15T08:09:54Z"
        },
        "message": "Changes according to Parik’s feedback",
        "tree": {
          "sha": "33035d654cba7d8233f845ffe268ed129ed3b080",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/33035d654cba7d8233f845ffe268ed129ed3b080"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/6302dd09bc21f6e9e1677617cd1492a872c2daa2",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/6302dd09bc21f6e9e1677617cd1492a872c2daa2",
      "html_url": "https://github.com/akka/alpakka/commit/6302dd09bc21f6e9e1677617cd1492a872c2daa2",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/6302dd09bc21f6e9e1677617cd1492a872c2daa2/comments",
      "author": {
        "login": "agolubev",
        "id": 461456,
        "avatar_url": "https://avatars.githubusercontent.com/u/461456?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/agolubev",
        "html_url": "https://github.com/agolubev",
        "followers_url": "https://api.github.com/users/agolubev/followers",
        "following_url": "https://api.github.com/users/agolubev/following{/other_user}",
        "gists_url": "https://api.github.com/users/agolubev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/agolubev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/agolubev/subscriptions",
        "organizations_url": "https://api.github.com/users/agolubev/orgs",
        "repos_url": "https://api.github.com/users/agolubev/repos",
        "events_url": "https://api.github.com/users/agolubev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/agolubev/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "jypma",
        "id": 483519,
        "avatar_url": "https://avatars.githubusercontent.com/u/483519?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jypma",
        "html_url": "https://github.com/jypma",
        "followers_url": "https://api.github.com/users/jypma/followers",
        "following_url": "https://api.github.com/users/jypma/following{/other_user}",
        "gists_url": "https://api.github.com/users/jypma/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jypma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jypma/subscriptions",
        "organizations_url": "https://api.github.com/users/jypma/orgs",
        "repos_url": "https://api.github.com/users/jypma/repos",
        "events_url": "https://api.github.com/users/jypma/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jypma/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "4d26f99bd0f4d217e33f4e51c75418026c956cbc",
          "url": "https://api.github.com/repos/akka/alpakka/commits/4d26f99bd0f4d217e33f4e51c75418026c956cbc",
          "html_url": "https://github.com/akka/alpakka/commit/4d26f99bd0f4d217e33f4e51c75418026c956cbc"
        }
      ]
    },
    {
      "sha": "0cf1c7953ad6d5582315001f60dec016dc59eb40",
      "commit": {
        "author": {
          "name": "Jan Ypma",
          "email": "jyp@tradeshift.com",
          "date": "2016-11-15T08:35:23Z"
        },
        "committer": {
          "name": "Jan Ypma",
          "email": "jyp@tradeshift.com",
          "date": "2016-11-15T08:35:23Z"
        },
        "message": "fix newline at end of file",
        "tree": {
          "sha": "8af486a88779ef00c9b39de95e4c100bab38385a",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/8af486a88779ef00c9b39de95e4c100bab38385a"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/0cf1c7953ad6d5582315001f60dec016dc59eb40",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/0cf1c7953ad6d5582315001f60dec016dc59eb40",
      "html_url": "https://github.com/akka/alpakka/commit/0cf1c7953ad6d5582315001f60dec016dc59eb40",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/0cf1c7953ad6d5582315001f60dec016dc59eb40/comments",
      "author": {
        "login": "jypma",
        "id": 483519,
        "avatar_url": "https://avatars.githubusercontent.com/u/483519?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jypma",
        "html_url": "https://github.com/jypma",
        "followers_url": "https://api.github.com/users/jypma/followers",
        "following_url": "https://api.github.com/users/jypma/following{/other_user}",
        "gists_url": "https://api.github.com/users/jypma/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jypma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jypma/subscriptions",
        "organizations_url": "https://api.github.com/users/jypma/orgs",
        "repos_url": "https://api.github.com/users/jypma/repos",
        "events_url": "https://api.github.com/users/jypma/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jypma/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "jypma",
        "id": 483519,
        "avatar_url": "https://avatars.githubusercontent.com/u/483519?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jypma",
        "html_url": "https://github.com/jypma",
        "followers_url": "https://api.github.com/users/jypma/followers",
        "following_url": "https://api.github.com/users/jypma/following{/other_user}",
        "gists_url": "https://api.github.com/users/jypma/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jypma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jypma/subscriptions",
        "organizations_url": "https://api.github.com/users/jypma/orgs",
        "repos_url": "https://api.github.com/users/jypma/repos",
        "events_url": "https://api.github.com/users/jypma/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jypma/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "6302dd09bc21f6e9e1677617cd1492a872c2daa2",
          "url": "https://api.github.com/repos/akka/alpakka/commits/6302dd09bc21f6e9e1677617cd1492a872c2daa2",
          "html_url": "https://github.com/akka/alpakka/commit/6302dd09bc21f6e9e1677617cd1492a872c2daa2"
        }
      ]
    },
    {
      "sha": "aaaf47d353d03fb243575fa96314c1361b7ef5a7",
      "commit": {
        "author": {
          "name": "dpfeiffer",
          "email": "d.pfeiffer404@gmail.com",
          "date": "2016-11-16T07:33:22Z"
        },
        "committer": {
          "name": "dpfeiffer",
          "email": "d.pfeiffer404@gmail.com",
          "date": "2016-11-16T07:33:22Z"
        },
        "message": "Start services as docker containers\n\n- Provide docker-compose.yml to start up services locally",
        "tree": {
          "sha": "33c526d7c15016d8c227f38a94e807b6b9628191",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/33c526d7c15016d8c227f38a94e807b6b9628191"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/aaaf47d353d03fb243575fa96314c1361b7ef5a7",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/aaaf47d353d03fb243575fa96314c1361b7ef5a7",
      "html_url": "https://github.com/akka/alpakka/commit/aaaf47d353d03fb243575fa96314c1361b7ef5a7",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/aaaf47d353d03fb243575fa96314c1361b7ef5a7/comments",
      "author": {
        "login": "dpfeiffer",
        "id": 2509957,
        "avatar_url": "https://avatars.githubusercontent.com/u/2509957?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dpfeiffer",
        "html_url": "https://github.com/dpfeiffer",
        "followers_url": "https://api.github.com/users/dpfeiffer/followers",
        "following_url": "https://api.github.com/users/dpfeiffer/following{/other_user}",
        "gists_url": "https://api.github.com/users/dpfeiffer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dpfeiffer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dpfeiffer/subscriptions",
        "organizations_url": "https://api.github.com/users/dpfeiffer/orgs",
        "repos_url": "https://api.github.com/users/dpfeiffer/repos",
        "events_url": "https://api.github.com/users/dpfeiffer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dpfeiffer/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "dpfeiffer",
        "id": 2509957,
        "avatar_url": "https://avatars.githubusercontent.com/u/2509957?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dpfeiffer",
        "html_url": "https://github.com/dpfeiffer",
        "followers_url": "https://api.github.com/users/dpfeiffer/followers",
        "following_url": "https://api.github.com/users/dpfeiffer/following{/other_user}",
        "gists_url": "https://api.github.com/users/dpfeiffer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dpfeiffer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dpfeiffer/subscriptions",
        "organizations_url": "https://api.github.com/users/dpfeiffer/orgs",
        "repos_url": "https://api.github.com/users/dpfeiffer/repos",
        "events_url": "https://api.github.com/users/dpfeiffer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dpfeiffer/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "80bd9a66d7c729fbe70449d3fcbab5c91168d3b2",
          "url": "https://api.github.com/repos/akka/alpakka/commits/80bd9a66d7c729fbe70449d3fcbab5c91168d3b2",
          "html_url": "https://github.com/akka/alpakka/commit/80bd9a66d7c729fbe70449d3fcbab5c91168d3b2"
        }
      ]
    },
    {
      "sha": "3ebc8d425560b967879a65c8d2436eb77a52785f",
      "commit": {
        "author": {
          "name": "dpfeiffer",
          "email": "d.pfeiffer404@gmail.com",
          "date": "2016-11-16T07:35:33Z"
        },
        "committer": {
          "name": "dpfeiffer",
          "email": "d.pfeiffer404@gmail.com",
          "date": "2016-11-16T07:35:33Z"
        },
        "message": "Add newline",
        "tree": {
          "sha": "33a70f3f08d747ba815dae0062fa733876af9c81",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/33a70f3f08d747ba815dae0062fa733876af9c81"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/3ebc8d425560b967879a65c8d2436eb77a52785f",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/3ebc8d425560b967879a65c8d2436eb77a52785f",
      "html_url": "https://github.com/akka/alpakka/commit/3ebc8d425560b967879a65c8d2436eb77a52785f",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/3ebc8d425560b967879a65c8d2436eb77a52785f/comments",
      "author": {
        "login": "dpfeiffer",
        "id": 2509957,
        "avatar_url": "https://avatars.githubusercontent.com/u/2509957?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dpfeiffer",
        "html_url": "https://github.com/dpfeiffer",
        "followers_url": "https://api.github.com/users/dpfeiffer/followers",
        "following_url": "https://api.github.com/users/dpfeiffer/following{/other_user}",
        "gists_url": "https://api.github.com/users/dpfeiffer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dpfeiffer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dpfeiffer/subscriptions",
        "organizations_url": "https://api.github.com/users/dpfeiffer/orgs",
        "repos_url": "https://api.github.com/users/dpfeiffer/repos",
        "events_url": "https://api.github.com/users/dpfeiffer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dpfeiffer/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "dpfeiffer",
        "id": 2509957,
        "avatar_url": "https://avatars.githubusercontent.com/u/2509957?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dpfeiffer",
        "html_url": "https://github.com/dpfeiffer",
        "followers_url": "https://api.github.com/users/dpfeiffer/followers",
        "following_url": "https://api.github.com/users/dpfeiffer/following{/other_user}",
        "gists_url": "https://api.github.com/users/dpfeiffer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dpfeiffer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dpfeiffer/subscriptions",
        "organizations_url": "https://api.github.com/users/dpfeiffer/orgs",
        "repos_url": "https://api.github.com/users/dpfeiffer/repos",
        "events_url": "https://api.github.com/users/dpfeiffer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dpfeiffer/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "aaaf47d353d03fb243575fa96314c1361b7ef5a7",
          "url": "https://api.github.com/repos/akka/alpakka/commits/aaaf47d353d03fb243575fa96314c1361b7ef5a7",
          "html_url": "https://github.com/akka/alpakka/commit/aaaf47d353d03fb243575fa96314c1361b7ef5a7"
        }
      ]
    },
    {
      "sha": "fae9a7f87e5735d93e0c9677305a172bb44053f3",
      "commit": {
        "author": {
          "name": "dpfeiffer",
          "email": "d.pfeiffer404@gmail.com",
          "date": "2016-11-16T07:40:26Z"
        },
        "committer": {
          "name": "dpfeiffer",
          "email": "d.pfeiffer404@gmail.com",
          "date": "2016-11-16T07:40:26Z"
        },
        "message": "Remove conflicting flags from docker run",
        "tree": {
          "sha": "0013f0abebe42d143a699f89ab15a0ea73aaa0dc",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/0013f0abebe42d143a699f89ab15a0ea73aaa0dc"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/fae9a7f87e5735d93e0c9677305a172bb44053f3",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/fae9a7f87e5735d93e0c9677305a172bb44053f3",
      "html_url": "https://github.com/akka/alpakka/commit/fae9a7f87e5735d93e0c9677305a172bb44053f3",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/fae9a7f87e5735d93e0c9677305a172bb44053f3/comments",
      "author": {
        "login": "dpfeiffer",
        "id": 2509957,
        "avatar_url": "https://avatars.githubusercontent.com/u/2509957?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dpfeiffer",
        "html_url": "https://github.com/dpfeiffer",
        "followers_url": "https://api.github.com/users/dpfeiffer/followers",
        "following_url": "https://api.github.com/users/dpfeiffer/following{/other_user}",
        "gists_url": "https://api.github.com/users/dpfeiffer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dpfeiffer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dpfeiffer/subscriptions",
        "organizations_url": "https://api.github.com/users/dpfeiffer/orgs",
        "repos_url": "https://api.github.com/users/dpfeiffer/repos",
        "events_url": "https://api.github.com/users/dpfeiffer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dpfeiffer/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "dpfeiffer",
        "id": 2509957,
        "avatar_url": "https://avatars.githubusercontent.com/u/2509957?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dpfeiffer",
        "html_url": "https://github.com/dpfeiffer",
        "followers_url": "https://api.github.com/users/dpfeiffer/followers",
        "following_url": "https://api.github.com/users/dpfeiffer/following{/other_user}",
        "gists_url": "https://api.github.com/users/dpfeiffer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dpfeiffer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dpfeiffer/subscriptions",
        "organizations_url": "https://api.github.com/users/dpfeiffer/orgs",
        "repos_url": "https://api.github.com/users/dpfeiffer/repos",
        "events_url": "https://api.github.com/users/dpfeiffer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dpfeiffer/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "3ebc8d425560b967879a65c8d2436eb77a52785f",
          "url": "https://api.github.com/repos/akka/alpakka/commits/3ebc8d425560b967879a65c8d2436eb77a52785f",
          "html_url": "https://github.com/akka/alpakka/commit/3ebc8d425560b967879a65c8d2436eb77a52785f"
        }
      ]
    },
    {
      "sha": "4035a827eeadb46688dc0abf204711fe11e47132",
      "commit": {
        "author": {
          "name": "Alexander Golubev",
          "email": "alexander.golubev@gmail.com",
          "date": "2016-11-15T22:27:09Z"
        },
        "committer": {
          "name": "Jan Ypma",
          "email": "jyp@tradeshift.com",
          "date": "2016-11-16T08:18:00Z"
        },
        "message": "another round of S3 cleaning based on Heiko feedback",
        "tree": {
          "sha": "befc34b6259646b9c7cc2a9d058309163a45c155",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/befc34b6259646b9c7cc2a9d058309163a45c155"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/4035a827eeadb46688dc0abf204711fe11e47132",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/4035a827eeadb46688dc0abf204711fe11e47132",
      "html_url": "https://github.com/akka/alpakka/commit/4035a827eeadb46688dc0abf204711fe11e47132",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/4035a827eeadb46688dc0abf204711fe11e47132/comments",
      "author": {
        "login": "agolubev",
        "id": 461456,
        "avatar_url": "https://avatars.githubusercontent.com/u/461456?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/agolubev",
        "html_url": "https://github.com/agolubev",
        "followers_url": "https://api.github.com/users/agolubev/followers",
        "following_url": "https://api.github.com/users/agolubev/following{/other_user}",
        "gists_url": "https://api.github.com/users/agolubev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/agolubev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/agolubev/subscriptions",
        "organizations_url": "https://api.github.com/users/agolubev/orgs",
        "repos_url": "https://api.github.com/users/agolubev/repos",
        "events_url": "https://api.github.com/users/agolubev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/agolubev/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "jypma",
        "id": 483519,
        "avatar_url": "https://avatars.githubusercontent.com/u/483519?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jypma",
        "html_url": "https://github.com/jypma",
        "followers_url": "https://api.github.com/users/jypma/followers",
        "following_url": "https://api.github.com/users/jypma/following{/other_user}",
        "gists_url": "https://api.github.com/users/jypma/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jypma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jypma/subscriptions",
        "organizations_url": "https://api.github.com/users/jypma/orgs",
        "repos_url": "https://api.github.com/users/jypma/repos",
        "events_url": "https://api.github.com/users/jypma/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jypma/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "0cf1c7953ad6d5582315001f60dec016dc59eb40",
          "url": "https://api.github.com/repos/akka/alpakka/commits/0cf1c7953ad6d5582315001f60dec016dc59eb40",
          "html_url": "https://github.com/akka/alpakka/commit/0cf1c7953ad6d5582315001f60dec016dc59eb40"
        }
      ]
    },
    {
      "sha": "2b4c6b80ff76f522169f9325287ae4fa2d2e8636",
      "commit": {
        "author": {
          "name": "Jan Ypma",
          "email": "jyp@tradeshift.com",
          "date": "2016-11-16T08:22:33Z"
        },
        "committer": {
          "name": "Jan Ypma",
          "email": "jyp@tradeshift.com",
          "date": "2016-11-16T08:22:33Z"
        },
        "message": "Use specific Vector instead of Seq\n\nThis will perform better if people keep appending headers afterwards.",
        "tree": {
          "sha": "3cb4a1bde9b540cf9b2d4e3ef2e1ed539077f688",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/3cb4a1bde9b540cf9b2d4e3ef2e1ed539077f688"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/2b4c6b80ff76f522169f9325287ae4fa2d2e8636",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/2b4c6b80ff76f522169f9325287ae4fa2d2e8636",
      "html_url": "https://github.com/akka/alpakka/commit/2b4c6b80ff76f522169f9325287ae4fa2d2e8636",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/2b4c6b80ff76f522169f9325287ae4fa2d2e8636/comments",
      "author": {
        "login": "jypma",
        "id": 483519,
        "avatar_url": "https://avatars.githubusercontent.com/u/483519?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jypma",
        "html_url": "https://github.com/jypma",
        "followers_url": "https://api.github.com/users/jypma/followers",
        "following_url": "https://api.github.com/users/jypma/following{/other_user}",
        "gists_url": "https://api.github.com/users/jypma/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jypma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jypma/subscriptions",
        "organizations_url": "https://api.github.com/users/jypma/orgs",
        "repos_url": "https://api.github.com/users/jypma/repos",
        "events_url": "https://api.github.com/users/jypma/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jypma/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "jypma",
        "id": 483519,
        "avatar_url": "https://avatars.githubusercontent.com/u/483519?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jypma",
        "html_url": "https://github.com/jypma",
        "followers_url": "https://api.github.com/users/jypma/followers",
        "following_url": "https://api.github.com/users/jypma/following{/other_user}",
        "gists_url": "https://api.github.com/users/jypma/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jypma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jypma/subscriptions",
        "organizations_url": "https://api.github.com/users/jypma/orgs",
        "repos_url": "https://api.github.com/users/jypma/repos",
        "events_url": "https://api.github.com/users/jypma/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jypma/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "4035a827eeadb46688dc0abf204711fe11e47132",
          "url": "https://api.github.com/repos/akka/alpakka/commits/4035a827eeadb46688dc0abf204711fe11e47132",
          "html_url": "https://github.com/akka/alpakka/commit/4035a827eeadb46688dc0abf204711fe11e47132"
        }
      ]
    },
    {
      "sha": "1be3b7fc8942c96d751fd9f02a67a8957c60f25f",
      "commit": {
        "author": {
          "name": "Patrik Nordwall",
          "email": "patrik.nordwall@gmail.com",
          "date": "2016-11-16T14:11:51Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-16T14:11:51Z"
        },
        "message": "Merge pull request #46 from stephennancekivell/stephennancekivell-mongo-link\n\nAdd link to reactive mongo",
        "tree": {
          "sha": "4ec23dadcb7e217607f34a610e76bef3c1bd28fe",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/4ec23dadcb7e217607f34a610e76bef3c1bd28fe"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/1be3b7fc8942c96d751fd9f02a67a8957c60f25f",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/1be3b7fc8942c96d751fd9f02a67a8957c60f25f",
      "html_url": "https://github.com/akka/alpakka/commit/1be3b7fc8942c96d751fd9f02a67a8957c60f25f",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/1be3b7fc8942c96d751fd9f02a67a8957c60f25f/comments",
      "author": {
        "login": "patriknw",
        "id": 336161,
        "avatar_url": "https://avatars.githubusercontent.com/u/336161?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/patriknw",
        "html_url": "https://github.com/patriknw",
        "followers_url": "https://api.github.com/users/patriknw/followers",
        "following_url": "https://api.github.com/users/patriknw/following{/other_user}",
        "gists_url": "https://api.github.com/users/patriknw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/patriknw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/patriknw/subscriptions",
        "organizations_url": "https://api.github.com/users/patriknw/orgs",
        "repos_url": "https://api.github.com/users/patriknw/repos",
        "events_url": "https://api.github.com/users/patriknw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/patriknw/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "80bd9a66d7c729fbe70449d3fcbab5c91168d3b2",
          "url": "https://api.github.com/repos/akka/alpakka/commits/80bd9a66d7c729fbe70449d3fcbab5c91168d3b2",
          "html_url": "https://github.com/akka/alpakka/commit/80bd9a66d7c729fbe70449d3fcbab5c91168d3b2"
        },
        {
          "sha": "ae7f194a4927b1f89c1f9d1facddc16d1d845599",
          "url": "https://api.github.com/repos/akka/alpakka/commits/ae7f194a4927b1f89c1f9d1facddc16d1d845599",
          "html_url": "https://github.com/akka/alpakka/commit/ae7f194a4927b1f89c1f9d1facddc16d1d845599"
        }
      ]
    },
    {
      "sha": "4128daf4443eb546b4c998f028988557265509f8",
      "commit": {
        "author": {
          "name": "dpfeiffer",
          "email": "d.pfeiffer404@gmail.com",
          "date": "2016-11-16T15:12:43Z"
        },
        "committer": {
          "name": "dpfeiffer",
          "email": "d.pfeiffer404@gmail.com",
          "date": "2016-11-16T15:12:43Z"
        },
        "message": "Add explanation to docker-compose file",
        "tree": {
          "sha": "2e314e49179da5d852d982b5cce14f6a39460793",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/2e314e49179da5d852d982b5cce14f6a39460793"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/4128daf4443eb546b4c998f028988557265509f8",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/4128daf4443eb546b4c998f028988557265509f8",
      "html_url": "https://github.com/akka/alpakka/commit/4128daf4443eb546b4c998f028988557265509f8",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/4128daf4443eb546b4c998f028988557265509f8/comments",
      "author": {
        "login": "dpfeiffer",
        "id": 2509957,
        "avatar_url": "https://avatars.githubusercontent.com/u/2509957?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dpfeiffer",
        "html_url": "https://github.com/dpfeiffer",
        "followers_url": "https://api.github.com/users/dpfeiffer/followers",
        "following_url": "https://api.github.com/users/dpfeiffer/following{/other_user}",
        "gists_url": "https://api.github.com/users/dpfeiffer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dpfeiffer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dpfeiffer/subscriptions",
        "organizations_url": "https://api.github.com/users/dpfeiffer/orgs",
        "repos_url": "https://api.github.com/users/dpfeiffer/repos",
        "events_url": "https://api.github.com/users/dpfeiffer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dpfeiffer/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "dpfeiffer",
        "id": 2509957,
        "avatar_url": "https://avatars.githubusercontent.com/u/2509957?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dpfeiffer",
        "html_url": "https://github.com/dpfeiffer",
        "followers_url": "https://api.github.com/users/dpfeiffer/followers",
        "following_url": "https://api.github.com/users/dpfeiffer/following{/other_user}",
        "gists_url": "https://api.github.com/users/dpfeiffer/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dpfeiffer/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dpfeiffer/subscriptions",
        "organizations_url": "https://api.github.com/users/dpfeiffer/orgs",
        "repos_url": "https://api.github.com/users/dpfeiffer/repos",
        "events_url": "https://api.github.com/users/dpfeiffer/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dpfeiffer/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "fae9a7f87e5735d93e0c9677305a172bb44053f3",
          "url": "https://api.github.com/repos/akka/alpakka/commits/fae9a7f87e5735d93e0c9677305a172bb44053f3",
          "html_url": "https://github.com/akka/alpakka/commit/fae9a7f87e5735d93e0c9677305a172bb44053f3"
        }
      ]
    },
    {
      "sha": "81edbf70259d8aef396ac28b6d7407e0bfee43c7",
      "commit": {
        "author": {
          "name": "Heiko Seeberger",
          "email": "mail@heikoseeberger.de",
          "date": "2016-11-16T19:29:51Z"
        },
        "committer": {
          "name": "Heiko Seeberger",
          "email": "mail@heikoseeberger.de",
          "date": "2016-11-16T19:29:51Z"
        },
        "message": "step1",
        "tree": {
          "sha": "d2b9e36a7c7ba24b69b396ec5480c2d5f419b677",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/d2b9e36a7c7ba24b69b396ec5480c2d5f419b677"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/81edbf70259d8aef396ac28b6d7407e0bfee43c7",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/81edbf70259d8aef396ac28b6d7407e0bfee43c7",
      "html_url": "https://github.com/akka/alpakka/commit/81edbf70259d8aef396ac28b6d7407e0bfee43c7",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/81edbf70259d8aef396ac28b6d7407e0bfee43c7/comments",
      "author": {
        "login": "hseeberger",
        "id": 41911,
        "avatar_url": "https://avatars.githubusercontent.com/u/41911?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hseeberger",
        "html_url": "https://github.com/hseeberger",
        "followers_url": "https://api.github.com/users/hseeberger/followers",
        "following_url": "https://api.github.com/users/hseeberger/following{/other_user}",
        "gists_url": "https://api.github.com/users/hseeberger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hseeberger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hseeberger/subscriptions",
        "organizations_url": "https://api.github.com/users/hseeberger/orgs",
        "repos_url": "https://api.github.com/users/hseeberger/repos",
        "events_url": "https://api.github.com/users/hseeberger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hseeberger/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "hseeberger",
        "id": 41911,
        "avatar_url": "https://avatars.githubusercontent.com/u/41911?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hseeberger",
        "html_url": "https://github.com/hseeberger",
        "followers_url": "https://api.github.com/users/hseeberger/followers",
        "following_url": "https://api.github.com/users/hseeberger/following{/other_user}",
        "gists_url": "https://api.github.com/users/hseeberger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hseeberger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hseeberger/subscriptions",
        "organizations_url": "https://api.github.com/users/hseeberger/orgs",
        "repos_url": "https://api.github.com/users/hseeberger/repos",
        "events_url": "https://api.github.com/users/hseeberger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hseeberger/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1be3b7fc8942c96d751fd9f02a67a8957c60f25f",
          "url": "https://api.github.com/repos/akka/alpakka/commits/1be3b7fc8942c96d751fd9f02a67a8957c60f25f",
          "html_url": "https://github.com/akka/alpakka/commit/1be3b7fc8942c96d751fd9f02a67a8957c60f25f"
        }
      ]
    },
    {
      "sha": "d5a976f3abef9d040da4d3db14ebdfb1885563ac",
      "commit": {
        "author": {
          "name": "Heiko Seeberger",
          "email": "mail@heikoseeberger.de",
          "date": "2016-11-16T20:09:53Z"
        },
        "committer": {
          "name": "Heiko Seeberger",
          "email": "mail@heikoseeberger.de",
          "date": "2016-11-16T20:09:53Z"
        },
        "message": "step2",
        "tree": {
          "sha": "64e9f9d7e0cbc288e1939c76b925ae07a1bc7608",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/64e9f9d7e0cbc288e1939c76b925ae07a1bc7608"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/d5a976f3abef9d040da4d3db14ebdfb1885563ac",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/d5a976f3abef9d040da4d3db14ebdfb1885563ac",
      "html_url": "https://github.com/akka/alpakka/commit/d5a976f3abef9d040da4d3db14ebdfb1885563ac",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/d5a976f3abef9d040da4d3db14ebdfb1885563ac/comments",
      "author": {
        "login": "hseeberger",
        "id": 41911,
        "avatar_url": "https://avatars.githubusercontent.com/u/41911?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hseeberger",
        "html_url": "https://github.com/hseeberger",
        "followers_url": "https://api.github.com/users/hseeberger/followers",
        "following_url": "https://api.github.com/users/hseeberger/following{/other_user}",
        "gists_url": "https://api.github.com/users/hseeberger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hseeberger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hseeberger/subscriptions",
        "organizations_url": "https://api.github.com/users/hseeberger/orgs",
        "repos_url": "https://api.github.com/users/hseeberger/repos",
        "events_url": "https://api.github.com/users/hseeberger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hseeberger/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "hseeberger",
        "id": 41911,
        "avatar_url": "https://avatars.githubusercontent.com/u/41911?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hseeberger",
        "html_url": "https://github.com/hseeberger",
        "followers_url": "https://api.github.com/users/hseeberger/followers",
        "following_url": "https://api.github.com/users/hseeberger/following{/other_user}",
        "gists_url": "https://api.github.com/users/hseeberger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hseeberger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hseeberger/subscriptions",
        "organizations_url": "https://api.github.com/users/hseeberger/orgs",
        "repos_url": "https://api.github.com/users/hseeberger/repos",
        "events_url": "https://api.github.com/users/hseeberger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hseeberger/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "81edbf70259d8aef396ac28b6d7407e0bfee43c7",
          "url": "https://api.github.com/repos/akka/alpakka/commits/81edbf70259d8aef396ac28b6d7407e0bfee43c7",
          "html_url": "https://github.com/akka/alpakka/commit/81edbf70259d8aef396ac28b6d7407e0bfee43c7"
        }
      ]
    },
    {
      "sha": "ee55ff7e81b357f9dd3c3ae9fb76960e54519aa9",
      "commit": {
        "author": {
          "name": "Heiko Seeberger",
          "email": "mail@heikoseeberger.de",
          "date": "2016-11-16T20:12:25Z"
        },
        "committer": {
          "name": "Heiko Seeberger",
          "email": "mail@heikoseeberger.de",
          "date": "2016-11-16T20:12:25Z"
        },
        "message": "step3",
        "tree": {
          "sha": "8d6e42de65ee5a64e693d37d3dad815eb9b39695",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/8d6e42de65ee5a64e693d37d3dad815eb9b39695"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/ee55ff7e81b357f9dd3c3ae9fb76960e54519aa9",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/ee55ff7e81b357f9dd3c3ae9fb76960e54519aa9",
      "html_url": "https://github.com/akka/alpakka/commit/ee55ff7e81b357f9dd3c3ae9fb76960e54519aa9",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/ee55ff7e81b357f9dd3c3ae9fb76960e54519aa9/comments",
      "author": {
        "login": "hseeberger",
        "id": 41911,
        "avatar_url": "https://avatars.githubusercontent.com/u/41911?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hseeberger",
        "html_url": "https://github.com/hseeberger",
        "followers_url": "https://api.github.com/users/hseeberger/followers",
        "following_url": "https://api.github.com/users/hseeberger/following{/other_user}",
        "gists_url": "https://api.github.com/users/hseeberger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hseeberger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hseeberger/subscriptions",
        "organizations_url": "https://api.github.com/users/hseeberger/orgs",
        "repos_url": "https://api.github.com/users/hseeberger/repos",
        "events_url": "https://api.github.com/users/hseeberger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hseeberger/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "hseeberger",
        "id": 41911,
        "avatar_url": "https://avatars.githubusercontent.com/u/41911?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hseeberger",
        "html_url": "https://github.com/hseeberger",
        "followers_url": "https://api.github.com/users/hseeberger/followers",
        "following_url": "https://api.github.com/users/hseeberger/following{/other_user}",
        "gists_url": "https://api.github.com/users/hseeberger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hseeberger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hseeberger/subscriptions",
        "organizations_url": "https://api.github.com/users/hseeberger/orgs",
        "repos_url": "https://api.github.com/users/hseeberger/repos",
        "events_url": "https://api.github.com/users/hseeberger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hseeberger/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "d5a976f3abef9d040da4d3db14ebdfb1885563ac",
          "url": "https://api.github.com/repos/akka/alpakka/commits/d5a976f3abef9d040da4d3db14ebdfb1885563ac",
          "html_url": "https://github.com/akka/alpakka/commit/d5a976f3abef9d040da4d3db14ebdfb1885563ac"
        }
      ]
    },
    {
      "sha": "db40474ade8bd73370472e52c105425465afe9d7",
      "commit": {
        "author": {
          "name": "Heiko Seeberger",
          "email": "mail@heikoseeberger.de",
          "date": "2016-11-16T20:13:24Z"
        },
        "committer": {
          "name": "Heiko Seeberger",
          "email": "mail@heikoseeberger.de",
          "date": "2016-11-16T20:13:24Z"
        },
        "message": "step4",
        "tree": {
          "sha": "7d9060117026f06804f0ed73eefde28b7b55785c",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/7d9060117026f06804f0ed73eefde28b7b55785c"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/db40474ade8bd73370472e52c105425465afe9d7",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/db40474ade8bd73370472e52c105425465afe9d7",
      "html_url": "https://github.com/akka/alpakka/commit/db40474ade8bd73370472e52c105425465afe9d7",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/db40474ade8bd73370472e52c105425465afe9d7/comments",
      "author": {
        "login": "hseeberger",
        "id": 41911,
        "avatar_url": "https://avatars.githubusercontent.com/u/41911?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hseeberger",
        "html_url": "https://github.com/hseeberger",
        "followers_url": "https://api.github.com/users/hseeberger/followers",
        "following_url": "https://api.github.com/users/hseeberger/following{/other_user}",
        "gists_url": "https://api.github.com/users/hseeberger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hseeberger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hseeberger/subscriptions",
        "organizations_url": "https://api.github.com/users/hseeberger/orgs",
        "repos_url": "https://api.github.com/users/hseeberger/repos",
        "events_url": "https://api.github.com/users/hseeberger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hseeberger/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "hseeberger",
        "id": 41911,
        "avatar_url": "https://avatars.githubusercontent.com/u/41911?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hseeberger",
        "html_url": "https://github.com/hseeberger",
        "followers_url": "https://api.github.com/users/hseeberger/followers",
        "following_url": "https://api.github.com/users/hseeberger/following{/other_user}",
        "gists_url": "https://api.github.com/users/hseeberger/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hseeberger/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hseeberger/subscriptions",
        "organizations_url": "https://api.github.com/users/hseeberger/orgs",
        "repos_url": "https://api.github.com/users/hseeberger/repos",
        "events_url": "https://api.github.com/users/hseeberger/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hseeberger/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "ee55ff7e81b357f9dd3c3ae9fb76960e54519aa9",
          "url": "https://api.github.com/repos/akka/alpakka/commits/ee55ff7e81b357f9dd3c3ae9fb76960e54519aa9",
          "html_url": "https://github.com/akka/alpakka/commit/ee55ff7e81b357f9dd3c3ae9fb76960e54519aa9"
        }
      ]
    },
    {
      "sha": "c9960883a0204e0c3813c613afa4e76a0be17136",
      "commit": {
        "author": {
          "name": "Alexander Golubev",
          "email": "alexander.golubev@gmail.com",
          "date": "2016-11-17T03:37:52Z"
        },
        "committer": {
          "name": "Jan Ypma",
          "email": "jyp@tradeshift.com",
          "date": "2016-11-17T07:55:07Z"
        },
        "message": "added all changes according to @2m feback except java test",
        "tree": {
          "sha": "4a0ec9250f7deb6bb44f775f0b644b20e07fee10",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/4a0ec9250f7deb6bb44f775f0b644b20e07fee10"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/c9960883a0204e0c3813c613afa4e76a0be17136",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/c9960883a0204e0c3813c613afa4e76a0be17136",
      "html_url": "https://github.com/akka/alpakka/commit/c9960883a0204e0c3813c613afa4e76a0be17136",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/c9960883a0204e0c3813c613afa4e76a0be17136/comments",
      "author": {
        "login": "agolubev",
        "id": 461456,
        "avatar_url": "https://avatars.githubusercontent.com/u/461456?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/agolubev",
        "html_url": "https://github.com/agolubev",
        "followers_url": "https://api.github.com/users/agolubev/followers",
        "following_url": "https://api.github.com/users/agolubev/following{/other_user}",
        "gists_url": "https://api.github.com/users/agolubev/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/agolubev/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/agolubev/subscriptions",
        "organizations_url": "https://api.github.com/users/agolubev/orgs",
        "repos_url": "https://api.github.com/users/agolubev/repos",
        "events_url": "https://api.github.com/users/agolubev/events{/privacy}",
        "received_events_url": "https://api.github.com/users/agolubev/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "jypma",
        "id": 483519,
        "avatar_url": "https://avatars.githubusercontent.com/u/483519?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jypma",
        "html_url": "https://github.com/jypma",
        "followers_url": "https://api.github.com/users/jypma/followers",
        "following_url": "https://api.github.com/users/jypma/following{/other_user}",
        "gists_url": "https://api.github.com/users/jypma/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jypma/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jypma/subscriptions",
        "organizations_url": "https://api.github.com/users/jypma/orgs",
        "repos_url": "https://api.github.com/users/jypma/repos",
        "events_url": "https://api.github.com/users/jypma/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jypma/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "2b4c6b80ff76f522169f9325287ae4fa2d2e8636",
          "url": "https://api.github.com/repos/akka/alpakka/commits/2b4c6b80ff76f522169f9325287ae4fa2d2e8636",
          "html_url": "https://github.com/akka/alpakka/commit/2b4c6b80ff76f522169f9325287ae4fa2d2e8636"
        }
      ]
    },
    {
      "sha": "6d6c77c22a8543c3ed003eb235d61a46b16b1345",
      "commit": {
        "author": {
          "name": "Konrad Malawski",
          "email": "ktoso@project13.pl",
          "date": "2016-11-17T16:15:04Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-17T16:15:04Z"
        },
        "message": "Merge pull request #52 from hseeberger/49-scalafmt\n\nSwitch to scalafmt",
        "tree": {
          "sha": "7d9060117026f06804f0ed73eefde28b7b55785c",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/7d9060117026f06804f0ed73eefde28b7b55785c"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/6d6c77c22a8543c3ed003eb235d61a46b16b1345",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/6d6c77c22a8543c3ed003eb235d61a46b16b1345",
      "html_url": "https://github.com/akka/alpakka/commit/6d6c77c22a8543c3ed003eb235d61a46b16b1345",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/6d6c77c22a8543c3ed003eb235d61a46b16b1345/comments",
      "author": {
        "login": "ktoso",
        "id": 120979,
        "avatar_url": "https://avatars.githubusercontent.com/u/120979?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ktoso",
        "html_url": "https://github.com/ktoso",
        "followers_url": "https://api.github.com/users/ktoso/followers",
        "following_url": "https://api.github.com/users/ktoso/following{/other_user}",
        "gists_url": "https://api.github.com/users/ktoso/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ktoso/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ktoso/subscriptions",
        "organizations_url": "https://api.github.com/users/ktoso/orgs",
        "repos_url": "https://api.github.com/users/ktoso/repos",
        "events_url": "https://api.github.com/users/ktoso/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ktoso/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "1be3b7fc8942c96d751fd9f02a67a8957c60f25f",
          "url": "https://api.github.com/repos/akka/alpakka/commits/1be3b7fc8942c96d751fd9f02a67a8957c60f25f",
          "html_url": "https://github.com/akka/alpakka/commit/1be3b7fc8942c96d751fd9f02a67a8957c60f25f"
        },
        {
          "sha": "db40474ade8bd73370472e52c105425465afe9d7",
          "url": "https://api.github.com/repos/akka/alpakka/commits/db40474ade8bd73370472e52c105425465afe9d7",
          "html_url": "https://github.com/akka/alpakka/commit/db40474ade8bd73370472e52c105425465afe9d7"
        }
      ]
    },
    {
      "sha": "d2d3380fc7dfc46e288087bd5e7472fa2bfc4e9e",
      "commit": {
        "author": {
          "name": "Branislav Lazic",
          "email": "brano2411@hotmail.com",
          "date": "2016-11-18T21:21:30Z"
        },
        "committer": {
          "name": "Branislav Lazic",
          "email": "brano2411@hotmail.com",
          "date": "2016-11-18T21:21:30Z"
        },
        "message": "Change groupId com.typesafe.akka to com.lightbend.akka",
        "tree": {
          "sha": "fb8958ba453eadf4d59655db7545e5fbe2d22af9",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/fb8958ba453eadf4d59655db7545e5fbe2d22af9"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/d2d3380fc7dfc46e288087bd5e7472fa2bfc4e9e",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/d2d3380fc7dfc46e288087bd5e7472fa2bfc4e9e",
      "html_url": "https://github.com/akka/alpakka/commit/d2d3380fc7dfc46e288087bd5e7472fa2bfc4e9e",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/d2d3380fc7dfc46e288087bd5e7472fa2bfc4e9e/comments",
      "author": {
        "login": "BranislavLazic",
        "id": 3228974,
        "avatar_url": "https://avatars.githubusercontent.com/u/3228974?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BranislavLazic",
        "html_url": "https://github.com/BranislavLazic",
        "followers_url": "https://api.github.com/users/BranislavLazic/followers",
        "following_url": "https://api.github.com/users/BranislavLazic/following{/other_user}",
        "gists_url": "https://api.github.com/users/BranislavLazic/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/BranislavLazic/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/BranislavLazic/subscriptions",
        "organizations_url": "https://api.github.com/users/BranislavLazic/orgs",
        "repos_url": "https://api.github.com/users/BranislavLazic/repos",
        "events_url": "https://api.github.com/users/BranislavLazic/events{/privacy}",
        "received_events_url": "https://api.github.com/users/BranislavLazic/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "BranislavLazic",
        "id": 3228974,
        "avatar_url": "https://avatars.githubusercontent.com/u/3228974?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/BranislavLazic",
        "html_url": "https://github.com/BranislavLazic",
        "followers_url": "https://api.github.com/users/BranislavLazic/followers",
        "following_url": "https://api.github.com/users/BranislavLazic/following{/other_user}",
        "gists_url": "https://api.github.com/users/BranislavLazic/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/BranislavLazic/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/BranislavLazic/subscriptions",
        "organizations_url": "https://api.github.com/users/BranislavLazic/orgs",
        "repos_url": "https://api.github.com/users/BranislavLazic/repos",
        "events_url": "https://api.github.com/users/BranislavLazic/events{/privacy}",
        "received_events_url": "https://api.github.com/users/BranislavLazic/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "6d6c77c22a8543c3ed003eb235d61a46b16b1345",
          "url": "https://api.github.com/repos/akka/alpakka/commits/6d6c77c22a8543c3ed003eb235d61a46b16b1345",
          "html_url": "https://github.com/akka/alpakka/commit/6d6c77c22a8543c3ed003eb235d61a46b16b1345"
        }
      ]
    },
    {
      "sha": "e0afa9f89f8744b24356e344059cdfed1c1a7fed",
      "commit": {
        "author": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-21T10:16:11Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-21T10:16:11Z"
        },
        "message": "Merge pull request #65 from dpfeiffer/services-as-docker-containers\n\nStart services as docker containers",
        "tree": {
          "sha": "d84836a8330a1160137db4757865caffb25cdd1f",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/d84836a8330a1160137db4757865caffb25cdd1f"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/e0afa9f89f8744b24356e344059cdfed1c1a7fed",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/e0afa9f89f8744b24356e344059cdfed1c1a7fed",
      "html_url": "https://github.com/akka/alpakka/commit/e0afa9f89f8744b24356e344059cdfed1c1a7fed",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/e0afa9f89f8744b24356e344059cdfed1c1a7fed/comments",
      "author": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "6d6c77c22a8543c3ed003eb235d61a46b16b1345",
          "url": "https://api.github.com/repos/akka/alpakka/commits/6d6c77c22a8543c3ed003eb235d61a46b16b1345",
          "html_url": "https://github.com/akka/alpakka/commit/6d6c77c22a8543c3ed003eb235d61a46b16b1345"
        },
        {
          "sha": "4128daf4443eb546b4c998f028988557265509f8",
          "url": "https://api.github.com/repos/akka/alpakka/commits/4128daf4443eb546b4c998f028988557265509f8",
          "html_url": "https://github.com/akka/alpakka/commit/4128daf4443eb546b4c998f028988557265509f8"
        }
      ]
    },
    {
      "sha": "bf3975569b0e4413915a842bd91dc5b7314527c5",
      "commit": {
        "author": {
          "name": "Konrad Malawski",
          "email": "ktoso@project13.pl",
          "date": "2016-11-21T20:02:43Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-21T20:02:43Z"
        },
        "message": "Merge pull request #72 from BranislavLazic/master\n\nChange groupId com.typesafe.akka to com.lightbend.akka",
        "tree": {
          "sha": "f29c9985391f4b5b9b99ee3b04bcf92bef5b87a3",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/f29c9985391f4b5b9b99ee3b04bcf92bef5b87a3"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/bf3975569b0e4413915a842bd91dc5b7314527c5",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/bf3975569b0e4413915a842bd91dc5b7314527c5",
      "html_url": "https://github.com/akka/alpakka/commit/bf3975569b0e4413915a842bd91dc5b7314527c5",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/bf3975569b0e4413915a842bd91dc5b7314527c5/comments",
      "author": {
        "login": "ktoso",
        "id": 120979,
        "avatar_url": "https://avatars.githubusercontent.com/u/120979?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ktoso",
        "html_url": "https://github.com/ktoso",
        "followers_url": "https://api.github.com/users/ktoso/followers",
        "following_url": "https://api.github.com/users/ktoso/following{/other_user}",
        "gists_url": "https://api.github.com/users/ktoso/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ktoso/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ktoso/subscriptions",
        "organizations_url": "https://api.github.com/users/ktoso/orgs",
        "repos_url": "https://api.github.com/users/ktoso/repos",
        "events_url": "https://api.github.com/users/ktoso/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ktoso/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e0afa9f89f8744b24356e344059cdfed1c1a7fed",
          "url": "https://api.github.com/repos/akka/alpakka/commits/e0afa9f89f8744b24356e344059cdfed1c1a7fed",
          "html_url": "https://github.com/akka/alpakka/commit/e0afa9f89f8744b24356e344059cdfed1c1a7fed"
        },
        {
          "sha": "d2d3380fc7dfc46e288087bd5e7472fa2bfc4e9e",
          "url": "https://api.github.com/repos/akka/alpakka/commits/d2d3380fc7dfc46e288087bd5e7472fa2bfc4e9e",
          "html_url": "https://github.com/akka/alpakka/commit/d2d3380fc7dfc46e288087bd5e7472fa2bfc4e9e"
        }
      ]
    },
    {
      "sha": "946a1823b74ee4e150f17f0dc93a439f60c05198",
      "commit": {
        "author": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-18T13:16:25Z"
        },
        "committer": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-21T22:20:00Z"
        },
        "message": "Link to release docs",
        "tree": {
          "sha": "c1839a6c23f02c8b953a7dcc2535124509a02166",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/c1839a6c23f02c8b953a7dcc2535124509a02166"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/946a1823b74ee4e150f17f0dc93a439f60c05198",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/946a1823b74ee4e150f17f0dc93a439f60c05198",
      "html_url": "https://github.com/akka/alpakka/commit/946a1823b74ee4e150f17f0dc93a439f60c05198",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/946a1823b74ee4e150f17f0dc93a439f60c05198/comments",
      "author": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "6d6c77c22a8543c3ed003eb235d61a46b16b1345",
          "url": "https://api.github.com/repos/akka/alpakka/commits/6d6c77c22a8543c3ed003eb235d61a46b16b1345",
          "html_url": "https://github.com/akka/alpakka/commit/6d6c77c22a8543c3ed003eb235d61a46b16b1345"
        }
      ]
    },
    {
      "sha": "61aeb1e06c095759447c2b20dfeb03cf76a3f9ca",
      "commit": {
        "author": {
          "name": "Johan Andrén",
          "email": "johan@markatta.com",
          "date": "2016-11-22T12:37:18Z"
        },
        "committer": {
          "name": "Johan Andrén",
          "email": "johan@markatta.com",
          "date": "2016-11-22T12:37:18Z"
        },
        "message": "Fixed incorrect groupIds in the docs of amqp, file and mqtt #68",
        "tree": {
          "sha": "1b25820e5734c1062b50882fbe4f8a47c1cf6802",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/1b25820e5734c1062b50882fbe4f8a47c1cf6802"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/61aeb1e06c095759447c2b20dfeb03cf76a3f9ca",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/61aeb1e06c095759447c2b20dfeb03cf76a3f9ca",
      "html_url": "https://github.com/akka/alpakka/commit/61aeb1e06c095759447c2b20dfeb03cf76a3f9ca",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/61aeb1e06c095759447c2b20dfeb03cf76a3f9ca/comments",
      "author": {
        "login": "johanandren",
        "id": 666915,
        "avatar_url": "https://avatars.githubusercontent.com/u/666915?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/johanandren",
        "html_url": "https://github.com/johanandren",
        "followers_url": "https://api.github.com/users/johanandren/followers",
        "following_url": "https://api.github.com/users/johanandren/following{/other_user}",
        "gists_url": "https://api.github.com/users/johanandren/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/johanandren/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/johanandren/subscriptions",
        "organizations_url": "https://api.github.com/users/johanandren/orgs",
        "repos_url": "https://api.github.com/users/johanandren/repos",
        "events_url": "https://api.github.com/users/johanandren/events{/privacy}",
        "received_events_url": "https://api.github.com/users/johanandren/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "johanandren",
        "id": 666915,
        "avatar_url": "https://avatars.githubusercontent.com/u/666915?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/johanandren",
        "html_url": "https://github.com/johanandren",
        "followers_url": "https://api.github.com/users/johanandren/followers",
        "following_url": "https://api.github.com/users/johanandren/following{/other_user}",
        "gists_url": "https://api.github.com/users/johanandren/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/johanandren/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/johanandren/subscriptions",
        "organizations_url": "https://api.github.com/users/johanandren/orgs",
        "repos_url": "https://api.github.com/users/johanandren/repos",
        "events_url": "https://api.github.com/users/johanandren/events{/privacy}",
        "received_events_url": "https://api.github.com/users/johanandren/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "bf3975569b0e4413915a842bd91dc5b7314527c5",
          "url": "https://api.github.com/repos/akka/alpakka/commits/bf3975569b0e4413915a842bd91dc5b7314527c5",
          "html_url": "https://github.com/akka/alpakka/commit/bf3975569b0e4413915a842bd91dc5b7314527c5"
        }
      ]
    },
    {
      "sha": "f4b872d3cd8fe97638c9c6a68080ff7768b10b18",
      "commit": {
        "author": {
          "name": "Patrik Nordwall",
          "email": "patrik.nordwall@gmail.com",
          "date": "2016-11-22T15:05:25Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-22T15:05:25Z"
        },
        "message": "Merge pull request #79 from johanandren/wip-fix-amqp-groupid-johanandren\n\nFixed incorrect groupIds in the docs of amqp, file and mqtt",
        "tree": {
          "sha": "1b25820e5734c1062b50882fbe4f8a47c1cf6802",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/1b25820e5734c1062b50882fbe4f8a47c1cf6802"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/f4b872d3cd8fe97638c9c6a68080ff7768b10b18",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/f4b872d3cd8fe97638c9c6a68080ff7768b10b18",
      "html_url": "https://github.com/akka/alpakka/commit/f4b872d3cd8fe97638c9c6a68080ff7768b10b18",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/f4b872d3cd8fe97638c9c6a68080ff7768b10b18/comments",
      "author": {
        "login": "patriknw",
        "id": 336161,
        "avatar_url": "https://avatars.githubusercontent.com/u/336161?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/patriknw",
        "html_url": "https://github.com/patriknw",
        "followers_url": "https://api.github.com/users/patriknw/followers",
        "following_url": "https://api.github.com/users/patriknw/following{/other_user}",
        "gists_url": "https://api.github.com/users/patriknw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/patriknw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/patriknw/subscriptions",
        "organizations_url": "https://api.github.com/users/patriknw/orgs",
        "repos_url": "https://api.github.com/users/patriknw/repos",
        "events_url": "https://api.github.com/users/patriknw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/patriknw/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "bf3975569b0e4413915a842bd91dc5b7314527c5",
          "url": "https://api.github.com/repos/akka/alpakka/commits/bf3975569b0e4413915a842bd91dc5b7314527c5",
          "html_url": "https://github.com/akka/alpakka/commit/bf3975569b0e4413915a842bd91dc5b7314527c5"
        },
        {
          "sha": "61aeb1e06c095759447c2b20dfeb03cf76a3f9ca",
          "url": "https://api.github.com/repos/akka/alpakka/commits/61aeb1e06c095759447c2b20dfeb03cf76a3f9ca",
          "html_url": "https://github.com/akka/alpakka/commit/61aeb1e06c095759447c2b20dfeb03cf76a3f9ca"
        }
      ]
    },
    {
      "sha": "d325ba6166647675f111f81244d05285f6fd0494",
      "commit": {
        "author": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-23T09:13:27Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-23T09:13:27Z"
        },
        "message": "Merge pull request #24 from jypma/s3\n\nInitial import of https://github.com/bluelabsio/s3-stream",
        "tree": {
          "sha": "f34b82d90b9718e91845f44fe76da4d6d0fc0dfd",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/f34b82d90b9718e91845f44fe76da4d6d0fc0dfd"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/d325ba6166647675f111f81244d05285f6fd0494",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/d325ba6166647675f111f81244d05285f6fd0494",
      "html_url": "https://github.com/akka/alpakka/commit/d325ba6166647675f111f81244d05285f6fd0494",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/d325ba6166647675f111f81244d05285f6fd0494/comments",
      "author": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "f4b872d3cd8fe97638c9c6a68080ff7768b10b18",
          "url": "https://api.github.com/repos/akka/alpakka/commits/f4b872d3cd8fe97638c9c6a68080ff7768b10b18",
          "html_url": "https://github.com/akka/alpakka/commit/f4b872d3cd8fe97638c9c6a68080ff7768b10b18"
        },
        {
          "sha": "c9960883a0204e0c3813c613afa4e76a0be17136",
          "url": "https://api.github.com/repos/akka/alpakka/commits/c9960883a0204e0c3813c613afa4e76a0be17136",
          "html_url": "https://github.com/akka/alpakka/commit/c9960883a0204e0c3813c613afa4e76a0be17136"
        }
      ]
    },
    {
      "sha": "b9fa366de7c5ba1eae754adac8e9d336e403e516",
      "commit": {
        "author": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-21T14:27:02Z"
        },
        "committer": {
          "name": "Martynas Mickevičius",
          "email": "self@2m.lt",
          "date": "2016-11-24T09:53:30Z"
        },
        "message": "Update to stable sbt-dynver",
        "tree": {
          "sha": "f9d6c09c47390552b81dff5403e0ff79a35a55db",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/f9d6c09c47390552b81dff5403e0ff79a35a55db"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/b9fa366de7c5ba1eae754adac8e9d336e403e516",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/b9fa366de7c5ba1eae754adac8e9d336e403e516",
      "html_url": "https://github.com/akka/alpakka/commit/b9fa366de7c5ba1eae754adac8e9d336e403e516",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/b9fa366de7c5ba1eae754adac8e9d336e403e516/comments",
      "author": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "e0afa9f89f8744b24356e344059cdfed1c1a7fed",
          "url": "https://api.github.com/repos/akka/alpakka/commits/e0afa9f89f8744b24356e344059cdfed1c1a7fed",
          "html_url": "https://github.com/akka/alpakka/commit/e0afa9f89f8744b24356e344059cdfed1c1a7fed"
        }
      ]
    },
    {
      "sha": "d28f02890bf26db0cfb6abebf9dfb5431a51cdfc",
      "commit": {
        "author": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-24T09:58:42Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-24T09:58:42Z"
        },
        "message": "Merge pull request #76 from akka/wip-stable-dynver-2m\n\nUpdate to stable sbt-dynver",
        "tree": {
          "sha": "a0cd395f4efa9d965755c76a762cf8cf258830d7",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/a0cd395f4efa9d965755c76a762cf8cf258830d7"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/d28f02890bf26db0cfb6abebf9dfb5431a51cdfc",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/d28f02890bf26db0cfb6abebf9dfb5431a51cdfc",
      "html_url": "https://github.com/akka/alpakka/commit/d28f02890bf26db0cfb6abebf9dfb5431a51cdfc",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/d28f02890bf26db0cfb6abebf9dfb5431a51cdfc/comments",
      "author": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "d325ba6166647675f111f81244d05285f6fd0494",
          "url": "https://api.github.com/repos/akka/alpakka/commits/d325ba6166647675f111f81244d05285f6fd0494",
          "html_url": "https://github.com/akka/alpakka/commit/d325ba6166647675f111f81244d05285f6fd0494"
        },
        {
          "sha": "b9fa366de7c5ba1eae754adac8e9d336e403e516",
          "url": "https://api.github.com/repos/akka/alpakka/commits/b9fa366de7c5ba1eae754adac8e9d336e403e516",
          "html_url": "https://github.com/akka/alpakka/commit/b9fa366de7c5ba1eae754adac8e9d336e403e516"
        }
      ]
    },
    {
      "sha": "89b5e5d7e1cc40c4a9f84797b248983910cee53a",
      "commit": {
        "author": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-24T09:59:20Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-24T09:59:20Z"
        },
        "message": "Merge pull request #70 from akka/release-docs\n\nLink to release docs",
        "tree": {
          "sha": "8c0a37b487752bd9006b898d77821d201747d323",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/8c0a37b487752bd9006b898d77821d201747d323"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/89b5e5d7e1cc40c4a9f84797b248983910cee53a",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/89b5e5d7e1cc40c4a9f84797b248983910cee53a",
      "html_url": "https://github.com/akka/alpakka/commit/89b5e5d7e1cc40c4a9f84797b248983910cee53a",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/89b5e5d7e1cc40c4a9f84797b248983910cee53a/comments",
      "author": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "d28f02890bf26db0cfb6abebf9dfb5431a51cdfc",
          "url": "https://api.github.com/repos/akka/alpakka/commits/d28f02890bf26db0cfb6abebf9dfb5431a51cdfc",
          "html_url": "https://github.com/akka/alpakka/commit/d28f02890bf26db0cfb6abebf9dfb5431a51cdfc"
        },
        {
          "sha": "946a1823b74ee4e150f17f0dc93a439f60c05198",
          "url": "https://api.github.com/repos/akka/alpakka/commits/946a1823b74ee4e150f17f0dc93a439f60c05198",
          "html_url": "https://github.com/akka/alpakka/commit/946a1823b74ee4e150f17f0dc93a439f60c05198"
        }
      ]
    },
    {
      "sha": "7d2403acd66103232d63ba4c66f622b27c510dbd",
      "commit": {
        "author": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-25T13:57:33Z"
        },
        "committer": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-25T13:57:33Z"
        },
        "message": "Fix links to docs",
        "tree": {
          "sha": "3af03b4d8acef8d74ba6562a2a0a98a96917295d",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/3af03b4d8acef8d74ba6562a2a0a98a96917295d"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/7d2403acd66103232d63ba4c66f622b27c510dbd",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/7d2403acd66103232d63ba4c66f622b27c510dbd",
      "html_url": "https://github.com/akka/alpakka/commit/7d2403acd66103232d63ba4c66f622b27c510dbd",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/7d2403acd66103232d63ba4c66f622b27c510dbd/comments",
      "author": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "89b5e5d7e1cc40c4a9f84797b248983910cee53a",
          "url": "https://api.github.com/repos/akka/alpakka/commits/89b5e5d7e1cc40c4a9f84797b248983910cee53a",
          "html_url": "https://github.com/akka/alpakka/commit/89b5e5d7e1cc40c4a9f84797b248983910cee53a"
        }
      ]
    },
    {
      "sha": "0cd897232ea395c7927d1d654e45712f7fc533e1",
      "commit": {
        "author": {
          "name": "Martynas Mickevičius",
          "email": "self@2m.lt",
          "date": "2016-11-24T19:37:27Z"
        },
        "committer": {
          "name": "Martynas Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-25T14:02:49Z"
        },
        "message": "Fix Amqp pub-sub tests to not depend on broker timings",
        "tree": {
          "sha": "15c08d13979ab4acdc3719bd14663f0f27814251",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/15c08d13979ab4acdc3719bd14663f0f27814251"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/0cd897232ea395c7927d1d654e45712f7fc533e1",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/0cd897232ea395c7927d1d654e45712f7fc533e1",
      "html_url": "https://github.com/akka/alpakka/commit/0cd897232ea395c7927d1d654e45712f7fc533e1",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/0cd897232ea395c7927d1d654e45712f7fc533e1/comments",
      "author": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "89b5e5d7e1cc40c4a9f84797b248983910cee53a",
          "url": "https://api.github.com/repos/akka/alpakka/commits/89b5e5d7e1cc40c4a9f84797b248983910cee53a",
          "html_url": "https://github.com/akka/alpakka/commit/89b5e5d7e1cc40c4a9f84797b248983910cee53a"
        }
      ]
    },
    {
      "sha": "26d45aa57928e0fec0b12aafaf2d13501c7c3d17",
      "commit": {
        "author": {
          "name": "Martynas \"danger\" Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-25T14:16:25Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-25T14:16:25Z"
        },
        "message": "Merge pull request #83 from 2m/wip-fix-amqp-pub-sub-test\n\nFix Amqp pub-sub tests to not depend on broker timings",
        "tree": {
          "sha": "15c08d13979ab4acdc3719bd14663f0f27814251",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/15c08d13979ab4acdc3719bd14663f0f27814251"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/26d45aa57928e0fec0b12aafaf2d13501c7c3d17",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/26d45aa57928e0fec0b12aafaf2d13501c7c3d17",
      "html_url": "https://github.com/akka/alpakka/commit/26d45aa57928e0fec0b12aafaf2d13501c7c3d17",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/26d45aa57928e0fec0b12aafaf2d13501c7c3d17/comments",
      "author": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "89b5e5d7e1cc40c4a9f84797b248983910cee53a",
          "url": "https://api.github.com/repos/akka/alpakka/commits/89b5e5d7e1cc40c4a9f84797b248983910cee53a",
          "html_url": "https://github.com/akka/alpakka/commit/89b5e5d7e1cc40c4a9f84797b248983910cee53a"
        },
        {
          "sha": "0cd897232ea395c7927d1d654e45712f7fc533e1",
          "url": "https://api.github.com/repos/akka/alpakka/commits/0cd897232ea395c7927d1d654e45712f7fc533e1",
          "html_url": "https://github.com/akka/alpakka/commit/0cd897232ea395c7927d1d654e45712f7fc533e1"
        }
      ]
    },
    {
      "sha": "a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "commit": {
        "author": {
          "name": "Martynas \"danger\" Mickevičius",
          "email": "mmartynas@gmail.com",
          "date": "2016-11-28T08:47:48Z"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com",
          "date": "2016-11-28T08:47:48Z"
        },
        "message": "Merge pull request #85 from 2m/wip-fix-api-links\n\nFix links to docs",
        "tree": {
          "sha": "4b172d8385d2307271dd666fc50b545dee4eda4a",
          "url": "https://api.github.com/repos/akka/alpakka/git/trees/4b172d8385d2307271dd666fc50b545dee4eda4a"
        },
        "url": "https://api.github.com/repos/akka/alpakka/git/commits/a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
        "comment_count": 0
      },
      "url": "https://api.github.com/repos/akka/alpakka/commits/a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "html_url": "https://github.com/akka/alpakka/commit/a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "comments_url": "https://api.github.com/repos/akka/alpakka/commits/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/comments",
      "author": {
        "login": "2m",
        "id": 422086,
        "avatar_url": "https://avatars.githubusercontent.com/u/422086?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/2m",
        "html_url": "https://github.com/2m",
        "followers_url": "https://api.github.com/users/2m/followers",
        "following_url": "https://api.github.com/users/2m/following{/other_user}",
        "gists_url": "https://api.github.com/users/2m/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/2m/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/2m/subscriptions",
        "organizations_url": "https://api.github.com/users/2m/orgs",
        "repos_url": "https://api.github.com/users/2m/repos",
        "events_url": "https://api.github.com/users/2m/events{/privacy}",
        "received_events_url": "https://api.github.com/users/2m/received_events",
        "type": "User",
        "site_admin": false
      },
      "committer": {
        "login": "web-flow",
        "id": 19864447,
        "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/web-flow",
        "html_url": "https://github.com/web-flow",
        "followers_url": "https://api.github.com/users/web-flow/followers",
        "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
        "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
        "organizations_url": "https://api.github.com/users/web-flow/orgs",
        "repos_url": "https://api.github.com/users/web-flow/repos",
        "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
        "received_events_url": "https://api.github.com/users/web-flow/received_events",
        "type": "User",
        "site_admin": false
      },
      "parents": [
        {
          "sha": "26d45aa57928e0fec0b12aafaf2d13501c7c3d17",
          "url": "https://api.github.com/repos/akka/alpakka/commits/26d45aa57928e0fec0b12aafaf2d13501c7c3d17",
          "html_url": "https://github.com/akka/alpakka/commit/26d45aa57928e0fec0b12aafaf2d13501c7c3d17"
        },
        {
          "sha": "7d2403acd66103232d63ba4c66f622b27c510dbd",
          "url": "https://api.github.com/repos/akka/alpakka/commits/7d2403acd66103232d63ba4c66f622b27c510dbd",
          "html_url": "https://github.com/akka/alpakka/commit/7d2403acd66103232d63ba4c66f622b27c510dbd"
        }
      ]
    }
  ],
  "files": [
    {
      "sha": "4dc35ef63f21676c3161b5940c236cfaadfb38e3",
      "filename": ".scalafmt.conf",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/.scalafmt.conf",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/.scalafmt.conf",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/.scalafmt.conf?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,10 @@\n+style = defaultWithAlign\n+\n+align.tokens               = [off]\n+danglingParentheses        = true\n+docstrings                 = JavaDoc\n+indentOperator             = spray\n+maxColumn                  = 120\n+rewrite.rules              = [RedundantBraces, RedundantParens, SortImports]\n+spaces.inImportCurlyBraces = true\n+unindentTopLevelOperators  = true"
    },
    {
      "sha": "7c0c201815c72a0fe0c346d5d26a238dc9e5e930",
      "filename": ".travis.yml",
      "status": "modified",
      "additions": 13,
      "deletions": 8,
      "changes": 21,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/.travis.yml",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/.travis.yml",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/.travis.yml?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -4,6 +4,7 @@ sudo: required\n \n scala:\n   - \"2.11.8\"\n+  - \"2.12.0\"\n \n jdk:\n   - oraclejdk8\n@@ -12,17 +13,21 @@ before_cache:\n   - find $HOME/.ivy2 -name \"ivydata-*.properties\" -print -delete\n   - find $HOME/.sbt  -name \"*.lock\"               -print -delete\n \n+before_install:\n+  - docker pull cassandra:3\n+  - docker run -p 9042:9042 -d cassandra:3\n+  - docker pull rabbitmq:3\n+  - docker run -p 5672:5672 -d rabbitmq:3\n+\n cache:\n   directories:\n     - $HOME/.ivy2/cache\n     - $HOME/.sbt/boot\n \n services:\n-  - rabbitmq\n-  - cassandra\n+  - docker\n \n-script:\n-  - sbt -J-XX:ReservedCodeCacheSize=128m +test\n+sbt_args: -J-XX:ReservedCodeCacheSize=128m\n \n deploy:\n   provider: script\n@@ -39,7 +44,7 @@ env:\n     - secure: \"DLc1v2XMWrxtbPzVfoArkSQiwzT+O7/rwT7APqoA68K5A1pwxDw5BD3sOLpd6rKbPBulmwDAAQ1am3uE6lbmymCTMe8bvA3iHWy0Jg8baK4nC46EKFLabQz4Uaoq/bs92YGW1QH12rbBPyTA7uvPpvhmb8uyUbJqjT3uyROqHhHfhll89dsPVaK0NCY9DN2K356M87z7cp1SvtfAiF8qaNjNmlOfWjIEUSO1SiiqQBjT/GJvhrrW32J4htf5CqEEYBSoN+fqTCwwdo3GpOFFq+Zh5TSoyvKyi5xo+LVq0hW2SAYTHMMB5WhLd1cvQ0bvK6FpUhyfMcON/8ad3R7paNVxLpIGEu8hsUYGsENjdXaEK4g1TurDeVekWJRYyGMCmy2cCg5yHC+Pb56qOgpM7gmZACCitLap1jXUCWI27q+7cvxuxaBb6EPiDuWGNQXHH+OkbD/s4RJO3kQfv1Si64RON8+bZ+fqOWLK+BuakYi3YMukFgPngQozX3aMZOVcEBKJZtquwewCKsNV2VGItJxrp3MDol0HhuNvdUvIf5UydZZCyJTo1DBsK49yDUj7iKOEJk5Qc5oYfEhSEKcGRZs8Yl9n/kIJUh8ZYTT+35rwD27dHgsEkPkCEGpbMP/r0JewkWH7q9FfajPIYOlEpoP6tCsdP4mBOyF1uZH7omM=\"\n     # encrypt with: travis encrypt BINTRAY_PASS=...\n     - secure: \"gasjgT+qHUFPe/eMqvwD7WtzQmNw++LXmmQ6ic6VJOf/drAQckdeXIaa3rOsuoiI72xtngIUPil61+bviRf3Qgw061w65dSlrn4Pm1c4f4kOCRBQCpsg06PK2Xs40ZD/9l9e+3N0T6alwx//PFH+bUB5yEi7y/Qs1dOKtofvvtoTkGvF6GZDCMiKwpYmcEKmBbmEuyaFLd5h1N6oJ53g7dtyh1KD9gU4HXmc3QujrKSxm3YunMf68wgtTJWZf3b/OcyVTSz7/8mbvJ++GWCyVK5B8snAnKxwSNHhYysNdOoOTGhwF2dnE38Vr/NXldHnm+M2LzuBBADXLmxlW92bxv+IjuAT+HtBoPEP9I+f/eJqfirkrMRWiylWN7zcchMzHTHS54qx1JvtRyJYNFsOfzqLry/IUZoT/1tLe2vPCRE601K5pS2GEDAt/gj3BTCWpCvidgXXq4KPlj5IqeIJ5UVWSpjCCH0hZUwuUUwgSNTXFg7Ug+U4U5DjPmyla5oNj9d+RIGqWtsixB8QAs5dCgtBa0om/f8nT584iHjrpvduLpoUpUcMPyPgcJnlHNvKawnEW0JCcMxR4fJBsG3IG+6Q6Rbo17VIs/Z5hgcNQtJMVnjiIGfOFBQKYKrStAWlJWK9WTo5L5oO3sn+BZQUnuJxafoJsdArEogzfbRjovk=\"\n-    # encrypt with: travis encrypt SONA_USER=...\n-    - secure: \"uZZuo8SbxcHIURDJU/86EyKsiQKXQwCJm8nhBSu61xEMAY4l24qbceUAYySfgS6IFLmGtfEzycq2CpryRGz5P9aJZpS4rzW55nGvFpDLhft7j++usKPpWEA+5efl5cRX/smRhKmvaD8t0MjY///0wlwOhD4FJnLERPpWOSusttei50lRgk4hTGE4S+5A/M887v2036hA+AFPIolYxAr0Mo5haDKm1FTLOrp1IGGEa2Uo7GLVXAFDmcgqgpoISw3ubMi6lP/Kfuh/ktqDo0W8MsMOxuU7ebiubbjr2oGPNhDSKiASjs7U/s75CHXz0OcZOxnJhfDkFNhCvGdn2M2zngmxPgZ8/6Qg4ytN648hwJyQ0UX64FSsqtJdU4s5k3yKEoaPsgSOMRdZSftD3JCGQGBjqNkaQ10AWUq14xKqLevqOz8zr+JY2h3JNSXK/tqrRKtUr2pmRz/4gYyomddIOcGVxvfXfBteq1gobVkmAYGE8FnOazNTg4ncOFNFNvf6dQ91hjoWcDR9aG/NSgTQ6aWufTge+HAuvhz44kdSDVzHvPIQlxAYWBEaf1qLm2uDKp/HOU1rt/WmUCHd1BM5TKo4SgBCdL10o885tY39Xde1IPE1EmiPTgvUr9gwB/aDBv+bVWHjWZdfh7F7jEGWFB29i6b2L/xJlkZinSYJWB8=\"\n-    # encrypt with: travis encrypt SONA_PASS=...\n-    - secure: \"G4LapZYEj8iK5x0fI8TIZwSLFiuTeGNmsqM5LN92y/mSo8CjzlbudPiLLtVx7iH4CcF/8ItpviEXT21NzaBGx8lkzvPTm0wI55E2d+uiNnpq/PkOD3LAFVx9BoCBbeo3jHpXMIxUyLmBKUTDzcKoyPWeIRUXcJkWjP/B9so3DbCHW+vcQyQuRGRaG7qX3y7E1ktNKXvpy4Q9BDgzaQN7Nt9aSAnbai+Cb8ByixyT+O5+Y8iL6QP84nSCs6k5ZTlaSxaA5LR8aJszYZTE7Y1Qth09B+JuzZSaQeSU/wTexPtXBnmlogbMwXkZqNvA9FlXJrg5Zs7lpbKKi3Qdqod96uRgi/RNajcIVxn/Vy6JJWZDXlOKmH+pAUTXTvgNzpZzueOP9aPVvs1EHG/0SoBsR+sgnKKZcH/89pmkPfBFPpN4UUmYtooynENeP2GJy8+WoyW8DYCDz61UKFpN+j1DgilEM8vOuKTc3xI/x62jKZwPP+SuUQj5bHkjFh+TeklgExLbJFOnowZw6CFx+pE7UMhmAk8W4tfUo8AsSnTsilrODpcFLcwBQdZO9vUa2qVl0ItJ3GDKv/0rru5KjghDUIA2PhkmZ3kdkyVx+GSXNj/Xmzkm4hbdpZZQhVKuyjlNMuPA6vwU3yTuVhFjz64a1kQXX81uUSCUPrXb6yecumI=\"\n+    # encrypt with: travis encrypt SONATYPE_USER=...\n+    - secure: \"qRXS//WtSBOSiEpQ2VXB9m9C8jaj3NmAm8hkF9ufvB5KEiKteHK8Zll2+XQWdLgb2At1T7LR/hXe6Hv1lXuUXIMOzfkanUI+bn5PkqQNiBqYzJBUrNzraSi5ZiMlYKc/lEjMyXzb0lLJGVhJn3nQHbauhQ3RIpAbMb3qnSzJDV6jMWnWwmn3GjHF9cUPbw3Gtu73IgEI3aFofOfd3WKE0crOK+N+OWLgxEJx9Ole0I3CXdbRLGGiMNHjQ7zm0Rf4zD7Pa4qpMQzF5DO43OxN20WtT82uYD8/uWZz3QTasG3Qbx2pShPB2rZbi85HQBijW0GAQS3etMV6xggZckzmbmtufZ3D8k6CuLS0jp5WBxWwhuFmEu1FAydMNuGlXBkTODqKcwzyXwa5iYzq/lPeOh9W1F+3Jr5D5x0PHYk6MLS/KQ8nSe0Wmge2Iro1JTcVwxktXW3NQDxC58nh64pUVC7XcS+0eX6LgnBjmNdJ9D65tKx0qy4tfOEtAgulybYmQefB+91ct6YVB9fIIbQdtEk6L8XTw58cliI+2mj2d6/Nr6v8uWpGWjzsgrdtXs+qsYsIMrYs6xSAZcBL1oLjY11/1E3IdJOdcK6eUkw2ms3rwK67El5oQjfq5AlAc9Y+n0Rdx3ABeXs2TYUfiF/075cmfbF/KZxzSliMQmeD/iQ=\"\n+    # encrypt with: travis encrypt SONATYPE_PASS=...\n+    - secure: \"GqxKeUiBHtALLyu1Q46OfgnkMHg9BiixsJ3dQwr5e0p/QH/J/aGv7BdIa/sT5zCzcY5tgRXuGhO2BCY5T9yapZnvcaC8P5d+Kxmud8/KE9TZ2u6qpFK5tvWr9elP7wqPNU76eo+4EACv6zzwvMJ78nXtwrSzyXxrYIJmIL4QS8CnxnWL7InhsPqF7dVWYsvHXjE6cm4gvaqPvO78x0bOEXLMBtQXr6PMiXL58IQvm9mwqHd4VsTfCQ42kx3Kt3eXbtBH+7162FTqOxUt5S9wHLa1kryA1TZDznwwss5WnHnz7uogb/rIvYkvIRRj42lLTGsrQuN2YFLf0+GnL1reHnaraOjBWTN75C1HUhZoVZFcRjXPewYGMoJjZezli/uUOJGGzYeyWRsX4ebpKLEPb6FA9LabP4EXxAEcEJDG/InzMbdbI8UG9GKqeXlnrFUq3OG4Hn6qQXqcr93W6QNV9NADH665a7GjCbmOVnYUaShVegwcjodzstVeYCXb7V6que1opt4jKsapur+MAokNBtayKQISSBs+ymCysVHlWxGvNhYR44ddiCsTVvLl8JhDqN6OEWaKpaXsBEiQorBTtrkexkM8HuLJ40KuZPUvQSuVR9I/nUlzRCxjnxoUI+9B2FfasyEvT9Ci/MCj/OAF/tDVZ3qylscjlijhrFo/7uU=\""
    },
    {
      "sha": "fe319461adadb5bb2d849c2fcae2c916cdd5192c",
      "filename": "CONTRIBUTING.md",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/CONTRIBUTING.md",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/CONTRIBUTING.md",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/CONTRIBUTING.md?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -86,4 +86,4 @@ Example:\n \n 1. Create a [new release](https://github.com/akka/alpakka/releases/new) with the next tag version (e.g. `v0.3`), title and release decsription including notable changes mentioning external contributors.\n 2. Travis CI will start a [CI build](https://travis-ci.org/akka/alpakka/builds) for the new tag and publish artifacts to Bintray and will sync them to Maven Central.\n-3. Checkout the newly created tag and run `sbt \"deployRsync repo.akka.io\"` to deploy API and reference documentation.\n+3. Update the configuration of [Lightbend Tech Hub](https://github.com/typesafehub/tech-hub/blob/master/docsites.sbt#L70) to include the latest version."
    },
    {
      "sha": "1da12481583468dacbfd72970432f09af4a63464",
      "filename": "README.md",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/README.md",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/README.md",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/README.md?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -5,6 +5,16 @@ Alpakka: Akka Streams Connectors\n \n This project provides a home to Akka Streams connectors to various technologies, protocols or libraries.\n \n+Documentation\n+-------------\n+\n+See [reference](http://developer.lightbend.com/docs/alpakka/0.1/) and [API](http://developer.lightbend.com/docs/api/alpakka/0.1/akka/stream/alpakka/index.html) documentation pages.\n+\n+Contributions\n+-------------\n+\n+Contributions are welcome, see [CONTRIBUTING.md](https://github.com/akka/alpakka/blob/master/CONTRIBUTING.md)\n+\n Caveat Emptor\n -------------\n "
    },
    {
      "sha": "163cb77eb994bc67e0c90e5f4448668f72484f7d",
      "filename": "amqp/src/main/scala/akka/stream/alpakka/amqp/AmqpSinkStage.scala",
      "status": "modified",
      "additions": 38,
      "deletions": 33,
      "changes": 71,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/main/scala/akka/stream/alpakka/amqp/AmqpSinkStage.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/main/scala/akka/stream/alpakka/amqp/AmqpSinkStage.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/amqp/src/main/scala/akka/stream/alpakka/amqp/AmqpSinkStage.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -9,22 +9,27 @@ import akka.util.ByteString\n import com.rabbitmq.client.AMQP.BasicProperties\n import com.rabbitmq.client._\n \n-final case class OutgoingMessage(bytes: ByteString, immediate: Boolean, mandatory: Boolean, props: Option[BasicProperties])\n+final case class OutgoingMessage(bytes: ByteString,\n+                                 immediate: Boolean,\n+                                 mandatory: Boolean,\n+                                 props: Option[BasicProperties])\n \n object AmqpSinkStage {\n \n   /**\n    * Internal API\n    */\n-  private val defaultAttributes = Attributes.name(\"AmsqpSink\")\n-    .and(ActorAttributes.dispatcher(\"akka.stream.default-blocking-io-dispatcher\"))\n+  private val defaultAttributes =\n+    Attributes.name(\"AmsqpSink\").and(ActorAttributes.dispatcher(\"akka.stream.default-blocking-io-dispatcher\"))\n }\n \n /**\n  * Connects to an AMQP server upon materialization and sends incoming messages to the server.\n  * Each materialized sink will create one connection to the broker.\n  */\n-final class AmqpSinkStage(settings: AmqpSinkSettings) extends GraphStage[SinkShape[OutgoingMessage]] with AmqpConnector { stage =>\n+final class AmqpSinkStage(settings: AmqpSinkSettings)\n+    extends GraphStage[SinkShape[OutgoingMessage]]\n+    with AmqpConnector { stage =>\n   import AmqpSinkStage._\n \n   val in = Inlet[OutgoingMessage](\"AmqpSink.in\")\n@@ -33,41 +38,41 @@ final class AmqpSinkStage(settings: AmqpSinkSettings) extends GraphStage[SinkSha\n \n   override protected def initialAttributes: Attributes = defaultAttributes\n \n-  override def createLogic(inheritedAttributes: Attributes): GraphStageLogic = new GraphStageLogic(shape) with AmqpConnectorLogic {\n-    override val settings = stage.settings\n-    private val exchange = settings.exchange.getOrElse(\"\")\n-    private val routingKey = settings.routingKey.getOrElse(\"\")\n+  override def createLogic(inheritedAttributes: Attributes): GraphStageLogic =\n+    new GraphStageLogic(shape) with AmqpConnectorLogic {\n+      override val settings = stage.settings\n+      private val exchange = settings.exchange.getOrElse(\"\")\n+      private val routingKey = settings.routingKey.getOrElse(\"\")\n \n-    override def connectionFactoryFrom(settings: AmqpConnectionSettings) = stage.connectionFactoryFrom(settings)\n+      override def connectionFactoryFrom(settings: AmqpConnectionSettings) = stage.connectionFactoryFrom(settings)\n \n-    override def whenConnected(): Unit = {\n-      val shutdownCallback = getAsyncCallback[ShutdownSignalException] { ex =>\n-        failStage(ex)\n-      }\n-      channel.addShutdownListener(new ShutdownListener {\n-        override def shutdownCompleted(cause: ShutdownSignalException): Unit = {\n-          shutdownCallback.invoke(cause)\n+      override def whenConnected(): Unit = {\n+        val shutdownCallback = getAsyncCallback[ShutdownSignalException] { ex =>\n+          failStage(ex)\n         }\n-      })\n-      pull(in)\n-    }\n-\n-    setHandler(in, new InHandler {\n-      override def onPush(): Unit = {\n-        val elem = grab(in)\n-        channel.basicPublish(\n-          exchange,\n-          routingKey,\n-          elem.mandatory,\n-          elem.immediate,\n-          elem.props.orNull,\n-          elem.bytes.toArray\n-        )\n+        channel.addShutdownListener(new ShutdownListener {\n+          override def shutdownCompleted(cause: ShutdownSignalException): Unit =\n+            shutdownCallback.invoke(cause)\n+        })\n         pull(in)\n       }\n-    })\n \n-  }\n+      setHandler(in, new InHandler {\n+        override def onPush(): Unit = {\n+          val elem = grab(in)\n+          channel.basicPublish(\n+            exchange,\n+            routingKey,\n+            elem.mandatory,\n+            elem.immediate,\n+            elem.props.orNull,\n+            elem.bytes.toArray\n+          )\n+          pull(in)\n+        }\n+      })\n+\n+    }\n \n   override def toString: String = \"AmqpSink\"\n }"
    },
    {
      "sha": "d19ccdc2a70844d33b3c83cd5abbe6c963988b42",
      "filename": "amqp/src/main/scala/akka/stream/alpakka/amqp/AmqpSourceStage.scala",
      "status": "modified",
      "additions": 78,
      "deletions": 78,
      "changes": 156,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/main/scala/akka/stream/alpakka/amqp/AmqpSourceStage.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/main/scala/akka/stream/alpakka/amqp/AmqpSourceStage.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/amqp/src/main/scala/akka/stream/alpakka/amqp/AmqpSourceStage.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -26,108 +26,108 @@ object AmqpSourceStage {\n  *\n  * @param bufferSize The max number of elements to prefetch and buffer at any given time.\n  */\n-final class AmqpSourceStage(settings: AmqpSourceSettings, bufferSize: Int) extends GraphStage[SourceShape[IncomingMessage]] with AmqpConnector { stage =>\n+final class AmqpSourceStage(settings: AmqpSourceSettings, bufferSize: Int)\n+    extends GraphStage[SourceShape[IncomingMessage]]\n+    with AmqpConnector { stage =>\n \n   val out = Outlet[IncomingMessage](\"AmqpSource.out\")\n \n   override val shape: SourceShape[IncomingMessage] = SourceShape.of(out)\n \n   override protected def initialAttributes: Attributes = AmqpSourceStage.defaultAttributes\n \n-  override def createLogic(inheritedAttributes: Attributes): GraphStageLogic = new GraphStageLogic(shape) with AmqpConnectorLogic {\n+  override def createLogic(inheritedAttributes: Attributes): GraphStageLogic =\n+    new GraphStageLogic(shape) with AmqpConnectorLogic {\n \n-    override val settings = stage.settings\n-    override def connectionFactoryFrom(settings: AmqpConnectionSettings) = stage.connectionFactoryFrom(settings)\n+      override val settings = stage.settings\n+      override def connectionFactoryFrom(settings: AmqpConnectionSettings) = stage.connectionFactoryFrom(settings)\n \n-    private val queue = mutable.Queue[IncomingMessage]()\n+      private val queue = mutable.Queue[IncomingMessage]()\n \n-    override def whenConnected(): Unit = {\n-      import scala.collection.JavaConverters._\n-      // we have only one consumer per connection so global is ok\n-      channel.basicQos(bufferSize, true)\n-      val consumerCallback = getAsyncCallback(handleDelivery)\n-      val shutdownCallback = getAsyncCallback[Option[ShutdownSignalException]] {\n-        case Some(ex) => failStage(ex)\n-        case None     => completeStage()\n-      }\n-\n-      val amqpSourceConsumer = new DefaultConsumer(channel) {\n-        override def handleDelivery(consumerTag: String, envelope: Envelope, properties: BasicProperties, body: Array[Byte]): Unit = {\n-          consumerCallback.invoke(IncomingMessage(ByteString(body), envelope, properties))\n+      override def whenConnected(): Unit = {\n+        import scala.collection.JavaConverters._\n+        // we have only one consumer per connection so global is ok\n+        channel.basicQos(bufferSize, true)\n+        val consumerCallback = getAsyncCallback(handleDelivery)\n+        val shutdownCallback = getAsyncCallback[Option[ShutdownSignalException]] {\n+          case Some(ex) => failStage(ex)\n+          case None => completeStage()\n         }\n \n-        override def handleCancel(consumerTag: String): Unit = {\n-          // non consumer initiated cancel, for example happens when the queue has been deleted.\n-          shutdownCallback.invoke(None)\n-        }\n+        val amqpSourceConsumer = new DefaultConsumer(channel) {\n+          override def handleDelivery(consumerTag: String,\n+                                      envelope: Envelope,\n+                                      properties: BasicProperties,\n+                                      body: Array[Byte]): Unit =\n+            consumerCallback.invoke(IncomingMessage(ByteString(body), envelope, properties))\n \n-        override def handleShutdownSignal(consumerTag: String, sig: ShutdownSignalException): Unit = {\n-          // \"Called when either the channel or the underlying connection has been shut down.\"\n-          shutdownCallback.invoke(Option(sig))\n+          override def handleCancel(consumerTag: String): Unit =\n+            // non consumer initiated cancel, for example happens when the queue has been deleted.\n+            shutdownCallback.invoke(None)\n+\n+          override def handleShutdownSignal(consumerTag: String, sig: ShutdownSignalException): Unit =\n+            // \"Called when either the channel or the underlying connection has been shut down.\"\n+            shutdownCallback.invoke(Option(sig))\n         }\n-      }\n \n-      def setupNamedQueue(settings: NamedQueueSourceSettings): Unit = {\n-        channel.basicConsume(\n-          settings.queue,\n-          false, // never auto-ack\n-          settings.consumerTag, // consumer tag\n-          settings.noLocal,\n-          settings.exclusive,\n-          settings.arguments.asJava,\n-          amqpSourceConsumer\n-        )\n-      }\n+        def setupNamedQueue(settings: NamedQueueSourceSettings): Unit =\n+          channel.basicConsume(\n+            settings.queue,\n+            false, // never auto-ack\n+            settings.consumerTag, // consumer tag\n+            settings.noLocal,\n+            settings.exclusive,\n+            settings.arguments.asJava,\n+            amqpSourceConsumer\n+          )\n+\n+        def setupTemporaryQueue(settings: TemporaryQueueSourceSettings): Unit = {\n+          // this is a weird case that required dynamic declaration, the queue name is not known\n+          // up front, it is only useful for sources, so that's why it's not placed in the AmqpConnectorLogic\n+          val queueName = channel.queueDeclare().getQueue\n+          channel.queueBind(queueName, settings.exchange, settings.routingKey.getOrElse(\"\"))\n+          channel.basicConsume(\n+            queueName,\n+            amqpSourceConsumer\n+          )\n+        }\n \n-      def setupTemporaryQueue(settings: TemporaryQueueSourceSettings): Unit = {\n-        // this is a weird case that required dynamic declaration, the queue name is not known\n-        // up front, it is only useful for sources, so that's why it's not placed in the AmqpConnectorLogic\n-        val queueName = channel.queueDeclare().getQueue\n-        channel.queueBind(queueName, settings.exchange, settings.routingKey.getOrElse(\"\"))\n-        channel.basicConsume(\n-          queueName,\n-          amqpSourceConsumer\n-        )\n-      }\n+        settings match {\n+          case settings: NamedQueueSourceSettings => setupNamedQueue(settings)\n+          case settings: TemporaryQueueSourceSettings => setupTemporaryQueue(settings)\n+        }\n \n-      settings match {\n-        case settings: NamedQueueSourceSettings     => setupNamedQueue(settings)\n-        case settings: TemporaryQueueSourceSettings => setupTemporaryQueue(settings)\n       }\n \n-    }\n-\n-    def handleDelivery(message: IncomingMessage): Unit = {\n-      if (isAvailable(out)) {\n-        pushAndAckMessage(message)\n-      } else {\n-        if (queue.size + 1 > bufferSize) {\n-          failStage(new RuntimeException(s\"Reached maximum buffer size $bufferSize\"))\n+      def handleDelivery(message: IncomingMessage): Unit =\n+        if (isAvailable(out)) {\n+          pushAndAckMessage(message)\n         } else {\n-          queue.enqueue(message)\n+          if (queue.size + 1 > bufferSize) {\n+            failStage(new RuntimeException(s\"Reached maximum buffer size $bufferSize\"))\n+          } else {\n+            queue.enqueue(message)\n+          }\n         }\n-      }\n-    }\n \n-    setHandler(out, new OutHandler {\n-      override def onPull(): Unit = {\n-        if (queue.nonEmpty) {\n-          pushAndAckMessage(queue.dequeue())\n-        }\n+      setHandler(out, new OutHandler {\n+        override def onPull(): Unit =\n+          if (queue.nonEmpty) {\n+            pushAndAckMessage(queue.dequeue())\n+          }\n+\n+      })\n+\n+      def pushAndAckMessage(message: IncomingMessage): Unit = {\n+        push(out, message)\n+        // ack it as soon as we have passed it downstream\n+        // TODO ack less often and do batch acks with multiple = true would probably be more performant\n+        channel.basicAck(\n+          message.envelope.getDeliveryTag,\n+          false // just this single message\n+        )\n       }\n \n-    })\n-\n-    def pushAndAckMessage(message: IncomingMessage): Unit = {\n-      push(out, message)\n-      // ack it as soon as we have passed it downstream\n-      // TODO ack less often and do batch acks with multiple = true would probably be more performant\n-      channel.basicAck(\n-        message.envelope.getDeliveryTag,\n-        false // just this single message\n-      )\n     }\n \n-  }\n-\n }"
    },
    {
      "sha": "0fa84ad69cec7ed3ce11022cd5f5da2005612414",
      "filename": "amqp/src/main/scala/akka/stream/alpakka/amqp/javadsl/AmqpSink.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/main/scala/akka/stream/alpakka/amqp/javadsl/AmqpSink.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/main/scala/akka/stream/alpakka/amqp/javadsl/AmqpSink.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/amqp/src/main/scala/akka/stream/alpakka/amqp/javadsl/AmqpSink.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -9,6 +9,7 @@ import akka.stream.javadsl.Sink\n import akka.util.ByteString\n \n object AmqpSink {\n+\n   /**\n    * Java API: Creates an [[AmqpSink]] that accepts [[OutgoingMessage]] elements.\n    */"
    },
    {
      "sha": "682f7b617a903dbef753c50a4a05b3b2c2b36c40",
      "filename": "amqp/src/main/scala/akka/stream/alpakka/amqp/javadsl/AmqpSource.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/main/scala/akka/stream/alpakka/amqp/javadsl/AmqpSource.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/main/scala/akka/stream/alpakka/amqp/javadsl/AmqpSource.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/amqp/src/main/scala/akka/stream/alpakka/amqp/javadsl/AmqpSource.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -4,10 +4,11 @@\n package akka.stream.alpakka.amqp.javadsl\n \n import akka.NotUsed\n-import akka.stream.alpakka.amqp.{ AmqpSourceStage, AmqpSourceSettings, IncomingMessage }\n+import akka.stream.alpakka.amqp.{ AmqpSourceSettings, AmqpSourceStage, IncomingMessage }\n import akka.stream.javadsl.Source\n \n object AmqpSource {\n+\n   /**\n    * Java API: Creates an [[AmqpSource]] with given settings and buffer size.\n    */"
    },
    {
      "sha": "ed70262f319f0e0d02c68739f30add3e17d24602",
      "filename": "amqp/src/main/scala/akka/stream/alpakka/amqp/model.scala",
      "status": "modified",
      "additions": 45,
      "deletions": 37,
      "changes": 82,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/main/scala/akka/stream/alpakka/amqp/model.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/main/scala/akka/stream/alpakka/amqp/model.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/amqp/src/main/scala/akka/stream/alpakka/amqp/model.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -16,13 +16,13 @@ sealed trait AmqpConnectorSettings {\n sealed trait AmqpSourceSettings extends AmqpConnectorSettings\n \n final case class NamedQueueSourceSettings(\n-  connectionSettings: AmqpConnectionSettings,\n-  queue:              String,\n-  declarations:       Seq[Declaration]       = Seq.empty,\n-  noLocal:            Boolean                = false,\n-  exclusive:          Boolean                = false,\n-  consumerTag:        String                 = \"default\",\n-  arguments:          Map[String, AnyRef]    = Map.empty\n+    connectionSettings: AmqpConnectionSettings,\n+    queue: String,\n+    declarations: Seq[Declaration] = Seq.empty,\n+    noLocal: Boolean = false,\n+    exclusive: Boolean = false,\n+    consumerTag: String = \"default\",\n+    arguments: Map[String, AnyRef] = Map.empty\n ) extends AmqpSourceSettings {\n   @annotation.varargs\n   def withDeclarations(declarations: Declaration*) = copy(declarations = declarations.toList)\n@@ -42,6 +42,7 @@ final case class NamedQueueSourceSettings(\n }\n \n object NamedQueueSourceSettings {\n+\n   /**\n    * Java API\n    */\n@@ -50,10 +51,10 @@ object NamedQueueSourceSettings {\n }\n \n final case class TemporaryQueueSourceSettings(\n-  connectionSettings: AmqpConnectionSettings,\n-  exchange:           String,\n-  declarations:       Seq[Declaration]       = Seq.empty,\n-  routingKey:         Option[String]         = None\n+    connectionSettings: AmqpConnectionSettings,\n+    exchange: String,\n+    declarations: Seq[Declaration] = Seq.empty,\n+    routingKey: Option[String] = None\n ) extends AmqpSourceSettings {\n   def withRoutingKey(routingKey: String) = copy(routingKey = Some(routingKey))\n \n@@ -62,6 +63,7 @@ final case class TemporaryQueueSourceSettings(\n }\n \n object TemporaryQueueSourceSettings {\n+\n   /**\n    * Java API\n    */\n@@ -70,10 +72,10 @@ object TemporaryQueueSourceSettings {\n }\n \n final case class AmqpSinkSettings(\n-  connectionSettings: AmqpConnectionSettings,\n-  exchange:           Option[String]         = None,\n-  routingKey:         Option[String]         = None,\n-  declarations:       Seq[Declaration]       = Seq.empty\n+    connectionSettings: AmqpConnectionSettings,\n+    exchange: Option[String] = None,\n+    routingKey: Option[String] = None,\n+    declarations: Seq[Declaration] = Seq.empty\n ) extends AmqpConnectorSettings {\n   def withExchange(exchange: String) = copy(exchange = Some(exchange))\n \n@@ -84,6 +86,7 @@ final case class AmqpSinkSettings(\n }\n \n object AmqpSinkSettings {\n+\n   /**\n    * Java API\n    */\n@@ -100,6 +103,7 @@ sealed trait AmqpConnectionSettings\n  * Connects to a local AMQP broker at the default port with no password.\n  */\n case object DefaultAmqpConnection extends AmqpConnectionSettings {\n+\n   /**\n    * Java API\n    */\n@@ -109,22 +113,22 @@ case object DefaultAmqpConnection extends AmqpConnectionSettings {\n final case class AmqpConnectionUri(uri: String) extends AmqpConnectionSettings\n \n object AmqpConnectionUri {\n+\n   /**\n    * Java API:\n    */\n   def create(uri: String) = AmqpConnectionUri(uri)\n }\n \n final case class AmqpConnectionDetails(\n-  host:        String,\n-  port:        Int,\n-  credentials: Option[AmqpCredentials] = None,\n-  virtualHost: Option[String]          = None\n-) extends AmqpConnectionSettings {\n-\n-}\n+    host: String,\n+    port: Int,\n+    credentials: Option[AmqpCredentials] = None,\n+    virtualHost: Option[String] = None\n+) extends AmqpConnectionSettings {}\n \n object AmqpConnectionDetails {\n+\n   /**\n    * Java API:\n    */\n@@ -137,6 +141,7 @@ final case class AmqpCredentials(username: String, password: String) {\n }\n \n object AmqpCredentials {\n+\n   /**\n    * Java API\n    */\n@@ -147,11 +152,11 @@ object AmqpCredentials {\n sealed trait Declaration\n \n final case class QueueDeclaration(\n-  name:       String,\n-  durable:    Boolean             = false,\n-  exclusive:  Boolean             = false,\n-  autoDelete: Boolean             = false,\n-  arguments:  Map[String, AnyRef] = Map.empty\n+    name: String,\n+    durable: Boolean = false,\n+    exclusive: Boolean = false,\n+    autoDelete: Boolean = false,\n+    arguments: Map[String, AnyRef] = Map.empty\n ) extends Declaration {\n   def withDurable(durable: Boolean) = copy(durable = durable)\n \n@@ -168,17 +173,18 @@ final case class QueueDeclaration(\n }\n \n object QueueDeclaration {\n+\n   /**\n    * Java API\n    */\n   def create(name: String) = QueueDeclaration(name)\n }\n \n final case class BindingDeclaration(\n-  queue:      String,\n-  exchange:   String,\n-  routingKey: Option[String]      = None,\n-  arguments:  Map[String, AnyRef] = Map.empty\n+    queue: String,\n+    exchange: String,\n+    routingKey: Option[String] = None,\n+    arguments: Map[String, AnyRef] = Map.empty\n ) extends Declaration {\n   def withRoutingKey(routingKey: String) = copy(routingKey = Some(routingKey))\n \n@@ -191,19 +197,20 @@ final case class BindingDeclaration(\n }\n \n object BindingDeclaration {\n+\n   /**\n    * Java API\n    */\n   def create(queue: String, exchange: String) = BindingDeclaration(queue, exchange)\n }\n \n final case class ExchangeDeclaration(\n-  name:         String,\n-  exchangeType: String,\n-  durable:      Boolean             = false,\n-  autoDelete:   Boolean             = false,\n-  internal:     Boolean             = false,\n-  arguments:    Map[String, AnyRef] = Map.empty\n+    name: String,\n+    exchangeType: String,\n+    durable: Boolean = false,\n+    autoDelete: Boolean = false,\n+    internal: Boolean = false,\n+    arguments: Map[String, AnyRef] = Map.empty\n ) extends Declaration {\n   def withDurable(durable: Boolean) = copy(durable = durable)\n \n@@ -220,6 +227,7 @@ final case class ExchangeDeclaration(\n }\n \n object ExchangeDeclaration {\n+\n   /**\n    * Java API\n    */"
    },
    {
      "sha": "8641588386d806ed79779204f82be0427fc4f9ec",
      "filename": "amqp/src/main/scala/akka/stream/alpakka/amqp/scaladsl/AmqpSink.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/main/scala/akka/stream/alpakka/amqp/scaladsl/AmqpSink.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/main/scala/akka/stream/alpakka/amqp/scaladsl/AmqpSink.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/amqp/src/main/scala/akka/stream/alpakka/amqp/scaladsl/AmqpSink.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -4,11 +4,12 @@\n package akka.stream.alpakka.amqp.scaladsl\n \n import akka.NotUsed\n-import akka.stream.alpakka.amqp.{ AmqpSinkStage, AmqpSinkSettings, OutgoingMessage }\n+import akka.stream.alpakka.amqp.{ AmqpSinkSettings, AmqpSinkStage, OutgoingMessage }\n import akka.stream.scaladsl.Sink\n import akka.util.ByteString\n \n object AmqpSink {\n+\n   /**\n    * Scala API: Creates an [[AmqpSink]] that accepts ByteString elements.\n    */"
    },
    {
      "sha": "80a8d0147cc0a4f4b575ca855861bf9b34c2b570",
      "filename": "amqp/src/test/java/akka/stream/alpakka/amqp/javadsl/AmqpConnectorsTest.java",
      "status": "modified",
      "additions": 19,
      "deletions": 24,
      "changes": 43,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/test/java/akka/stream/alpakka/amqp/javadsl/AmqpConnectorsTest.java",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/test/java/akka/stream/alpakka/amqp/javadsl/AmqpConnectorsTest.java",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/amqp/src/test/java/akka/stream/alpakka/amqp/javadsl/AmqpConnectorsTest.java?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -18,6 +18,7 @@\n import akka.stream.javadsl.*;\n import akka.testkit.JavaTestKit;\n import akka.util.ByteString;\n+import scala.concurrent.duration.Duration;\n \n import java.util.*;\n import java.util.concurrent.*;\n@@ -28,8 +29,8 @@\n  */\n public class AmqpConnectorsTest {\n \n-  static ActorSystem system;\n-  static Materializer materializer;\n+  private static ActorSystem system;\n+  private static Materializer materializer;\n \n   @BeforeClass\n   public static void setup() {\n@@ -70,7 +71,7 @@ public void publishAndConsume() throws Exception {\n \n     //#run-sink\n     final List<String> input = Arrays.asList(\"one\", \"two\", \"three\", \"four\", \"five\");\n-    Source.from(input).map(s -> ByteString.fromString(s)).runWith(amqpSink, materializer);\n+    Source.from(input).map(ByteString::fromString).runWith(amqpSink, materializer);\n     //#run-sink\n \n     //#run-source\n@@ -96,8 +97,6 @@ public void publishFanoutAndConsume() throws Exception {\n     );\n     //#create-exchange-sink\n \n-    final List<String> input = Arrays.asList(\"one\", \"two\", \"three\", \"four\", \"five\");\n-\n     //#create-exchange-source\n     final Integer fanoutSize = 4;\n     final Integer bufferSize = 1;\n@@ -118,28 +117,24 @@ public void publishFanoutAndConsume() throws Exception {\n     }\n     //#create-exchange-source\n \n-    final CompletableFuture<Done> materialized = new CompletableFuture<>();\n-    final CompletionStage<List<Pair<Integer, String>>> result =  mergedSources\n-      .take(input.size() * fanoutSize)\n-      .mapMaterializedValue(matVal -> {\n-        materialized.complete(Done.getInstance());\n-        return matVal;\n-      })\n-      .runWith(Sink.seq(), materializer);\n-\n-     // There is a race here if we don`t make sure the sources has declared their subscription queues and bindings\n-     // before we start writing to the exchange\n-     materialized.get(3, TimeUnit.SECONDS);\n-     Thread.sleep(200);\n+    final CompletableFuture<Done> completion = new CompletableFuture<>();\n+    mergedSources\n+      .runWith(Sink.fold(new HashSet<Integer>(), (seen, branchElem) -> {\n+        if (seen.size() == fanoutSize) {\n+          completion.complete(Done.getInstance());\n+        }\n+        seen.add(branchElem.first());\n+        return seen;\n+      }), materializer);\n \n-     Source.from(input).map(s -> ByteString.fromString(s)).runWith(amqpSink, materializer);\n+    system.scheduler().scheduleOnce(\n+      Duration.create(5, TimeUnit.SECONDS),\n+      () -> completion.completeExceptionally(new Error(\"Did not get at least one element from every fanout branch\")),\n+      system.dispatcher());\n \n-     final Set<Pair<Integer, String>> expectedResult = input\n-       .stream()\n-       .flatMap(str -> IntStream.range(0, fanoutSize).boxed().map(i -> Pair.create(i, str)))\n-       .collect(Collectors.toSet());\n+     Source.repeat(\"stuff\").map(ByteString::fromString).runWith(amqpSink, materializer);\n \n-     assertEquals(expectedResult, result.toCompletableFuture().get(10, TimeUnit.SECONDS).stream().collect(Collectors.toSet()));\n+     assertEquals(Done.getInstance(), completion.get(10, TimeUnit.SECONDS));\n   }\n \n }"
    },
    {
      "sha": "ee17f517f6f2fae4b5295c9bbee90e3c2a287180",
      "filename": "amqp/src/test/scala/akka/stream/alpakka/amqp/AmqpSpec.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/test/scala/akka/stream/alpakka/amqp/AmqpSpec.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/test/scala/akka/stream/alpakka/amqp/AmqpSpec.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/amqp/src/test/scala/akka/stream/alpakka/amqp/AmqpSpec.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -13,7 +13,6 @@ abstract class AmqpSpec extends WordSpec with Matchers with BeforeAndAfterAll wi\n   implicit val system = ActorSystem(this.getClass.getSimpleName)\n   implicit val materializer = ActorMaterializer()\n \n-  override protected def afterAll(): Unit = {\n+  override protected def afterAll(): Unit =\n     system.terminate()\n-  }\n }"
    },
    {
      "sha": "e69426124c82180df5176906b096576b637715e8",
      "filename": "amqp/src/test/scala/akka/stream/alpakka/amqp/scaladsl/AmqpConnectorsSpec.scala",
      "status": "modified",
      "additions": 34,
      "deletions": 53,
      "changes": 87,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/test/scala/akka/stream/alpakka/amqp/scaladsl/AmqpConnectorsSpec.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/amqp/src/test/scala/akka/stream/alpakka/amqp/scaladsl/AmqpConnectorsSpec.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/amqp/src/test/scala/akka/stream/alpakka/amqp/scaladsl/AmqpConnectorsSpec.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -30,16 +30,13 @@ class AmqpConnectorsSpec extends AmqpSpec {\n \n       //#create-sink\n       val amqpSink = AmqpSink.simple(\n-        AmqpSinkSettings(DefaultAmqpConnection)\n-          .withRoutingKey(queueName)\n-          .withDeclarations(queueDeclaration)\n+        AmqpSinkSettings(DefaultAmqpConnection).withRoutingKey(queueName).withDeclarations(queueDeclaration)\n       )\n       //#create-sink\n \n       //#create-source\n       val amqpSource = AmqpSource(\n-        NamedQueueSourceSettings(DefaultAmqpConnection, queueName)\n-          .withDeclarations(queueDeclaration),\n+        NamedQueueSourceSettings(DefaultAmqpConnection, queueName).withDeclarations(queueDeclaration),\n         bufferSize = 10\n       )\n       //#create-source\n@@ -60,9 +57,7 @@ class AmqpConnectorsSpec extends AmqpSpec {\n       val queueName = \"amqp-conn-it-spec-work-queues-\" + System.currentTimeMillis()\n       val queueDeclaration = QueueDeclaration(queueName)\n       val amqpSink = AmqpSink.simple(\n-        AmqpSinkSettings(DefaultAmqpConnection)\n-          .withRoutingKey(queueName)\n-          .withDeclarations(queueDeclaration)\n+        AmqpSinkSettings(DefaultAmqpConnection).withRoutingKey(queueName).withDeclarations(queueDeclaration)\n       )\n \n       val input = Vector(\"one\", \"two\", \"three\", \"four\", \"five\")\n@@ -73,11 +68,11 @@ class AmqpConnectorsSpec extends AmqpSpec {\n         val count = 3\n         val merge = b.add(Merge[IncomingMessage](count))\n         for (n <- 0 until count) {\n-          val source = b.add(AmqpSource(\n-            NamedQueueSourceSettings(DefaultAmqpConnection, queueName)\n-              .withDeclarations(queueDeclaration),\n-            bufferSize = 1\n-          ))\n+          val source = b.add(\n+            AmqpSource(\n+              NamedQueueSourceSettings(DefaultAmqpConnection, queueName).withDeclarations(queueDeclaration),\n+              bufferSize = 1\n+            ))\n           source.out ~> merge.in(n)\n         }\n \n@@ -93,15 +88,12 @@ class AmqpConnectorsSpec extends AmqpSpec {\n       val queueName = \"amqp-conn-it-spec-simple-queue-2-\" + System.currentTimeMillis()\n       val queueDeclaration = QueueDeclaration(queueName)\n       val amqpSource = AmqpSource(\n-        NamedQueueSourceSettings(DefaultAmqpConnection, queueName)\n-          .withDeclarations(queueDeclaration),\n+        NamedQueueSourceSettings(DefaultAmqpConnection, queueName).withDeclarations(queueDeclaration),\n         bufferSize = 2\n       )\n \n       val amqpSink = AmqpSink.simple(\n-        AmqpSinkSettings(DefaultAmqpConnection)\n-          .withRoutingKey(queueName)\n-          .withDeclarations(queueDeclaration)\n+        AmqpSinkSettings(DefaultAmqpConnection).withRoutingKey(queueName).withDeclarations(queueDeclaration)\n       )\n \n       val publisher = TestPublisher.probe[ByteString]()\n@@ -139,22 +131,18 @@ class AmqpConnectorsSpec extends AmqpSpec {\n \n       subscriber.cancel()\n       publisher.sendComplete()\n-\n     }\n \n     \"not ack messages unless they get consumed\" in {\n       val queueName = \"amqp-conn-it-spec-simple-queue-2-\" + System.currentTimeMillis()\n       val queueDeclaration = QueueDeclaration(queueName)\n       val amqpSource = AmqpSource(\n-        NamedQueueSourceSettings(DefaultAmqpConnection, queueName)\n-          .withDeclarations(queueDeclaration),\n+        NamedQueueSourceSettings(DefaultAmqpConnection, queueName).withDeclarations(queueDeclaration),\n         bufferSize = 10\n       )\n \n       val amqpSink = AmqpSink.simple(\n-        AmqpSinkSettings(DefaultAmqpConnection)\n-          .withRoutingKey(queueName)\n-          .withDeclarations(queueDeclaration)\n+        AmqpSinkSettings(DefaultAmqpConnection).withRoutingKey(queueName).withDeclarations(queueDeclaration)\n       )\n \n       val publisher = TestPublisher.probe[ByteString]()\n@@ -200,7 +188,6 @@ class AmqpConnectorsSpec extends AmqpSpec {\n       subscriber2.expectNext().bytes.utf8String shouldEqual \"five\"\n \n       subscriber2.cancel()\n-\n     }\n \n     \"pub-sub from one source with multiple sinks\" in {\n@@ -215,47 +202,41 @@ class AmqpConnectorsSpec extends AmqpSpec {\n \n       //#create-exchange-sink\n       val amqpSink = AmqpSink.simple(\n-        AmqpSinkSettings(DefaultAmqpConnection)\n-          .withExchange(exchangeName)\n-          .withDeclarations(exchangeDeclaration)\n+        AmqpSinkSettings(DefaultAmqpConnection).withExchange(exchangeName).withDeclarations(exchangeDeclaration)\n       )\n       //#create-exchange-sink\n \n-      val input = Vector(\"one\", \"two\", \"three\", \"four\", \"five\")\n-\n       //#create-exchange-source\n       val fanoutSize = 4\n \n       val mergedSources = (0 until fanoutSize).foldLeft(Source.empty[(Int, String)]) {\n-        case (source, fanoutBranch) => source.merge(\n-          AmqpSource(\n-            TemporaryQueueSourceSettings(\n-              DefaultAmqpConnection,\n-              exchangeName\n-            ).withDeclarations(exchangeDeclaration),\n-            bufferSize = 1\n-          ).map(msg => (fanoutBranch, msg.bytes.utf8String))\n-        )\n+        case (source, fanoutBranch) =>\n+          source.merge(\n+            AmqpSource(\n+              TemporaryQueueSourceSettings(\n+                DefaultAmqpConnection,\n+                exchangeName\n+              ).withDeclarations(exchangeDeclaration),\n+              bufferSize = 1\n+            ).map(msg => (fanoutBranch, msg.bytes.utf8String))\n+          )\n       }\n       //#create-exchange-source\n \n-      val materialized = Promise[Done]()\n-      val futureResult = mergedSources\n-        .take(input.size * fanoutSize)\n-        .mapMaterializedValue { n =>\n-          materialized.success(Done)\n-          n\n-        }.runWith(Sink.seq)\n+      val completion = Promise[Done]\n+      mergedSources.runWith(Sink.fold(Set.empty[Int]) {\n+        case (seen, (branch, element)) =>\n+          if (seen.size == fanoutSize) completion.trySuccess(Done)\n+          seen + branch\n+      })\n \n-      // There is a race here if we don`t make sure the sources has declared their subscription queues and bindings\n-      // before we start writing to the exchange\n-      materialized.future.futureValue\n-      Thread.sleep(200)\n+      import system.dispatcher\n+      system.scheduler.scheduleOnce(5.seconds)(\n+        completion.tryFailure(new Error(\"Did not get at least one element from every fanout branch\")))\n \n-      Source(input).map(s => ByteString(s)).runWith(amqpSink)\n+      Source.repeat(\"stuff\").map(s => ByteString(s)).runWith(amqpSink)\n \n-      val expectedOutput = input.flatMap(string => (0 until fanoutSize).map(n => (n, string))).toSet\n-      futureResult.futureValue.toSet shouldEqual expectedOutput\n+      completion.future.futureValue shouldBe Done\n     }\n   }\n }"
    },
    {
      "sha": "64d280e5e4b9414dd2a210bd7d8b0e19c13c5d3e",
      "filename": "build.sbt",
      "status": "modified",
      "additions": 14,
      "deletions": 17,
      "changes": 31,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/build.sbt",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/build.sbt",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/build.sbt?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -1,30 +1,23 @@\n lazy val alpakka = project\n   .in(file(\".\"))\n-  .enablePlugins(NoPublish, DeployRsync)\n-  .disablePlugins(BintrayPlugin)\n-  .aggregate(amqp, cassandra, docs, files, mqtt)\n-  .settings(\n-    unidocSettings,\n-    deployRsyncArtifact := (sbtunidoc.Plugin.UnidocKeys.unidoc in Compile).value.head -> s\"www/api/alpakka/${version.value}\"\n-  )\n+  .enablePlugins(PublishUnidoc)\n+  .aggregate(amqp, cassandra, docs, files, mqtt, s3)\n \n lazy val amqp = project\n-  .in(file(\"amqp\"))\n   .enablePlugins(AutomateHeaderPlugin)\n   .settings(\n     name := \"akka-stream-alpakka-amqp\",\n     Dependencies.Amqp\n   )\n \n lazy val cassandra = project\n-  .in(file(\"cassandra\"))\n   .enablePlugins(AutomateHeaderPlugin)\n   .settings(\n     name := \"akka-stream-alpakka-cassandra\",\n     Dependencies.Cassandra\n   )\n \n-lazy val files = project\n+lazy val files = project // The name file is taken by `sbt.file`!\n   .in(file(\"file\"))\n   .enablePlugins(AutomateHeaderPlugin)\n   .settings(\n@@ -33,8 +26,7 @@ lazy val files = project\n   )\n \n lazy val mqtt = project\n-  .in(file(\"mqtt\"))\n-  .enablePlugins()\n+  .enablePlugins(AutomateHeaderPlugin)\n   .settings(\n     name := \"akka-stream-alpakka-mqtt\",\n     Dependencies.Mqtt,\n@@ -44,9 +36,15 @@ lazy val mqtt = project\n     parallelExecution in Test := false\n   )\n \n+lazy val s3 = project\n+  .enablePlugins(AutomateHeaderPlugin)\n+  .settings(\n+    name := \"akka-stream-alpakka-s3\",\n+    Dependencies.S3\n+  )\n+\n lazy val docs = project\n-  .in(file(\"docs\"))\n-  .enablePlugins(ParadoxPlugin, NoPublish, DeployRsync)\n+  .enablePlugins(ParadoxPlugin, NoPublish)\n   .disablePlugins(BintrayPlugin)\n   .settings(\n     name := \"Alpakka\",\n@@ -58,7 +56,6 @@ lazy val docs = project\n       \"extref.java-api.base_url\" -> \"https://docs.oracle.com/javase/8/docs/api/index.html?%s.html\",\n       \"extref.paho-api.base_url\" -> \"https://www.eclipse.org/paho/files/javadoc/index.html?%s.html\",\n       \"scaladoc.akka.base_url\" -> s\"http://doc.akka.io/api/akka/${Dependencies.AkkaVersion}\",\n-      \"scaladoc.akka.stream.alpakka.base_url\" -> s\"http://doc.akka.io/api/alpakka/${version.value}\"\n-    ),\n-    deployRsyncArtifact := (paradox in Compile).value -> s\"www/docs/alpakka/${version.value}\"\n+      \"scaladoc.akka.stream.alpakka.base_url\" -> s\"http://developer.lightbend.com/docs/api/alpakka/${version.value}\"\n+    )\n   )"
    },
    {
      "sha": "737c1c53ae75fdff9341bf075ff6004a2ebbdab4",
      "filename": "cassandra/src/main/scala/akka/stream/alpakka/cassandra/CassandraSourceStage.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/cassandra/src/main/scala/akka/stream/alpakka/cassandra/CassandraSourceStage.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/cassandra/src/main/scala/akka/stream/alpakka/cassandra/CassandraSourceStage.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/cassandra/src/main/scala/akka/stream/alpakka/cassandra/CassandraSourceStage.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -35,7 +35,7 @@ class CassandraSourceStage(futStmt: Future[Statement], session: Session) extends\n \n           maybeRs match {\n             case Some(rs) if rs.getAvailableWithoutFetching > 0 => push(out, rs.one())\n-            case Some(rs) if rs.isExhausted                     => completeStage()\n+            case Some(rs) if rs.isExhausted => completeStage()\n             case Some(rs) =>\n               // fetch next page\n               val futRs = guavaFutToScalaFut(rs.fetchMoreResults())\n@@ -70,4 +70,3 @@ class CassandraSourceStage(futStmt: Future[Statement], session: Session) extends\n     p.future\n   }\n }\n-"
    },
    {
      "sha": "17533479bfc64211a83068c74b6fa92d9ef3bb61",
      "filename": "cassandra/src/main/scala/akka/stream/alpakka/cassandra/javadsl/CassandraSource.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/cassandra/src/main/scala/akka/stream/alpakka/cassandra/javadsl/CassandraSource.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/cassandra/src/main/scala/akka/stream/alpakka/cassandra/javadsl/CassandraSource.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/cassandra/src/main/scala/akka/stream/alpakka/cassandra/javadsl/CassandraSource.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -24,8 +24,8 @@ object CassandraSource {\n    * Java API: creates a [[CassandraSource]] from the result of a given CompletableFuture.\n    */\n   def createFromFuture(\n-    futStmt: CompletableFuture[Statement],\n-    session: Session\n+      futStmt: CompletableFuture[Statement],\n+      session: Session\n   ): Source[Row, NotUsed] = {\n     import scala.compat.java8.FutureConverters._\n     akka.stream.javadsl.Source.fromGraph(new CassandraSourceStage(futStmt.toScala, session))"
    },
    {
      "sha": "7a59f6d704afbeac95a30df2da399a41d4e919d0",
      "filename": "cassandra/src/main/scala/akka/stream/alpakka/cassandra/scaladsl/CassandraSource.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/cassandra/src/main/scala/akka/stream/alpakka/cassandra/scaladsl/CassandraSource.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/cassandra/src/main/scala/akka/stream/alpakka/cassandra/scaladsl/CassandraSource.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/cassandra/src/main/scala/akka/stream/alpakka/cassandra/scaladsl/CassandraSource.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -11,6 +11,7 @@ import com.datastax.driver.core.{ Row, Session, Statement }\n import scala.concurrent.Future\n \n object CassandraSource {\n+\n   /**\n    * Scala API: creates a [[CassandraSourceStage]] from a given statement.\n    */"
    },
    {
      "sha": "c3543f431073f3d63ebdcd25f1fa00a6a6d35d8b",
      "filename": "cassandra/src/test/scala/akka/stream/alpakka/cassandra/scaladsl/CassandraSourceSpec.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 16,
      "changes": 28,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/cassandra/src/test/scala/akka/stream/alpakka/cassandra/scaladsl/CassandraSourceSpec.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/cassandra/src/test/scala/akka/stream/alpakka/cassandra/scaladsl/CassandraSourceSpec.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/cassandra/src/test/scala/akka/stream/alpakka/cassandra/scaladsl/CassandraSourceSpec.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -16,17 +16,20 @@ import scala.concurrent.duration._\n /**\n  * All the tests must be run with a local Cassandra running on default port 9042.\n  */\n-class CassandraSourceSpec extends WordSpec with ScalaFutures with BeforeAndAfterEach with BeforeAndAfterAll with MustMatchers {\n+class CassandraSourceSpec\n+    extends WordSpec\n+    with ScalaFutures\n+    with BeforeAndAfterEach\n+    with BeforeAndAfterAll\n+    with MustMatchers {\n \n   //#init-mat\n   implicit val system = ActorSystem()\n   implicit val mat = ActorMaterializer()\n   //#init-mat\n \n   //#init-session\n-  implicit val session = Cluster.builder\n-    .addContactPoint(\"127.0.0.1\").withPort(9042)\n-    .build.connect()\n+  implicit val session = Cluster.builder.addContactPoint(\"127.0.0.1\").withPort(9042).build.connect()\n   //#init-session\n \n   implicit val defaultPatience =\n@@ -55,26 +58,22 @@ class CassandraSourceSpec extends WordSpec with ScalaFutures with BeforeAndAfter\n     session.execute(\"DROP KEYSPACE IF EXISTS akka_stream_scala_test;\")\n   }\n \n-  override def afterAll(): Unit = {\n+  override def afterAll(): Unit =\n     Await.result(system.terminate(), 5.seconds)\n-  }\n \n-  def populate() = {\n+  def populate() =\n     (1 until 103).map { i =>\n       session.execute(s\"INSERT INTO akka_stream_scala_test.test(id) VALUES ($i)\")\n       i\n     }\n-  }\n \n   \"CassandraSourceSpec\" must {\n \n     \"stream the result of a Cassandra statement with one page\" in {\n       val data = populate()\n       val stmt = new SimpleStatement(\"SELECT * FROM akka_stream_scala_test.test\").setFetchSize(200)\n \n-      val rows = CassandraSource(stmt)\n-        .runWith(Sink.seq)\n-        .futureValue\n+      val rows = CassandraSource(stmt).runWith(Sink.seq).futureValue\n \n       rows.map(_.getInt(\"id\")) must contain theSameElementsAs data\n     }\n@@ -87,8 +86,7 @@ class CassandraSourceSpec extends WordSpec with ScalaFutures with BeforeAndAfter\n       //#statement\n \n       //#run-source\n-      val rows = CassandraSource(stmt)\n-        .runWith(Sink.seq)\n+      val rows = CassandraSource(stmt).runWith(Sink.seq)\n       //#run-source\n \n       rows.futureValue.map(_.getInt(\"id\")) must contain theSameElementsAs data\n@@ -107,9 +105,7 @@ class CassandraSourceSpec extends WordSpec with ScalaFutures with BeforeAndAfter\n     \"stream the result of Cassandra statement that results in no data\" in {\n       val stmt = new SimpleStatement(\"SELECT * FROM akka_stream_scala_test.test\")\n \n-      val rows = CassandraSource(stmt)\n-        .runWith(Sink.seq)\n-        .futureValue\n+      val rows = CassandraSource(stmt).runWith(Sink.seq).futureValue\n \n       rows mustBe empty\n     }"
    },
    {
      "sha": "a85d4d71e6957e73a7a6b81f7f9289f8bb290dad",
      "filename": "docker-compose.yml",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/docker-compose.yml",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/docker-compose.yml",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/docker-compose.yml?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,14 @@\n+# For detailed information about docker-compose visit https://docs.docker.com/compose/\n+# To start all docker containers required to execute the tests locally run:\n+# docker-compose up\n+\n+version: '2'\n+services:\n+  cassandra:\n+    image: cassandra:3\n+    ports:\n+      - \"9042:9042\"\n+  rabbitmq:\n+    image: rabbitmq:3\n+    ports:\n+      - \"5672:5672\""
    },
    {
      "sha": "8479f2e18fd24f8a9deb2b03bce9a47c1a6c021a",
      "filename": "docs/src/main/paradox/amqp.md",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/docs/src/main/paradox/amqp.md",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/docs/src/main/paradox/amqp.md",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/docs/src/main/paradox/amqp.md?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -7,15 +7,15 @@ The AMQP connector provides Akka Stream sources and sinks to connect to AMQP ser\n sbt\n :   @@@vars\n     ```scala\n-    libraryDependencies += \"com.typesafe.akka\" %% \"akka-stream-alpakka-amqp\" % \"$version$\"\n+    libraryDependencies += \"com.lightbend.akka\" %% \"akka-stream-alpakka-amqp\" % \"$version$\"\n     ```\n     @@@\n \n Maven\n :   @@@vars\n     ```xml\n     <dependency>\n-      <groupId>com.typesafe.akka</groupId>\n+      <groupId>com.lightbend.akka</groupId>\n       <artifactId>akka-stream-alpakka-amqp_$scala.binaryVersion$</artifactId>\n       <version>$version$</version>\n     </dependency>\n@@ -26,7 +26,7 @@ Gradle\n :   @@@vars\n     ```gradle\n     dependencies {\n-      compile group: \"com.typesafe.akka\", name: \"akka-stream-alpakka-amqp_$scala.binaryVersion$\", version: \"$version$\"\n+      compile group: \"com.lightbend.akka\", name: \"akka-stream-alpakka-amqp_$scala.binaryVersion$\", version: \"$version$\"\n     }\n     ```\n     @@@"
    },
    {
      "sha": "24c946c05096b146fe9574904443d6722d12bd6b",
      "filename": "docs/src/main/paradox/cassandra.md",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/docs/src/main/paradox/cassandra.md",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/docs/src/main/paradox/cassandra.md",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/docs/src/main/paradox/cassandra.md?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -7,15 +7,15 @@ The Cassandra connector provides a way to provide the result of a Cassandra quer\n sbt\n :   @@@vars\n     ```scala\n-    libraryDependencies += \"com.typesafe.akka\" %% \"akka-stream-alpakka-cassandra\" % \"$version$\"\n+    libraryDependencies += \"com.lightbend.akka\" %% \"akka-stream-alpakka-cassandra\" % \"$version$\"\n     ```\n     @@@\n \n Maven\n :   @@@vars\n     ```xml\n     <dependency>\n-      <groupId>com.typesafe.akka</groupId>\n+      <groupId>com.lightbend.akka</groupId>\n       <artifactId>akka-stream-alpakka-cassandra_$scala.binaryVersion$</artifactId>\n       <version>$version$</version>\n     </dependency>\n@@ -26,7 +26,7 @@ Gradle\n :   @@@vars\n     ```gradle\n     dependencies {\n-      compile group: \"com.typesafe.akka\", name: \"akka-stream-alpakka-cassandra_$scala.binaryVersion$\", version: \"$version$\"\n+      compile group: \"com.lightbend.akka\", name: \"akka-stream-alpakka-cassandra_$scala.binaryVersion$\", version: \"$version$\"\n     }\n     ```\n     @@@"
    },
    {
      "sha": "1501be81111fc0eaf42f10db0e49891ebe4959f8",
      "filename": "docs/src/main/paradox/external-connectors.md",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/docs/src/main/paradox/external-connectors.md",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/docs/src/main/paradox/external-connectors.md",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/docs/src/main/paradox/external-connectors.md?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -29,4 +29,16 @@ TODO: Add links to more connectors. [Contributions](https://github.com/akka/alpa\n \n ## Azure\n \n-[Streaming IoT messages using Azure IoT Hub](https://github.com/Azure/toketi-iothubreact)\n\\ No newline at end of file\n+[Streaming IoT messages using Azure IoT Hub](https://github.com/Azure/toketi-iothubreact)\n+\n+## Eventuate\n+\n+[Akka Streams adapter for Eventuate](http://rbmhtechnology.github.io/eventuate/adapters/stream.html)\n+\n+## FS2\n+\n+[An Akka Streams - Functional Streams for Scala (FS2) interface](https://github.com/krasserm/streamz#combinators-for-akka-stream)\n+\n+## MongoDB\n+\n+[ReactiveMongo](http://reactivemongo.org/releases/0.12/documentation/release-details.html#akka-stream)"
    },
    {
      "sha": "11162ae31e9f0be629d6b537d8e2fd0d097cbd12",
      "filename": "docs/src/main/paradox/file.md",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/docs/src/main/paradox/file.md",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/docs/src/main/paradox/file.md",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/docs/src/main/paradox/file.md?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -9,15 +9,15 @@ the sources and sinks for files already included in core Akka Streams\n sbt\n :   @@@vars\n     ```scala\n-    libraryDependencies += \"com.typesafe.akka\" %% \"akka-stream-alpakka-file\" % \"$version$\"\n+    libraryDependencies += \"com.lightbend.akka\" %% \"akka-stream-alpakka-file\" % \"$version$\"\n     ```\n     @@@\n \n Maven\n :   @@@vars\n     ```xml\n     <dependency>\n-      <groupId>com.typesafe.akka</groupId>\n+      <groupId>com.lightbend.akka</groupId>\n       <artifactId>akka-stream-alpakka-file_$scala.binaryVersion$</artifactId>\n       <version>$version$</version>\n     </dependency>\n@@ -28,7 +28,7 @@ Gradle\n :   @@@vars\n     ```gradle\n     dependencies {\n-      compile group: \"com.typesafe.akka\", name: \"akka-stream-alpakka-file_$scala.binaryVersion$\", version: \"$version$\"\n+      compile group: \"com.lightbend.akka\", name: \"akka-stream-alpakka-file_$scala.binaryVersion$\", version: \"$version$\"\n     }\n     ```\n     @@@"
    },
    {
      "sha": "2d9f592000b1b9715e3bd6ba7538966f1d956036",
      "filename": "docs/src/main/paradox/mqtt.md",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/docs/src/main/paradox/mqtt.md",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/docs/src/main/paradox/mqtt.md",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/docs/src/main/paradox/mqtt.md?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -7,15 +7,15 @@ The MQTT connector provides Akka Stream sources to connect to AMQP servers.\n sbt\n :   @@@vars\n     ```scala\n-    libraryDependencies += \"com.typesafe.akka\" %% \"akka-stream-alpakka-mqtt\" % \"$version$\"\n+    libraryDependencies += \"com.lightbend.akka\" %% \"akka-stream-alpakka-mqtt\" % \"$version$\"\n     ```\n     @@@\n \n Maven\n :   @@@vars\n     ```xml\n     <dependency>\n-      <groupId>com.typesafe.akka</groupId>\n+      <groupId>com.lightbend.akka</groupId>\n       <artifactId>akka-stream-alpakka-mqtt_$scala.binaryVersion$</artifactId>\n       <version>$version$</version>\n     </dependency>\n@@ -26,7 +26,7 @@ Gradle\n :   @@@vars\n     ```gradle\n     dependencies {\n-      compile group: \"com.typesafe.akka\", name: \"akka-stream-alpakka-mqtt_$scala.binaryVersion$\", version: \"$version$\"\n+      compile group: \"com.lightbend.akka\", name: \"akka-stream-alpakka-mqtt_$scala.binaryVersion$\", version: \"$version$\"\n     }\n     ```\n     @@@"
    },
    {
      "sha": "3c175695e841c31fe779795d92ef8b37e12513e9",
      "filename": "docs/src/main/paradox/patterns.md",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/docs/src/main/paradox/patterns.md",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/docs/src/main/paradox/patterns.md",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/docs/src/main/paradox/patterns.md?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -1,4 +1,4 @@\n-# Integaration Patterns\n+# Integration Patterns\n \n Many [Enterprise Integration Patterns](http://www.eaipatterns.com/toc.html) can be implemented with Akka Streams \n (see [Java documentation](http://doc.akka.io/docs/akka/2.4/java/stream/index.html) or [Scala documentation](http://doc.akka.io/docs/akka/2.4/scala/stream/index.html))."
    },
    {
      "sha": "949758faebf14e9e8800d6b8b162d0bcc178812c",
      "filename": "file/src/main/scala/akka/stream/alpakka/file/scaladsl/DirectoryChangesSource.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/file/src/main/scala/akka/stream/alpakka/file/scaladsl/DirectoryChangesSource.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/file/src/main/scala/akka/stream/alpakka/file/scaladsl/DirectoryChangesSource.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/file/src/main/scala/akka/stream/alpakka/file/scaladsl/DirectoryChangesSource.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -27,7 +27,9 @@ object DirectoryChangesSource {\n    *                      the JDK implementation is slow, it will not help lowering this\n    * @param maxBufferSize Maximum number of buffered directory changes before the stage fails\n    */\n-  def apply(directoryPath: Path, pollInterval: FiniteDuration, maxBufferSize: Int): Source[(Path, DirectoryChange), NotUsed] =\n+  def apply(directoryPath: Path,\n+            pollInterval: FiniteDuration,\n+            maxBufferSize: Int): Source[(Path, DirectoryChange), NotUsed] =\n     Source.fromGraph(new DirectoryChangesSource(directoryPath, pollInterval, maxBufferSize, tupler))\n \n }"
    },
    {
      "sha": "cf62aa6a2a81f5a3fa41c623892e225683f7085f",
      "filename": "file/src/main/scala/akka/stream/alpakka/file/scaladsl/FileTailSource.scala",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/file/src/main/scala/akka/stream/alpakka/file/scaladsl/FileTailSource.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/file/src/main/scala/akka/stream/alpakka/file/scaladsl/FileTailSource.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/file/src/main/scala/akka/stream/alpakka/file/scaladsl/FileTailSource.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -18,6 +18,7 @@ import scala.concurrent.duration.FiniteDuration\n  * Factory methods for the `FileTailSource`\n  */\n object FileTailSource {\n+\n   /**\n    * Scala API: Read the entire contents of a file, and then when the end is reached, keep reading\n    * newly appended data. Like the unix command `tail -f`.\n@@ -29,7 +30,10 @@ object FileTailSource {\n    * @param startingPosition Offset into the file to start reading\n    * @param pollingInterval  When the end has been reached, look for new content with this interval\n    */\n-  def apply(path: Path, maxChunkSize: Int, startingPosition: Long, pollingInterval: FiniteDuration): Source[ByteString, NotUsed] =\n+  def apply(path: Path,\n+            maxChunkSize: Int,\n+            startingPosition: Long,\n+            pollingInterval: FiniteDuration): Source[ByteString, NotUsed] =\n     Source.fromGraph(new FileTailSource(path, maxChunkSize, startingPosition, pollingInterval))\n \n   /**\n@@ -46,7 +50,11 @@ object FileTailSource {\n    * @param lf              The character or characters used as line separator, default is fetched from OS\n    * @param charset         The charset of the file, defaults to UTF-8\n    */\n-  def lines(path: Path, maxLineSize: Int, pollingInterval: FiniteDuration, lf: String = System.getProperty(\"line.separator\"), charset: Charset = StandardCharsets.UTF_8): Source[String, NotUsed] =\n+  def lines(path: Path,\n+            maxLineSize: Int,\n+            pollingInterval: FiniteDuration,\n+            lf: String = System.getProperty(\"line.separator\"),\n+            charset: Charset = StandardCharsets.UTF_8): Source[String, NotUsed] =\n     apply(path, maxLineSize, 0, pollingInterval)\n       .via(akka.stream.scaladsl.Framing.delimiter(ByteString.fromString(lf, charset.name), maxLineSize, false))\n       .map(_.decodeString(charset))"
    },
    {
      "sha": "6b6e32bf559e7ea7f4c0c4df60913282703305a5",
      "filename": "file/src/test/scala/akka/stream/alpakka/file/scaladsl/FileTailSourceSpec.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/file/src/test/scala/akka/stream/alpakka/file/scaladsl/FileTailSourceSpec.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/file/src/test/scala/akka/stream/alpakka/file/scaladsl/FileTailSourceSpec.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/file/src/test/scala/akka/stream/alpakka/file/scaladsl/FileTailSourceSpec.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -26,7 +26,9 @@ object FileTailSourceSpec extends {\n     // #simple-lines\n     val fs = FileSystems.getDefault\n     val lines: Source[String, NotUsed] = scaladsl.FileTailSource.lines(\n-      path = fs.getPath(path), maxLineSize = 8192, pollingInterval = 250.millis\n+      path = fs.getPath(path),\n+      maxLineSize = 8192,\n+      pollingInterval = 250.millis\n     )\n \n     lines.runForeach(line => System.out.println(line))"
    },
    {
      "sha": "c5ea28eb14d30d15f3d49292d13ef858e131646e",
      "filename": "mqtt/src/main/scala/akka/stream/alpakka/mqtt/Mqtt.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 8,
      "changes": 20,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/mqtt/src/main/scala/akka/stream/alpakka/mqtt/Mqtt.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/mqtt/src/main/scala/akka/stream/alpakka/mqtt/Mqtt.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/mqtt/src/main/scala/akka/stream/alpakka/mqtt/Mqtt.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -51,15 +51,17 @@ object MqttQoS {\n  * @param subscriptions the mapping between a topic name and a [[MqttQoS]].\n  */\n final case class MqttSourceSettings(\n-  connectionSettings: MqttConnectionSettings,\n-  subscriptions:      Map[String, MqttQoS]   = Map.empty\n+    connectionSettings: MqttConnectionSettings,\n+    subscriptions: Map[String, MqttQoS] = Map.empty\n ) {\n   @annotation.varargs\n-  def withSubscriptions(subscription: akka.japi.Pair[String, MqttQoS], subscriptions: akka.japi.Pair[String, MqttQoS]*) =\n+  def withSubscriptions(subscription: akka.japi.Pair[String, MqttQoS],\n+                        subscriptions: akka.japi.Pair[String, MqttQoS]*) =\n     copy(subscriptions = (subscription +: subscriptions).map(_.toScala).toMap)\n }\n \n object MqttSourceSettings {\n+\n   /**\n    * Java API: create [[MqttSourceSettings]].\n    */\n@@ -68,16 +70,17 @@ object MqttSourceSettings {\n }\n \n final case class MqttConnectionSettings(\n-  broker:      String,\n-  clientId:    String,\n-  persistence: MqttClientPersistence,\n-  auth:        Option[(String, String)] = None\n+    broker: String,\n+    clientId: String,\n+    persistence: MqttClientPersistence,\n+    auth: Option[(String, String)] = None\n ) {\n   def withAuth(username: String, password: String) =\n     copy(auth = Some((username, password)))\n }\n \n object MqttConnectionSettings {\n+\n   /**\n    * Java API: create [[MqttConnectionSettings]] with no auth information.\n    */\n@@ -88,6 +91,7 @@ object MqttConnectionSettings {\n final case class MqttMessage(topic: String, payload: ByteString)\n \n object MqttMessage {\n+\n   /**\n    * Java API: create  [[MqttMessage]]\n    */\n@@ -147,7 +151,7 @@ private[mqtt] trait MqttConnectorLogic { this: GraphStageLogic =>\n   }\n \n   private val connectHandler: IMqttAsyncClient => Try[IMqttToken] => Unit = client => {\n-    case Success(_)  => onConnect.invoke(client)\n+    case Success(_) => onConnect.invoke(client)\n     case Failure(ex) => onConnectionLost.invoke(ex)\n   }\n }"
    },
    {
      "sha": "293861271d497b810dcf8469c882edf55a6fc38f",
      "filename": "mqtt/src/main/scala/akka/stream/alpakka/mqtt/MqttSourceStage.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/mqtt/src/main/scala/akka/stream/alpakka/mqtt/MqttSourceStage.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/mqtt/src/main/scala/akka/stream/alpakka/mqtt/MqttSourceStage.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/mqtt/src/main/scala/akka/stream/alpakka/mqtt/MqttSourceStage.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -14,7 +14,8 @@ import scala.collection.mutable\n import scala.concurrent._\n import scala.util.Try\n \n-final class MqttSourceStage(settings: MqttSourceSettings, bufferSize: Int) extends GraphStageWithMaterializedValue[SourceShape[MqttMessage], Future[Done]] {\n+final class MqttSourceStage(settings: MqttSourceSettings, bufferSize: Int)\n+    extends GraphStageWithMaterializedValue[SourceShape[MqttMessage], Future[Done]] {\n \n   import MqttConnectorLogic._\n \n@@ -30,27 +31,27 @@ final class MqttSourceStage(settings: MqttSourceSettings, bufferSize: Int) exten\n \n       private val queue = mutable.Queue[MqttMessage]()\n       private val mqttSubscriptionCallback: Try[IMqttToken] => Unit = conn =>\n-        subscriptionPromise.complete(conn.map { _ => Done })\n+        subscriptionPromise.complete(conn.map { _ =>\n+          Done\n+        })\n       private val backpressure = new Semaphore(bufferSize)\n \n       override val connectionSettings = settings.connectionSettings\n \n       setHandler(out, new OutHandler {\n-        override def onPull(): Unit = {\n+        override def onPull(): Unit =\n           if (queue.nonEmpty) {\n             pushMessage(queue.dequeue())\n           }\n-        }\n       })\n \n       override def handleConnection(client: IMqttAsyncClient) = {\n         val (topics, qos) = settings.subscriptions.unzip\n         client.subscribe(topics.toArray, qos.map(_.byteValue.toInt).toArray, (), mqttSubscriptionCallback)\n       }\n \n-      override def beforeHandleMessage(): Unit = {\n+      override def beforeHandleMessage(): Unit =\n         backpressure.acquire()\n-      }\n \n       override def handleMessage(message: MqttMessage): Unit = {\n         require(queue.size <= bufferSize)"
    },
    {
      "sha": "856388f684367ef22a16c30bb1a971ca955c2384",
      "filename": "mqtt/src/main/scala/akka/stream/alpakka/mqtt/javadsl/MqttSource.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/mqtt/src/main/scala/akka/stream/alpakka/mqtt/javadsl/MqttSource.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/mqtt/src/main/scala/akka/stream/alpakka/mqtt/javadsl/MqttSource.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/mqtt/src/main/scala/akka/stream/alpakka/mqtt/javadsl/MqttSource.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -13,7 +13,8 @@ object MqttSource {\n   /**\n    * Java API: create an [[MqttSource]] with a provided bufferSize.\n    */\n-  def create(settings: MqttSourceSettings, bufferSize: Int): akka.stream.javadsl.Source[MqttMessage, CompletionStage[Done]] = {\n+  def create(settings: MqttSourceSettings,\n+             bufferSize: Int): akka.stream.javadsl.Source[MqttMessage, CompletionStage[Done]] = {\n     import scala.compat.java8.FutureConverters._\n     akka.stream.alpakka.mqtt.scaladsl.MqttSource.apply(settings, bufferSize).mapMaterializedValue(_.toJava).asJava\n   }"
    },
    {
      "sha": "631de04edc6df51e49eb09fbc14ed2213381afd3",
      "filename": "mqtt/src/main/scala/akka/stream/alpakka/mqtt/scaladsl/MqttSource.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/mqtt/src/main/scala/akka/stream/alpakka/mqtt/scaladsl/MqttSource.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/mqtt/src/main/scala/akka/stream/alpakka/mqtt/scaladsl/MqttSource.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/mqtt/src/main/scala/akka/stream/alpakka/mqtt/scaladsl/MqttSource.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -4,12 +4,13 @@\n package akka.stream.alpakka.mqtt.scaladsl\n \n import akka.Done\n-import akka.stream.alpakka.mqtt.{ MqttMessage, MqttSourceStage, MqttSourceSettings }\n+import akka.stream.alpakka.mqtt.{ MqttMessage, MqttSourceSettings, MqttSourceStage }\n import akka.stream.scaladsl.Source\n \n import scala.concurrent.Future\n \n object MqttSource {\n+\n   /**\n    * Scala API: create an [[MqttSource]] with a provided bufferSize.\n    */"
    },
    {
      "sha": "11ae0e5fe187f7065e33fad92a3fe18a63f147da",
      "filename": "mqtt/src/test/java/akka/stream/alpakka/mqtt/javadsl/MqttSourceTest.java",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/mqtt/src/test/java/akka/stream/alpakka/mqtt/javadsl/MqttSourceTest.java",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/mqtt/src/test/java/akka/stream/alpakka/mqtt/javadsl/MqttSourceTest.java",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/mqtt/src/test/java/akka/stream/alpakka/mqtt/javadsl/MqttSourceTest.java?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -1,3 +1,6 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n package akka.stream.alpakka.mqtt.javadsl;\n \n import akka.stream.alpakka.mqtt.*;"
    },
    {
      "sha": "a12bf98a1f7046850a84803ad5781c16caa3dfdc",
      "filename": "mqtt/src/test/scala/akka/stream/alpakka/mqtt/scaladsl/MqttSourceSpec.scala",
      "status": "modified",
      "additions": 15,
      "deletions": 13,
      "changes": 28,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/mqtt/src/test/scala/akka/stream/alpakka/mqtt/scaladsl/MqttSourceSpec.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/mqtt/src/test/scala/akka/stream/alpakka/mqtt/scaladsl/MqttSourceSpec.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/mqtt/src/test/scala/akka/stream/alpakka/mqtt/scaladsl/MqttSourceSpec.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -41,7 +41,8 @@ class MqttSourceSpec extends WordSpec with Matchers with ScalaFutures {\n       }\n     }\n \n-    \"receive messages from multiple topics\" in withBroker(Map(\"topic1\" -> MqttQoS.AtMostOnce, \"topic2\" -> MqttQoS.AtMostOnce)) { p =>\n+    \"receive messages from multiple topics\" in withBroker(\n+      Map(\"topic1\" -> MqttQoS.AtMostOnce, \"topic2\" -> MqttQoS.AtMostOnce)) { p =>\n       val f = fixture(p)\n       import f._\n \n@@ -108,18 +109,20 @@ class MqttSourceSpec extends WordSpec with Matchers with ScalaFutures {\n       }\n     }\n \n-    \"fail connection when not providing the requested credentials\" in withBroker(Map(), Some((\"user\", \"passwd\"))) { p =>\n-      val f = fixture(p)\n-      import f._\n+    \"fail connection when not providing the requested credentials\" in withBroker(Map(), Some((\"user\", \"passwd\"))) {\n+      p =>\n+        val f = fixture(p)\n+        import f._\n \n-      val (subscriptionFuture, probe) = MqttSource(p.settings, 8).toMat(TestSink.probe)(Keep.both).run()\n-      whenReady(subscriptionFuture.failed) {\n-        case e: MqttException => e.getMessage should be(\"Connection lost\")\n-        case e                => throw e\n-      }\n+        val (subscriptionFuture, probe) = MqttSource(p.settings, 8).toMat(TestSink.probe)(Keep.both).run()\n+        whenReady(subscriptionFuture.failed) {\n+          case e: MqttException => e.getMessage should be(\"Connection lost\")\n+          case e => throw e\n+        }\n     }\n \n-    \"receive a message from a topic with right credentials\" in withBroker(Map(\"topic1\" -> MqttQoS.AtMostOnce), Some((\"user\", \"passwd\"))) { p =>\n+    \"receive a message from a topic with right credentials\" in withBroker(Map(\"topic1\" -> MqttQoS.AtMostOnce),\n+                                                                          Some((\"user\", \"passwd\"))) { p =>\n       val f = fixture(p)\n       import f._\n \n@@ -140,7 +143,6 @@ class MqttSourceSpec extends WordSpec with Matchers with ScalaFutures {\n \n       val (subscriptionFuture, probe) = MqttSource(p.settings, bufferSize).toMat(TestSink.probe)(Keep.both).run()\n       whenReady(subscriptionFuture) { _ =>\n-\n         (1 to bufferSize + overflow) foreach { i =>\n           publish(\"topic1\", s\"ohi_$i\")\n         }\n@@ -160,7 +162,6 @@ class MqttSourceSpec extends WordSpec with Matchers with ScalaFutures {\n \n       val (subscriptionFuture, probe) = MqttSource(p.settings, bufferSize).toMat(TestSink.probe)(Keep.both).run()\n       whenReady(subscriptionFuture) { _ =>\n-\n         probe.request((bufferSize + overflow).toLong)\n \n         (1 to bufferSize + overflow) foreach { i =>\n@@ -201,7 +202,8 @@ class MqttSourceSpec extends WordSpec with Matchers with ScalaFutures {\n     server.internalPublish(msg)\n   }\n \n-  def withBroker(subscriptions: Map[String, MqttQoS], serverAuth: Option[(String, String)] = None)(test: FixtureParam => Any) = {\n+  def withBroker(subscriptions: Map[String, MqttQoS], serverAuth: Option[(String, String)] = None)(\n+      test: FixtureParam => Any) = {\n     implicit val sys = ActorSystem(\"MqttSourceSpec\")\n     val mat = ActorMaterializer()\n "
    },
    {
      "sha": "f20687ca2af67cb4ac4ce10540f1c37a05e2e5b0",
      "filename": "project/Common.scala",
      "status": "modified",
      "additions": 13,
      "deletions": 20,
      "changes": 33,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/project/Common.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/project/Common.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/project/Common.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -1,9 +1,10 @@\n-import sbt._, Keys._\n-\n+import sbt._\n+import sbt.Keys._\n+import sbt.plugins.JvmPlugin\n import de.heikoseeberger.sbtheader._\n-import de.heikoseeberger.sbtheader.HeaderKey._\n-import com.typesafe.sbt.SbtScalariform\n-import com.typesafe.sbt.SbtScalariform.ScalariformKeys\n+import de.heikoseeberger.sbtheader.HeaderPlugin.autoImport._\n+import org.scalafmt.sbt.ScalaFmtPlugin\n+import org.scalafmt.sbt.ScalaFmtPlugin.autoImport._\n \n object Common extends AutoPlugin {\n \n@@ -14,9 +15,10 @@ object Common extends AutoPlugin {\n        |\"\"\".stripMargin)\n \n   override def trigger = allRequirements\n-  override def requires = plugins.JvmPlugin && HeaderPlugin\n \n-  override lazy val projectSettings = SbtScalariform.scalariformSettings ++\n+  override def requires = JvmPlugin && HeaderPlugin\n+\n+  override lazy val projectSettings = reformatOnCompileSettings ++\n     Dependencies.Common ++ Seq(\n     organization := \"com.lightbend.akka\",\n     organizationName := \"Lightbend Inc.\",\n@@ -47,7 +49,7 @@ object Common extends AutoPlugin {\n     ),\n \n     autoAPIMappings := true,\n-    apiURL := Some(url(s\"http://doc.akka.io/alpakka/api/${version.value}\")),\n+    apiURL := Some(url(s\"http://developer.lightbend.com/docs/api/alpakka/${version.value}\")),\n \n     // show full stack traces and test case durations\n     testOptions in Test += Tests.Argument(\"-oDF\"),\n@@ -61,17 +63,8 @@ object Common extends AutoPlugin {\n       \"java\" -> FileHeader\n     ),\n \n-    ScalariformKeys.preferences in Compile  := formattingPreferences,\n-    ScalariformKeys.preferences in Test     := formattingPreferences\n+    formatSbtFiles := false,\n+    scalafmtConfig := Some(baseDirectory.in(ThisBuild).value / \".scalafmt.conf\"),\n+    ivyScala := ivyScala.value.map(_.copy(overrideScalaVersion = sbtPlugin.value)) // TODO Remove once this workaround no longer needed (https://github.com/sbt/sbt/issues/2786)!\n   )\n-\n-  def formattingPreferences = {\n-    import scalariform.formatter.preferences._\n-    FormattingPreferences()\n-      .setPreference(RewriteArrowSymbols, false)\n-      .setPreference(AlignParameters, true)\n-      .setPreference(AlignSingleLineCaseStatements, true)\n-      .setPreference(SpacesAroundMultiImports, true)\n-  }\n-\n }"
    },
    {
      "sha": "28d9d6985cd64e41ea50761c221fcb6308638bfd",
      "filename": "project/Dependencies.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/project/Dependencies.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/project/Dependencies.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/project/Dependencies.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -14,6 +14,17 @@ object Dependencies {\n       \"junit\"              % \"junit\"               % \"4.12\"        % Test  // Eclipse Public License 1.0\n     )\n   )\n+  \n+  val AkkaHttpVersion = \"10.0.0-RC2\"\n+  \n+  val S3 = Seq(\n+    libraryDependencies ++= Seq(\n+      \"com.typesafe.akka\" %% \"akka-http\"     % AkkaHttpVersion,\n+      \"com.typesafe.akka\" %% \"akka-http-xml\" % AkkaHttpVersion,\n+      // in-memory filesystem for file related tests\n+      \"com.google.jimfs\"   % \"jimfs\" % \"1.1\" % Test // ApacheV2\n+    )\n+  )\n \n   val Amqp = Seq(\n     libraryDependencies ++= Seq(\n@@ -40,4 +51,5 @@ object Dependencies {\n       \"com.google.jimfs\"  %  \"jimfs\"               % \"1.1\"  % Test  // ApacheV2\n     )\n   )\n+\n }"
    },
    {
      "sha": "218df45fc2e9d307d94826707fce8ae5647a8419",
      "filename": "project/Publish.scala",
      "status": "modified",
      "additions": 12,
      "deletions": 16,
      "changes": 28,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/project/Publish.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/project/Publish.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/project/Publish.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -1,7 +1,7 @@\n import sbt._, Keys._\n \n /**\n- * For projects that are not published.\n+ * For projects that are not to be published.\n  */\n object NoPublish extends AutoPlugin {\n   override def requires = plugins.JvmPlugin\n@@ -26,25 +26,21 @@ object Publish extends AutoPlugin {\n   )\n }\n \n-object DeployRsync extends AutoPlugin {\n-  import scala.sys.process._\n-  import sbt.complete.DefaultParsers._\n+object PublishUnidoc extends AutoPlugin {\n+  import sbtunidoc.Plugin._\n+  import sbtunidoc.Plugin.UnidocKeys._\n \n   override def requires = plugins.JvmPlugin\n \n-  trait Keys {\n-    val deployRsyncArtifact = taskKey[(File, String)](\"File or directory and a path to deploy to\")\n-    val deployRsync = inputKey[Int](\"Deploy using SCP\")\n+  def publishOnly(artifactType: String)(config: PublishConfiguration) = {\n+    val newArts = config.artifacts.filterKeys(_.`type` == artifactType)\n+    new PublishConfiguration(config.ivyFile, config.resolverName, newArts, config.checksums, config.logging)\n   }\n \n-  object autoImport extends Keys\n-  import autoImport._\n-\n-  override def projectSettings = Seq(\n-    deployRsync := {\n-      val (_, host) = (Space ~ StringBasic).parsed\n-      val (from, to) = deployRsyncArtifact.value\n-      s\"rsync -rvz $from/ $host:$to\"!\n-    }\n+  override def projectSettings = unidocSettings ++ Seq(\n+    doc in Compile := (doc in ScalaUnidoc).value,\n+    target in unidoc in ScalaUnidoc := crossTarget.value / \"api\",\n+    publishConfiguration ~= publishOnly(Artifact.DocType),\n+    publishLocalConfiguration ~= publishOnly(Artifact.DocType)\n   )\n }"
    },
    {
      "sha": "13b107b9ca006b15b9dc6c3adbc781ff1f30b1d4",
      "filename": "project/plugins.sbt",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/project/plugins.sbt",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/project/plugins.sbt",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/project/plugins.sbt?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -1,9 +1,9 @@\n-addSbtPlugin(\"de.heikoseeberger\"                 % \"sbt-header\"       % \"1.5.1\")\n-addSbtPlugin(\"org.scalariform\"                   % \"sbt-scalariform\"  % \"1.5.1\")\n-addSbtPlugin(\"com.dwijnand\"                      % \"sbt-dynver\"       % \"1.0.0+15-3655d014\")\n+addSbtPlugin(\"de.heikoseeberger\"                 % \"sbt-header\"       % \"1.6.0\")\n+addSbtPlugin(\"com.geirsson\"                      % \"sbt-scalafmt\"     % \"0.4.10\")\n+addSbtPlugin(\"com.dwijnand\"                      % \"sbt-dynver\"       % \"1.1.1\")\n addSbtPlugin(\"com.lightbend.paradox\"             % \"sbt-paradox\"      % \"0.2.5\")\n addSbtPlugin(\"com.eed3si9n\"                      % \"sbt-unidoc\"       % \"0.3.3\")\n addSbtPlugin(\"com.thoughtworks.sbt-api-mappings\" % \"sbt-api-mappings\" % \"1.0.0\")\n+addSbtPlugin(\"me.lessis\"                         % \"bintray-sbt\"      % \"0.3.0-8-g6d0c3f8\")\n \n-addSbtPlugin(\"me.lessis\" % \"bintray-sbt\" % \"0.3.0-8-g6d0c3f8\")\n resolvers += Resolver.url(\"2m-sbt-plugin-releases\", url(\"https://dl.bintray.com/2m/sbt-plugin-releases/\"))(Resolver.ivyStylePatterns)"
    },
    {
      "sha": "e64db229a0c8dc812f2738d709cc356f8161e7f2",
      "filename": "s3/src/main/resources/reference.conf",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/resources/reference.conf",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/resources/reference.conf",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/resources/reference.conf?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,9 @@\n+akka.stream.alpakka.s3 {\n+  # whether the buffer request chunks (up to 5MB each) to \"memory\" or \"disk\"\n+  buffer = \"memory\"\n+  \n+  # location for temporary files, if buffer is set to \"disk\". If empty, uses the standard java temp path.\n+  disk-buffer-path = \"\"\n+\n+  debug-logging = false  \n+}"
    },
    {
      "sha": "8603c79bdce900449cee22338546f8182aff5736",
      "filename": "s3/src/main/scala/akka/stream/alpakka/s3/S3Settings.scala",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/S3Settings.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/S3Settings.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/scala/akka/stream/alpakka/s3/S3Settings.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3\n+\n+import akka.actor.ActorSystem\n+import com.typesafe.config.Config\n+\n+final class S3Settings(val bufferType: BufferType, val diskBufferPath: String, val debugLogging: Boolean) {\n+  override def toString: String = s\"S3Settings($bufferType,$diskBufferPath,$debugLogging)\"\n+}\n+\n+sealed trait BufferType\n+case object MemoryBufferType extends BufferType {\n+  def getInstance: BufferType = MemoryBufferType\n+}\n+\n+case object DiskBufferType extends BufferType {\n+  def getInstance: BufferType = DiskBufferType\n+}\n+\n+object S3Settings {\n+  def apply(system: ActorSystem): S3Settings =\n+    apply(system.settings.config.getConfig(\"akka.stream.alpakka.s3\"))\n+\n+  /**\n+   * Create [[S3Settings]] from a Config subsection.\n+   */\n+  def apply(config: Config): S3Settings =\n+    new S3Settings(\n+      bufferType = config.getString(\"buffer\") match {\n+      case \"memory\" => MemoryBufferType\n+      case \"disk\"   => DiskBufferType\n+      case _        => throw new IllegalArgumentException(\"Buffer type must be 'memory' or 'disk'\")\n+    },\n+      diskBufferPath = config.getString(\"disk-buffer-path\"),\n+      debugLogging = config.getBoolean(\"debug-logging\")\n+    )\n+\n+}"
    },
    {
      "sha": "32792fce89c9ddcddf81a721d9caffb167613f14",
      "filename": "s3/src/main/scala/akka/stream/alpakka/s3/auth/AWSCredentials.scala",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/auth/AWSCredentials.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/auth/AWSCredentials.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/scala/akka/stream/alpakka/s3/auth/AWSCredentials.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.auth\n+\n+sealed trait AWSCredentials {\n+  def accessKeyId: String\n+  def secretAccessKey: String\n+}\n+\n+final case class BasicCredentials(accessKeyId: String, secretAccessKey: String) extends AWSCredentials\n+final case class AWSSessionCredentials(accessKeyId: String, secretAccessKey: String, sessionToken: String) extends AWSCredentials\n+\n+object AWSCredentials {\n+  def apply(accessKeyId: String, secretAccessKey: String): BasicCredentials = {\n+    BasicCredentials(accessKeyId, secretAccessKey)\n+  }\n+  def create(accessKeyId: String, secretAccessKey: String): BasicCredentials =\n+    apply(accessKeyId, secretAccessKey)\n+}"
    },
    {
      "sha": "c37d502a96ba3032ab0f383e78cb517cf55705f9",
      "filename": "s3/src/main/scala/akka/stream/alpakka/s3/auth/CanonicalRequest.scala",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/auth/CanonicalRequest.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/auth/CanonicalRequest.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/scala/akka/stream/alpakka/s3/auth/CanonicalRequest.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.auth\n+\n+import java.net.URLEncoder\n+\n+import akka.http.scaladsl.model.Uri.Query\n+import akka.http.scaladsl.model.{ HttpHeader, HttpRequest }\n+\n+// Documentation: http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n+private[alpakka] case class CanonicalRequest(method: String, uri: String, queryString: String, headerString: String, signedHeaders: String, hashedPayload: String) {\n+  def canonicalString: String = s\"$method\\n$uri\\n$queryString\\n$headerString\\n\\n$signedHeaders\\n$hashedPayload\"\n+}\n+\n+private[alpakka] object CanonicalRequest {\n+  def from(req: HttpRequest): CanonicalRequest = {\n+    val hashedBody = req.headers.find(_.name == \"x-amz-content-sha256\").map(_.value).getOrElse(\"\")\n+    CanonicalRequest(\n+      req.method.value,\n+      req.uri.path.toString,\n+      canonicalQueryString(req.uri.query()),\n+      canonicalHeaderString(req.headers),\n+      signedHeadersString(req.headers),\n+      hashedBody\n+    )\n+  }\n+\n+  def canonicalQueryString(query: Query): String =\n+    query.sortBy(_._1).map { case (a, b) => s\"${uriEncode(a)}=${uriEncode(b)}\" }.mkString(\"&\")\n+\n+  private def uriEncode(str: String) = URLEncoder.encode(str, \"utf-8\")\n+\n+  def canonicalHeaderString(headers: Seq[HttpHeader]): String = {\n+    val grouped = headers.groupBy(_.lowercaseName())\n+    val combined = grouped.mapValues(_.map(_.value.replaceAll(\"\\\\s+\", \" \").trim).mkString(\",\"))\n+    combined.toList.sortBy(_._1).map { case (k, v) => s\"$k:$v\" }.mkString(\"\\n\")\n+  }\n+\n+  def signedHeadersString(headers: Seq[HttpHeader]): String =\n+    headers.map(_.lowercaseName()).distinct.sorted.mkString(\";\")\n+\n+}"
    },
    {
      "sha": "686f32cc4fff5f723b25f194e71fbed8a6c8a800",
      "filename": "s3/src/main/scala/akka/stream/alpakka/s3/auth/Signer.scala",
      "status": "added",
      "additions": 56,
      "deletions": 0,
      "changes": 56,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/auth/Signer.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/auth/Signer.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/scala/akka/stream/alpakka/s3/auth/Signer.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.auth\n+\n+import java.security.MessageDigest\n+import java.time.format.DateTimeFormatter\n+import java.time.{ ZoneOffset, ZonedDateTime }\n+\n+import akka.http.scaladsl.model.headers.RawHeader\n+import akka.http.scaladsl.model.{ HttpHeader, HttpRequest }\n+import akka.stream.Materializer\n+\n+import scala.concurrent.Future\n+\n+private[alpakka] object Signer {\n+  private val dateFormatter = DateTimeFormatter.ofPattern(\"YYYYMMdd'T'HHmmssX\")\n+\n+  def signedRequest(request: HttpRequest, key: SigningKey, date: ZonedDateTime = ZonedDateTime.now(ZoneOffset.UTC))(implicit mat: Materializer): Future[HttpRequest] = {\n+    import mat.executionContext\n+    val hashedBody = request.entity.dataBytes.runWith(digest()).map {\n+      case hash => encodeHex(hash.toArray)\n+    }\n+\n+    hashedBody.map {\n+      case hb =>\n+        val headersToAdd = Vector(RawHeader(\"x-amz-date\", date.format(dateFormatter)), RawHeader(\"x-amz-content-sha256\", hb)) ++ sessionHeader(key.credentials)\n+        val reqWithHeaders = request.withHeaders(request.headers ++ headersToAdd)\n+        val cr = CanonicalRequest.from(reqWithHeaders)\n+        val authHeader = authorizationHeader(\"AWS4-HMAC-SHA256\", key, date, cr)\n+        reqWithHeaders.withHeaders(reqWithHeaders.headers :+ authHeader)\n+    }\n+  }\n+\n+  def sessionHeader(creds: AWSCredentials): Option[HttpHeader] = creds match {\n+    case _: BasicCredentials                       => None\n+    case AWSSessionCredentials(_, _, sessionToken) => Some(RawHeader(\"X-Amz-Security-Token\", sessionToken))\n+  }\n+\n+  def authorizationHeader(algorithm: String, key: SigningKey, requestDate: ZonedDateTime, canonicalRequest: CanonicalRequest): HttpHeader =\n+    RawHeader(\"Authorization\", authorizationString(algorithm, key, requestDate, canonicalRequest))\n+\n+  def authorizationString(algorithm: String, key: SigningKey, requestDate: ZonedDateTime, canonicalRequest: CanonicalRequest): String = {\n+    val sign = key.hexEncodedSignature(stringToSign(algorithm, key, requestDate, canonicalRequest).getBytes())\n+    s\"$algorithm Credential=${key.credentialString}, SignedHeaders=${canonicalRequest.signedHeaders}, Signature=$sign\"\n+  }\n+\n+  def stringToSign(algorithm: String, signingKey: SigningKey, requestDate: ZonedDateTime, canonicalRequest: CanonicalRequest): String = {\n+    val digest = MessageDigest.getInstance(\"SHA-256\")\n+    val hashedRequest = encodeHex(digest.digest(canonicalRequest.canonicalString.getBytes()))\n+    val date = requestDate.format(dateFormatter)\n+    val scope = signingKey.scope.scopeString\n+    s\"$algorithm\\n$date\\n$scope\\n$hashedRequest\"\n+  }\n+\n+}"
    },
    {
      "sha": "07a147ab14cb9b4898894a555bcb79098fc5b1ef",
      "filename": "s3/src/main/scala/akka/stream/alpakka/s3/auth/SigningKey.scala",
      "status": "added",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/auth/SigningKey.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/auth/SigningKey.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/scala/akka/stream/alpakka/s3/auth/SigningKey.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.auth\n+\n+import java.time.LocalDate\n+import java.time.format.DateTimeFormatter\n+import javax.crypto.Mac\n+import javax.crypto.spec.SecretKeySpec\n+\n+private[alpakka] final case class CredentialScope(date: LocalDate, awsRegion: String, awsService: String) {\n+  lazy val formattedDate: String = date.format(DateTimeFormatter.BASIC_ISO_DATE)\n+\n+  def scopeString = s\"$formattedDate/$awsRegion/$awsService/aws4_request\"\n+}\n+\n+private[alpakka] final case class SigningKey(credentials: AWSCredentials, scope: CredentialScope, algorithm: String = \"HmacSHA256\") {\n+\n+  val rawKey = new SecretKeySpec(s\"AWS4${credentials.secretAccessKey}\".getBytes, algorithm)\n+\n+  def signature(message: Array[Byte]): Array[Byte] = signWithKey(key, message)\n+\n+  def hexEncodedSignature(message: Array[Byte]): String = encodeHex(signature(message))\n+\n+  def credentialString: String = s\"${credentials.accessKeyId}/${scope.scopeString}\"\n+\n+  lazy val key: SecretKeySpec =\n+    wrapSignature(dateRegionServiceKey, \"aws4_request\".getBytes)\n+\n+  lazy val dateRegionServiceKey: SecretKeySpec =\n+    wrapSignature(dateRegionKey, scope.awsService.getBytes)\n+\n+  lazy val dateRegionKey: SecretKeySpec =\n+    wrapSignature(dateKey, scope.awsRegion.getBytes)\n+\n+  lazy val dateKey: SecretKeySpec =\n+    wrapSignature(rawKey, scope.formattedDate.getBytes)\n+\n+  private def wrapSignature(signature: SecretKeySpec, message: Array[Byte]): SecretKeySpec =\n+    new SecretKeySpec(signWithKey(signature, message), algorithm)\n+\n+  private def signWithKey(key: SecretKeySpec, message: Array[Byte]): Array[Byte] = {\n+    val mac = Mac.getInstance(algorithm)\n+    mac.init(key)\n+    mac.doFinal(message)\n+  }\n+}"
    },
    {
      "sha": "8793b98dfef298ecfb9c400a6279cfbe316cef66",
      "filename": "s3/src/main/scala/akka/stream/alpakka/s3/auth/package.scala",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/auth/package.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/auth/package.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/scala/akka/stream/alpakka/s3/auth/package.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3\n+\n+import java.security.MessageDigest\n+import javax.xml.bind.DatatypeConverter\n+\n+import akka.stream.scaladsl.{ Keep, Flow, Sink }\n+import akka.util.ByteString\n+\n+import scala.concurrent.Future\n+\n+package object auth {\n+  def encodeHex(bytes: Array[Byte]): String = DatatypeConverter.printHexBinary(bytes).toLowerCase\n+\n+  def encodeHex(bytes: ByteString): String = encodeHex(bytes.toArray)\n+\n+  def digest(algorithm: String = \"SHA-256\"): Sink[ByteString, Future[ByteString]] =\n+    Flow[ByteString].fold(MessageDigest.getInstance(algorithm)) {\n+      case (digest, bytes) =>\n+        digest.update(bytes.asByteBuffer)\n+        digest\n+    }.map(d => ByteString(d.digest())).toMat(Sink.head[ByteString])(Keep.right)\n+}"
    },
    {
      "sha": "936a6331a814c382d2a05c45ae3b0964900a698c",
      "filename": "s3/src/main/scala/akka/stream/alpakka/s3/impl/Chunk.scala",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/impl/Chunk.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/impl/Chunk.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/scala/akka/stream/alpakka/s3/impl/Chunk.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,10 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.impl\n+\n+import akka.stream.scaladsl.Source\n+import akka.NotUsed\n+import akka.util.ByteString\n+\n+private[alpakka] final case class Chunk(data: Source[ByteString, NotUsed], size: Int)"
    },
    {
      "sha": "337efde3eb5c89bc3e2c4d4a8782221ce05d75e3",
      "filename": "s3/src/main/scala/akka/stream/alpakka/s3/impl/DiskBuffer.scala",
      "status": "added",
      "additions": 86,
      "deletions": 0,
      "changes": 86,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/impl/DiskBuffer.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/impl/DiskBuffer.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/scala/akka/stream/alpakka/s3/impl/DiskBuffer.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.impl\n+\n+import java.io.{ File, FileOutputStream, RandomAccessFile }\n+import java.nio.channels.FileChannel\n+import java.nio.file.Files\n+import java.util.concurrent.atomic.AtomicInteger\n+\n+import akka.NotUsed\n+import akka.dispatch.ExecutionContexts\n+import akka.stream.ActorAttributes\n+import akka.stream.Attributes\n+import akka.stream.FlowShape\n+import akka.stream.Inlet\n+import akka.stream.Outlet\n+import akka.stream.scaladsl.FileIO\n+import akka.stream.stage.GraphStage\n+import akka.stream.stage.GraphStageLogic\n+import akka.stream.stage.InHandler\n+import akka.stream.stage.OutHandler\n+import akka.util.ByteString\n+import java.nio.file.Path\n+\n+/**\n+ * Buffers the complete incoming stream into a file, which can then be read several times afterwards.\n+ *\n+ * The stage waits for the incoming stream to complete. After that, it emits a single Chunk item on its output. The Chunk\n+ * contains a bytestream source that can be materialized multiple times, and the total size of the file.\n+ *\n+ * @param maxMaterializations Number of expected materializations for the completed chunk. After this, the temp file is deleted.\n+ * @param maxSize Maximum size on disk to buffer\n+ */\n+private[alpakka] final class DiskBuffer(maxMaterializations: Int, maxSize: Int, tempPath: Option[Path]) extends GraphStage[FlowShape[ByteString, Chunk]] {\n+  require(maxMaterializations > 0, \"maxMaterializations should be at least 1\")\n+  require(maxSize > 0, \"maximumSize should be at least 1\")\n+\n+  val in = Inlet[ByteString](\"DiskBuffer.in\")\n+  val out = Outlet[Chunk](\"DiskBuffer.out\")\n+  override val shape = FlowShape.of(in, out)\n+\n+  override def initialAttributes = ActorAttributes.dispatcher(\"akka.stream.default-blocking-io-dispatcher\")\n+\n+  override def createLogic(attr: Attributes): GraphStageLogic = new GraphStageLogic(shape) with OutHandler with InHandler {\n+    val path: File = tempPath.map(dir => Files.createTempFile(dir, \"s3-buffer-\", \".bin\")).getOrElse(Files.createTempFile(\"s3-buffer-\", \".bin\")).toFile\n+    path.deleteOnExit()\n+    val writeBuffer = new RandomAccessFile(path, \"rw\").getChannel.map(FileChannel.MapMode.READ_WRITE, 0, maxSize)\n+    var length = 0\n+\n+    override def onPull(): Unit = if (isClosed(in)) emit() else pull(in)\n+\n+    override def onPush(): Unit = {\n+      val elem = grab(in)\n+      length += elem.size\n+      writeBuffer.put(elem.asByteBuffer)\n+      pull(in)\n+    }\n+\n+    override def onUpstreamFinish(): Unit = {\n+      if (isAvailable(out)) emit()\n+      completeStage()\n+    }\n+\n+    private def emit(): Unit = {\n+      // TODO Should we do http://stackoverflow.com/questions/2972986/how-to-unmap-a-file-from-memory-mapped-using-filechannel-in-java ?\n+      writeBuffer.force()\n+\n+      val ch = new FileOutputStream(path, true).getChannel\n+      try {\n+        ch.truncate(length)\n+      } finally {\n+        ch.close()\n+      }\n+\n+      val deleteCounter = new AtomicInteger(maxMaterializations)\n+      val src = FileIO.fromPath(path.toPath, 65536).mapMaterializedValue { f =>\n+        if (deleteCounter.decrementAndGet() <= 0)\n+          f.onComplete { _ => path.delete() }(ExecutionContexts.sameThreadExecutionContext)\n+        NotUsed\n+      }\n+      emit(out, Chunk(src, length), () => completeStage())\n+    }\n+    setHandlers(in, out, this)\n+  }\n+}"
    },
    {
      "sha": "262b38b048edcec6fb9fafdb07902ef38e97f5d1",
      "filename": "s3/src/main/scala/akka/stream/alpakka/s3/impl/HttpRequests.scala",
      "status": "added",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/impl/HttpRequests.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/impl/HttpRequests.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/scala/akka/stream/alpakka/s3/impl/HttpRequests.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.impl\n+\n+import scala.concurrent.{ ExecutionContext, Future }\n+import akka.http.scaladsl.marshallers.xml.ScalaXmlSupport._\n+import akka.http.scaladsl.marshalling.Marshal\n+import akka.http.scaladsl.model._\n+import akka.http.scaladsl.model.Uri.Query\n+import akka.http.scaladsl.model.headers.Host\n+import akka.util.ByteString\n+import akka.stream.scaladsl.Source\n+import akka.http.scaladsl.model.RequestEntity\n+import akka.http.scaladsl.model.RequestEntity\n+\n+private[alpakka] object HttpRequests {\n+\n+  def s3Request(s3Location: S3Location, method: HttpMethod = HttpMethods.GET, uriFn: (Uri => Uri) = identity): HttpRequest = {\n+    HttpRequest(method)\n+      .withHeaders(Host(requestHost(s3Location)))\n+      .withUri(uriFn(requestUri(s3Location)))\n+  }\n+\n+  def initiateMultipartUploadRequest(s3Location: S3Location): HttpRequest = {\n+    s3Request(s3Location, HttpMethods.POST, _.withQuery(Query(\"uploads\")))\n+  }\n+\n+  def getRequest(s3Location: S3Location): HttpRequest = {\n+    s3Request(s3Location)\n+  }\n+\n+  def uploadPartRequest(upload: MultipartUpload, partNumber: Int, payload: Source[ByteString, _], payloadSize: Int): HttpRequest =\n+    s3Request(\n+      upload.s3Location,\n+      HttpMethods.PUT,\n+      _.withQuery(Query(\"partNumber\" -> partNumber.toString, \"uploadId\" -> upload.uploadId))\n+    ).withEntity(HttpEntity(ContentTypes.`application/octet-stream`, payloadSize, payload))\n+\n+  def completeMultipartUploadRequest(upload: MultipartUpload, parts: Seq[(Int, String)])(implicit ec: ExecutionContext): Future[HttpRequest] = {\n+    val payload = <CompleteMultipartUpload>\n+                    {\n+                      parts.map { case (partNumber, etag) => <Part><PartNumber>{ partNumber }</PartNumber><ETag>{ etag }</ETag></Part> }\n+                    }\n+                  </CompleteMultipartUpload>\n+    for {\n+      entity <- Marshal(payload).to[RequestEntity]\n+    } yield {\n+      s3Request(\n+        upload.s3Location,\n+        HttpMethods.POST,\n+        _.withQuery(Query(\"uploadId\" -> upload.uploadId))\n+      ).withEntity(entity)\n+    }\n+  }\n+\n+  def requestHost(s3Location: S3Location): Uri.Host = Uri.Host(s\"${s3Location.bucket}.s3.amazonaws.com\")\n+\n+  def requestUri(s3Location: S3Location): Uri = Uri(s\"/${s3Location.key}\").withHost(requestHost(s3Location)).withScheme(\"https\")\n+}"
    },
    {
      "sha": "b65c6a17c4b51f8c0811072c3ecc0ec87adb1725",
      "filename": "s3/src/main/scala/akka/stream/alpakka/s3/impl/Marshalling.scala",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/impl/Marshalling.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/impl/Marshalling.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/scala/akka/stream/alpakka/s3/impl/Marshalling.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.impl\n+\n+import akka.http.scaladsl.marshallers.xml.ScalaXmlSupport\n+import akka.http.scaladsl.model.{ ContentTypes, HttpCharsets, MediaTypes }\n+import akka.http.scaladsl.unmarshalling.{ FromEntityUnmarshaller, Unmarshaller }\n+\n+import scala.xml.NodeSeq\n+\n+private[alpakka] object Marshalling {\n+  import ScalaXmlSupport._\n+\n+  implicit val multipartUploadUnmarshaller: FromEntityUnmarshaller[MultipartUpload] = {\n+    nodeSeqUnmarshaller(ContentTypes.`application/octet-stream`) map {\n+      case NodeSeq.Empty => throw Unmarshaller.NoContentException\n+      case x =>\n+        MultipartUpload(S3Location((x \\ \"Bucket\").text, (x \\ \"Key\").text), (x \\ \"UploadId\").text)\n+    }\n+  }\n+\n+  implicit val completeMultipartUploadResultUnmarshaller: FromEntityUnmarshaller[CompleteMultipartUploadResult] = {\n+    nodeSeqUnmarshaller(MediaTypes.`application/xml` withCharset HttpCharsets.`UTF-8`) map {\n+      case NodeSeq.Empty => throw Unmarshaller.NoContentException\n+      case x =>\n+        CompleteMultipartUploadResult(\n+          (x \\ \"Location\").text,\n+          (x \\ \"Bucket\").text, (x \\ \"Key\").text,\n+          (x \\ \"Etag\").text\n+        )\n+    }\n+  }\n+}"
    },
    {
      "sha": "99b5d5a2b8799b735e12fcb126d16243c2dc69d0",
      "filename": "s3/src/main/scala/akka/stream/alpakka/s3/impl/MemoryBuffer.scala",
      "status": "added",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/impl/MemoryBuffer.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/impl/MemoryBuffer.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/scala/akka/stream/alpakka/s3/impl/MemoryBuffer.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.impl\n+\n+import akka.stream.{ Attributes, FlowShape, Inlet, Outlet }\n+import akka.stream.scaladsl.Source\n+import akka.stream.stage.{ GraphStage, GraphStageLogic, InHandler, OutHandler }\n+import akka.util.ByteString\n+\n+/**\n+ * Buffers the complete incoming stream into memory, which can then be read several times afterwards.\n+ *\n+ * The stage waits for the incoming stream to complete. After that, it emits a single Chunk item on its output. The Chunk\n+ * contains a `ByteString` source that can be materialized multiple times, and the total size of the file.\n+ *\n+ * @param maxSize Maximum size to buffer\n+ */\n+private[alpakka] final class MemoryBuffer(maxSize: Int) extends GraphStage[FlowShape[ByteString, Chunk]] {\n+  val in = Inlet[ByteString](\"MemoryBuffer.in\")\n+  val out = Outlet[Chunk](\"MemoryBuffer.out\")\n+  override val shape = FlowShape.of(in, out)\n+\n+  override def createLogic(attr: Attributes): GraphStageLogic = new GraphStageLogic(shape) with InHandler with OutHandler {\n+    var buffer = ByteString.empty\n+    override def onPull(): Unit = if (isClosed(in)) emit() else pull(in)\n+\n+    override def onPush(): Unit = {\n+      val elem = grab(in)\n+      if (buffer.size + elem.size > maxSize) {\n+        failStage(new IllegalStateException(\"Buffer size of \" + maxSize + \" bytes exceeded.\"))\n+      } else {\n+        buffer ++= elem\n+        pull(in)\n+      }\n+    }\n+\n+    override def onUpstreamFinish(): Unit = {\n+      if (isAvailable(out)) emit()\n+      completeStage()\n+    }\n+\n+    def emit(): Unit = emit(out, Chunk(Source.single(buffer), buffer.size), () => completeStage())\n+    setHandlers(in, out, this)\n+  }\n+\n+}"
    },
    {
      "sha": "814d904f8de99947143b8616b7274a93201a825a",
      "filename": "s3/src/main/scala/akka/stream/alpakka/s3/impl/S3Stream.scala",
      "status": "added",
      "additions": 191,
      "deletions": 0,
      "changes": 191,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/impl/S3Stream.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/impl/S3Stream.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/scala/akka/stream/alpakka/s3/impl/S3Stream.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.impl\n+\n+import java.nio.file.Paths\n+import java.time.LocalDate\n+\n+import akka.NotUsed\n+import akka.actor.ActorSystem\n+import akka.event.Logging\n+import akka.http.scaladsl.Http\n+import akka.http.scaladsl.model.{ HttpRequest, HttpResponse, ResponseEntity, Uri }\n+import akka.http.scaladsl.unmarshalling.{ Unmarshal, Unmarshaller }\n+import akka.stream.{ Attributes, Materializer }\n+import akka.stream.alpakka.s3.{ MemoryBufferType, DiskBufferType, S3Settings }\n+import akka.stream.alpakka.s3.auth.{ AWSCredentials, CredentialScope, Signer, SigningKey }\n+import akka.stream.scaladsl.{ Flow, Keep, Sink, Source }\n+import akka.util.ByteString\n+\n+import scala.collection.immutable.Seq\n+import scala.concurrent.{ ExecutionContext, Future }\n+import scala.util.{ Failure, Success }\n+\n+final case class S3Location(bucket: String, key: String)\n+\n+final case class MultipartUpload(s3Location: S3Location, uploadId: String)\n+\n+sealed trait UploadPartResponse {\n+  def multipartUpload: MultipartUpload\n+  def index: Int\n+}\n+\n+final case class SuccessfulUploadPart(multipartUpload: MultipartUpload, index: Int, etag: String) extends UploadPartResponse\n+final case class FailedUploadPart(multipartUpload: MultipartUpload, index: Int, exception: Throwable) extends UploadPartResponse\n+\n+final case class FailedUpload(reasons: Seq[Throwable]) extends Exception\n+final case class CompleteMultipartUploadResult(location: Uri, bucket: String, key: String, etag: String)\n+\n+private[alpakka] final class S3Stream(credentials: AWSCredentials, region: String, val settings: S3Settings)(implicit system: ActorSystem, mat: Materializer) {\n+  import Marshalling._\n+\n+  val MinChunkSize = 5242880\n+  val signingKey = SigningKey(credentials, CredentialScope(LocalDate.now(), region, \"s3\"))\n+\n+  def this(credentials: AWSCredentials, region: String = \"us-east-1\")(implicit system: ActorSystem, mat: Materializer) =\n+    this(credentials, region, S3Settings(system))\n+\n+  def download(s3Location: S3Location): Source[ByteString, NotUsed] = {\n+    import mat.executionContext\n+    Source.fromFuture(signAndGet(HttpRequests.getRequest(s3Location)).map(_.dataBytes))\n+      .flatMapConcat(identity)\n+  }\n+\n+  /**\n+   * Uploads a stream of ByteStrings to a specified location as a multipart upload.\n+   *\n+   * @param s3Location\n+   * @param chunkSize\n+   * @param chunkingParallelism\n+   * @return\n+   */\n+  def multipartUpload(s3Location: S3Location, chunkSize: Int = MinChunkSize, chunkingParallelism: Int = 4): Sink[ByteString, Future[CompleteMultipartUploadResult]] =\n+    chunkAndRequest(s3Location, chunkSize)(chunkingParallelism)\n+      .toMat(completionSink(s3Location))(Keep.right)\n+\n+  private def initiateMultipartUpload(s3Location: S3Location): Future[MultipartUpload] = {\n+    import mat.executionContext\n+\n+    val req = HttpRequests.initiateMultipartUploadRequest(s3Location)\n+    val response = for {\n+      signedReq <- Signer.signedRequest(req, signingKey)\n+      response <- Http().singleRequest(signedReq)\n+    } yield {\n+      response\n+    }\n+    response.flatMap {\n+      case HttpResponse(status, _, entity, _) if status.isSuccess() => Unmarshal(entity).to[MultipartUpload]\n+      case HttpResponse(status, _, entity, _) => Unmarshal(entity).to[String].flatMap {\n+        case err =>\n+          Future.failed(new Exception(\"Can't initiate upload: \" + err))\n+      }\n+    }\n+  }\n+\n+  private def completeMultipartUpload(s3Location: S3Location, parts: Seq[SuccessfulUploadPart]): Future[CompleteMultipartUploadResult] = {\n+    import mat.executionContext\n+\n+    for (\n+      req <- HttpRequests.completeMultipartUploadRequest(parts.head.multipartUpload, parts.map { case p => (p.index, p.etag) });\n+      res <- signAndGetAs[CompleteMultipartUploadResult](req)\n+    ) yield res\n+  }\n+\n+  /**\n+   * Initiates a multipart upload. Returns a source of the initiated upload with upload part indicess\n+   *\n+   * @param s3Location The s3 location to which to upload to\n+   * @return\n+   */\n+  private def initiateUpload(s3Location: S3Location): Source[(MultipartUpload, Int), NotUsed] = {\n+    Source.single(s3Location).mapAsync(1)(initiateMultipartUpload)\n+      .mapConcat { case r => Stream.continually(r) }\n+      .zip(Source.fromIterator(() => Iterator.from(1)))\n+  }\n+\n+  /**\n+   * Transforms a flow of ByteStrings into a flow of HTTPRequests to upload to S3.\n+   *\n+   * @param s3Location\n+   * @param chunkSize\n+   * @param parallelism\n+   * @return\n+   */\n+  private def createRequests(s3Location: S3Location, chunkSize: Int = MinChunkSize, parallelism: Int = 4): Flow[ByteString, (HttpRequest, (MultipartUpload, Int)), NotUsed] = {\n+    assert(chunkSize >= MinChunkSize, \"Chunk size must be at least 5242880B. See http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadUploadPart.html\")\n+    val requestInfo: Source[(MultipartUpload, Int), NotUsed] = initiateUpload(s3Location)\n+\n+    SplitAfterSize(chunkSize)(Flow.apply[ByteString])\n+      .via(getChunkBuffer(chunkSize))\n+      .concatSubstreams\n+      .zipWith(requestInfo) { case (payload, (uploadInfo, chunkIndex)) => (HttpRequests.uploadPartRequest(uploadInfo, chunkIndex, payload.data, payload.size), (uploadInfo, chunkIndex)) }\n+      .mapAsync(parallelism) { case (req, info) => Signer.signedRequest(req, signingKey).zip(Future.successful(info)) }\n+  }\n+\n+  private def getChunkBuffer(chunkSize: Int) = settings.bufferType match {\n+    case MemoryBufferType => new MemoryBuffer(chunkSize * 2)\n+    case DiskBufferType   => new DiskBuffer(2, chunkSize * 2, getDiskBufferPath)\n+  }\n+\n+  private val getDiskBufferPath = settings.diskBufferPath match {\n+    case \"\" => None\n+    case s  => Some(Paths.get(s))\n+  }\n+\n+  private def chunkAndRequest(s3Location: S3Location, chunkSize: Int = MinChunkSize)(parallelism: Int = 4): Flow[ByteString, UploadPartResponse, NotUsed] = {\n+    createRequests(s3Location, chunkSize, parallelism)\n+      .via(Http().superPool[(MultipartUpload, Int)]())\n+      .map {\n+        case (Success(r), (upload, index)) =>\n+          r.entity.dataBytes.runWith(Sink.ignore)\n+          val etag = r.headers.find(_.lowercaseName() == \"etag\").map(_.value)\n+          etag.map((t) => SuccessfulUploadPart(upload, index, t)).getOrElse(FailedUploadPart(upload, index, new RuntimeException(\"Cannot find etag\")))\n+\n+        case (Failure(e), (upload, index)) => FailedUploadPart(upload, index, e)\n+      }\n+  }\n+\n+  private def completionSink(s3Location: S3Location): Sink[UploadPartResponse, Future[CompleteMultipartUploadResult]] = {\n+    import mat.executionContext\n+\n+    Sink.seq[UploadPartResponse].mapMaterializedValue {\n+      case responseFuture: Future[Seq[UploadPartResponse]] =>\n+        responseFuture.flatMap {\n+          case responses: Seq[UploadPartResponse] =>\n+            val successes = responses.collect { case r: SuccessfulUploadPart => r }\n+            val failures = responses.collect { case r: FailedUploadPart => r }\n+            if (responses.isEmpty) {\n+              Future.failed(new RuntimeException(\"No Responses\"))\n+            } else if (failures.isEmpty) {\n+              Future.successful(successes.sortBy(_.index))\n+            } else {\n+              Future.failed(FailedUpload(failures.map(_.exception)))\n+            }\n+        }.flatMap(completeMultipartUpload(s3Location, _))\n+    }\n+  }\n+\n+  private def signAndGetAs[T](request: HttpRequest)(implicit um: Unmarshaller[ResponseEntity, T]): Future[T] = {\n+    import mat.executionContext\n+    signAndGet(request).flatMap(entity => Unmarshal(entity).to[T])\n+  }\n+\n+  private def signAndGet(request: HttpRequest): Future[ResponseEntity] = {\n+    import mat.executionContext\n+    for (\n+      req <- Signer.signedRequest(request, signingKey);\n+      res <- Http().singleRequest(req);\n+      t <- entityForSuccess(res)\n+    ) yield t\n+  }\n+\n+  private def entityForSuccess(resp: HttpResponse)(implicit ctx: ExecutionContext): Future[ResponseEntity] = {\n+    resp match {\n+      case HttpResponse(status, _, entity, _) if status.isSuccess() => Future.successful(entity)\n+      case HttpResponse(status, _, entity, _) => Unmarshal(entity).to[String].flatMap {\n+        case err => Future.failed(new Exception(\"Error: \" + err))\n+      }\n+    }\n+  }\n+}"
    },
    {
      "sha": "76ed76b17362f7f0617071134070959599790b16",
      "filename": "s3/src/main/scala/akka/stream/alpakka/s3/impl/SplitAfterSize.scala",
      "status": "added",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/impl/SplitAfterSize.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/impl/SplitAfterSize.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/scala/akka/stream/alpakka/s3/impl/SplitAfterSize.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.impl\n+\n+import akka.stream.scaladsl.SubFlow\n+import akka.stream.scaladsl.Source\n+import akka.stream.stage.GraphStage\n+import akka.util.ByteString\n+import akka.stream.FlowShape\n+import akka.stream.Inlet\n+import akka.stream.Outlet\n+import akka.stream.stage.GraphStageLogic\n+import akka.stream.Attributes\n+import akka.stream.stage.OutHandler\n+import akka.stream.stage.InHandler\n+import akka.stream.scaladsl.RunnableGraph\n+import akka.stream.scaladsl.Flow\n+\n+/**\n+ * Splits up a byte stream source into sub-flows of a minimum size. Does not attempt to create chunks of an exact size.\n+ */\n+private[alpakka] object SplitAfterSize {\n+  def apply[I, M](minChunkSize: Long)(in: Flow[I, ByteString, M]): SubFlow[ByteString, M, in.Repr, in.Closed] = {\n+    in.via(insertMarkers(minChunkSize)).splitWhen(_ == NewStream).collect { case bs: ByteString => bs }\n+  }\n+\n+  private case object NewStream\n+\n+  private def insertMarkers(minChunkSize: Long) = new GraphStage[FlowShape[ByteString, Any]] {\n+    val in = Inlet[ByteString](\"SplitAfterSize.in\")\n+    val out = Outlet[Any](\"SplitAfterSize.out\")\n+    override val shape = FlowShape.of(in, out)\n+\n+    override def createLogic(inheritedAttributes: Attributes): GraphStageLogic = new GraphStageLogic(shape) with OutHandler with InHandler {\n+      var count: Long = 0\n+      override def onPull(): Unit = pull(in)\n+\n+      override def onPush(): Unit = {\n+        val elem = grab(in)\n+        count += elem.size\n+        if (count >= minChunkSize) {\n+          count = 0\n+          emitMultiple(out, elem :: NewStream :: Nil)\n+        } else emit(out, elem)\n+      }\n+      setHandlers(in, out, this)\n+    }\n+  }\n+}"
    },
    {
      "sha": "c29512dd64445c9f18cbbed10b1fc9f90f0fc71d",
      "filename": "s3/src/main/scala/akka/stream/alpakka/s3/javadsl/S3Client.scala",
      "status": "added",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/javadsl/S3Client.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/javadsl/S3Client.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/scala/akka/stream/alpakka/s3/javadsl/S3Client.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.javadsl\n+\n+import akka.actor.ActorSystem\n+import akka.http.impl.model.JavaUri\n+import akka.http.javadsl.model.Uri\n+import akka.stream.Materializer\n+import akka.stream.alpakka.s3.impl.CompleteMultipartUploadResult\n+import akka.stream.alpakka.s3.auth.AWSCredentials\n+import akka.stream.alpakka.s3.impl.S3Stream\n+import akka.stream.alpakka.s3.impl.S3Location\n+import akka.stream.javadsl.Source\n+import akka.util.ByteString\n+import akka.NotUsed\n+import akka.stream.javadsl.Sink\n+import java.util.concurrent.CompletionStage\n+import scala.compat.java8.FutureConverters._\n+\n+final case class MultipartUploadResult(location: Uri, bucket: String, key: String, etag: String)\n+\n+object MultipartUploadResult {\n+  def create(r: CompleteMultipartUploadResult): MultipartUploadResult =\n+    new MultipartUploadResult(JavaUri(r.location), r.bucket, r.key, r.etag)\n+}\n+\n+final class S3Client(credentials: AWSCredentials, region: String, system: ActorSystem, mat: Materializer) {\n+  private val impl = new S3Stream(credentials, region)(system, mat)\n+\n+  def download(bucket: String, key: String): Source[ByteString, NotUsed] = impl.download(S3Location(bucket, key)).asJava\n+\n+  def multipartUpload(bucket: String, key: String): Sink[ByteString, CompletionStage[MultipartUploadResult]] =\n+    impl.multipartUpload(S3Location(bucket, key))\n+      .mapMaterializedValue(_.map(MultipartUploadResult.create)(system.dispatcher).toJava).asJava\n+}"
    },
    {
      "sha": "4ce7a44f5320c094121f088d8c4bbdf2fee2412a",
      "filename": "s3/src/main/scala/akka/stream/alpakka/s3/scaladsl/S3Client.scala",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/scaladsl/S3Client.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/main/scala/akka/stream/alpakka/s3/scaladsl/S3Client.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/main/scala/akka/stream/alpakka/s3/scaladsl/S3Client.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.scaladsl\n+\n+import akka.NotUsed\n+import akka.actor.ActorSystem\n+import akka.stream.Materializer\n+import akka.stream.alpakka.s3.impl.S3Location\n+import akka.stream.alpakka.s3.impl.S3Stream\n+import akka.stream.alpakka.s3.auth.AWSCredentials\n+import akka.stream.scaladsl.Source\n+import akka.util.ByteString\n+import akka.http.scaladsl.model.Uri\n+import akka.stream.scaladsl.Sink\n+import scala.concurrent.Future\n+import akka.stream.alpakka.s3.impl.CompleteMultipartUploadResult\n+\n+final case class MultipartUploadResult(location: Uri, bucket: String, key: String, etag: String)\n+\n+object MultipartUploadResult {\n+  def apply(r: CompleteMultipartUploadResult): MultipartUploadResult =\n+    new MultipartUploadResult(r.location, r.bucket, r.key, r.etag)\n+}\n+\n+object S3Client {\n+  val MinChunkSize = 5242880\n+}\n+\n+final class S3Client(credentials: AWSCredentials, region: String)(implicit system: ActorSystem, mat: Materializer) {\n+  import S3Client._\n+  private val impl = new S3Stream(credentials, region)\n+\n+  def download(bucket: String, key: String): Source[ByteString, NotUsed] = impl.download(S3Location(bucket, key))\n+\n+  def multipartUpload(bucket: String, key: String, chunkSize: Int = MinChunkSize, chunkingParallelism: Int = 4): Sink[ByteString, Future[MultipartUploadResult]] =\n+    impl.multipartUpload(S3Location(bucket, key), chunkSize, chunkingParallelism).mapMaterializedValue(_.map(MultipartUploadResult.apply)(system.dispatcher))\n+}"
    },
    {
      "sha": "e757bd4e1020057836368ea973f3b0c610c83dab",
      "filename": "s3/src/test/resources/application.conf",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/test/resources/application.conf",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/test/resources/application.conf",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/test/resources/application.conf?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,3 @@\n+akka {\n+  loggers = [\"akka.testkit.TestEventListener\"]\n+}\n\\ No newline at end of file"
    },
    {
      "sha": "a5f45b63b07e8bda9eba78cf3e1997281165e504",
      "filename": "s3/src/test/scala/akka/stream/alpakka/s3/auth/SignerSpec.scala",
      "status": "added",
      "additions": 77,
      "deletions": 0,
      "changes": 77,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/test/scala/akka/stream/alpakka/s3/auth/SignerSpec.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/test/scala/akka/stream/alpakka/s3/auth/SignerSpec.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/test/scala/akka/stream/alpakka/s3/auth/SignerSpec.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.auth\n+\n+import java.time.LocalDate\n+import java.time.LocalDateTime\n+import java.time.ZoneOffset\n+\n+import org.scalatest.FlatSpecLike\n+import org.scalatest.Matchers\n+import org.scalatest.concurrent.ScalaFutures\n+import org.scalatest.time.Millis\n+import org.scalatest.time.Seconds\n+import org.scalatest.time.Span\n+\n+import akka.actor.ActorSystem\n+import akka.http.scaladsl.model.HttpMethods\n+import akka.http.scaladsl.model.HttpRequest\n+import akka.http.scaladsl.model.headers.Host\n+import akka.http.scaladsl.model.headers.RawHeader\n+import akka.stream.ActorMaterializer\n+import akka.stream.ActorMaterializerSettings\n+import akka.testkit.TestKit\n+\n+class SignerSpec(_system: ActorSystem) extends TestKit(_system) with FlatSpecLike with Matchers with ScalaFutures {\n+  def this() = this(ActorSystem(\"SignerSpec\"))\n+\n+  implicit val defaultPatience =\n+    PatienceConfig(timeout = Span(2, Seconds), interval = Span(5, Millis))\n+\n+  implicit val materializer = ActorMaterializer(ActorMaterializerSettings(system).withDebugLogging(true))\n+\n+  val credentials = AWSCredentials(\"AKIDEXAMPLE\", \"wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\")\n+  val scope = CredentialScope(LocalDate.of(2015, 8, 30), \"us-east-1\", \"iam\")\n+  val signingKey = SigningKey(credentials, scope)\n+\n+  val cr = CanonicalRequest(\n+    \"GET\",\n+    \"/\",\n+    \"Action=ListUsers&Version=2010-05-08\", \"content-type:application/x-www-form-urlencoded; charset=utf-8\\nhost:iam.amazonaws.com\\nx-amz-date:20150830T123600Z\",\n+    \"content-type;host;x-amz-date\",\n+    \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n+  )\n+\n+  \"Signer\" should \"calculate the string to sign\" in {\n+    val date = LocalDateTime.of(2015, 8, 30, 12, 36, 0).atZone(ZoneOffset.UTC)\n+    val stringToSign: String = Signer.stringToSign(\"AWS4-HMAC-SHA256\", signingKey, date, cr)\n+    stringToSign should equal(\"AWS4-HMAC-SHA256\\n20150830T123600Z\\n20150830/us-east-1/iam/aws4_request\\nf536975d06c0309214f805bb90ccff089219ecd68b2577efef23edd43b7e1a59\")\n+  }\n+\n+  it should \"add the date, content hash, and authorization headers to a request\" in {\n+    val req = HttpRequest(HttpMethods.GET)\n+      .withUri(\"https://iam.amazonaws.com/?Action=ListUsers&Version=2010-05-08\")\n+      .withHeaders(\n+        Host(\"iam.amazonaws.com\"),\n+        RawHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\")\n+      )\n+\n+    val srFuture = Signer.signedRequest(req, signingKey, LocalDateTime.of(2015, 8, 30, 12, 36, 0).atZone(ZoneOffset.UTC))\n+    whenReady(srFuture) {\n+      case signedRequest =>\n+        signedRequest should equal(\n+          HttpRequest(HttpMethods.GET)\n+            .withUri(\"https://iam.amazonaws.com/?Action=ListUsers&Version=2010-05-08\")\n+            .withHeaders(\n+              Host(\"iam.amazonaws.com\"),\n+              RawHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\"),\n+              RawHeader(\"x-amz-date\", \"20150830T123600Z\"),\n+              RawHeader(\"x-amz-content-sha256\", \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"),\n+              RawHeader(\"Authorization\", \"AWS4-HMAC-SHA256 Credential=AKIDEXAMPLE/20150830/us-east-1/iam/aws4_request, SignedHeaders=content-type;host;x-amz-content-sha256;x-amz-date, Signature=dd479fa8a80364edf2119ec24bebde66712ee9c9cb2b0d92eb3ab9ccdc0c3947\")\n+            )\n+        )\n+    }\n+  }\n+\n+}"
    },
    {
      "sha": "0412f61a37a8db8018dd1010e75ebc4061730c47",
      "filename": "s3/src/test/scala/akka/stream/alpakka/s3/auth/SigningKeySpec.scala",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/test/scala/akka/stream/alpakka/s3/auth/SigningKeySpec.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/test/scala/akka/stream/alpakka/s3/auth/SigningKeySpec.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/test/scala/akka/stream/alpakka/s3/auth/SigningKeySpec.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.auth\n+\n+import java.time.LocalDate\n+\n+import org.scalatest.{ FlatSpec, Matchers }\n+\n+class SigningKeySpec extends FlatSpec with Matchers {\n+  behavior of \"A Signing Key\"\n+\n+  val credentials = AWSCredentials(\"AKIDEXAMPLE\", \"wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\")\n+\n+  val scope = CredentialScope(LocalDate.of(2015, 8, 30), \"us-east-1\", \"iam\")\n+  val signingKey = SigningKey(credentials, scope)\n+\n+  it should \"produce a signing key\" in {\n+    val expected: Array[Byte] = Array(196, 175, 177, 204, 87, 113, 216, 113, 118, 58, 57, 62, 68, 183, 3, 87, 27, 85, 204, 40, 66, 77, 26, 94, 134, 218, 110, 211, 193, 84, 164, 185).map(_.toByte)\n+    signingKey.key.getEncoded should equal(expected)\n+  }\n+\n+  it should \"sign a message\" in {\n+    val sts = \"AWS4-HMAC-SHA256\\n20150830T123600Z\\n20150830/us-east-1/iam/aws4_request\\nf536975d06c0309214f805bb90ccff089219ecd68b2577efef23edd43b7e1a59\"\n+    signingKey.hexEncodedSignature(sts.getBytes) should equal(\"5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400e06b5924a6f2b5d7\")\n+  }\n+}"
    },
    {
      "sha": "5448a54fc0116bde3c88afd12cd242b1aebb8586",
      "filename": "s3/src/test/scala/akka/stream/alpakka/s3/auth/StreamUtilsSpec.scala",
      "status": "added",
      "additions": 86,
      "deletions": 0,
      "changes": 86,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/test/scala/akka/stream/alpakka/s3/auth/StreamUtilsSpec.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/test/scala/akka/stream/alpakka/s3/auth/StreamUtilsSpec.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/test/scala/akka/stream/alpakka/s3/auth/StreamUtilsSpec.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.auth\n+\n+import java.nio.charset.StandardCharsets._\n+import java.nio.file.{ Path, Files }\n+import java.security.DigestInputStream\n+import java.security.MessageDigest\n+\n+import scala.concurrent.Future\n+\n+import org.scalatest.{ BeforeAndAfterAll, FlatSpecLike, Matchers }\n+import org.scalatest.concurrent.ScalaFutures\n+import org.scalatest.time.Millis\n+import org.scalatest.time.Seconds\n+import org.scalatest.time.Span\n+\n+import akka.actor.ActorSystem\n+import akka.stream.ActorMaterializer\n+import akka.stream.ActorMaterializerSettings\n+import akka.stream.scaladsl.Source\n+import akka.stream.scaladsl.StreamConverters\n+import akka.testkit.TestKit\n+import akka.util.ByteString\n+import com.google.common.jimfs.{ Configuration, Jimfs }\n+\n+class StreamUtilsSpec(_system: ActorSystem) extends TestKit(_system) with FlatSpecLike with Matchers with ScalaFutures with BeforeAndAfterAll {\n+  def this() = this(ActorSystem(\"StreamUtilsSpec\"))\n+\n+  implicit val materializer = ActorMaterializer(ActorMaterializerSettings(system).withDebugLogging(true))\n+\n+  implicit val defaultPatience =\n+    PatienceConfig(timeout = Span(5, Seconds), interval = Span(30, Millis))\n+\n+  val fs = Jimfs.newFileSystem(\"FileSourceSpec\", Configuration.unix())\n+\n+  val TestText = {\n+    (\"a\" * 1000) +\n+      (\"b\" * 1000) +\n+      (\"c\" * 1000) +\n+      (\"d\" * 1000) +\n+      (\"e\" * 1000) +\n+      (\"f\" * 1000)\n+  }\n+\n+  val bigFile: Path = {\n+    val f = Files.createTempFile(fs.getPath(\"/\"), \"file-source-spec\", \".tmp\")\n+    val writer = Files.newBufferedWriter(f, UTF_8)\n+    (1 to 3500).foreach(_ => writer.append(TestText))\n+    writer.close()\n+    f\n+  }\n+\n+  \"digest\" should \"calculate the digest of a short string\" in {\n+    val bytes = \"abcdefghijklmnopqrstuvwxyz\".getBytes()\n+    val flow = Source.single(ByteString(bytes)).runWith(digest())\n+\n+    val testDigest = MessageDigest.getInstance(\"SHA-256\").digest(bytes)\n+    whenReady(flow) { result =>\n+      result should contain theSameElementsInOrderAs testDigest\n+    }\n+  }\n+\n+  it should \"calculate the digest of a file\" in {\n+    val input = StreamConverters.fromInputStream(() => Files.newInputStream(bigFile))\n+    val flow = input.runWith(digest())\n+\n+    val testDigest = MessageDigest.getInstance(\"SHA-256\")\n+    val dis = new DigestInputStream(Files.newInputStream(bigFile), testDigest)\n+\n+    val buffer = new Array[Byte](1024)\n+\n+    var bytesRead: Int = dis.read(buffer)\n+    while (bytesRead > -1) {\n+      bytesRead = dis.read(buffer)\n+    }\n+\n+    whenReady(flow) { result =>\n+      result should contain theSameElementsInOrderAs dis.getMessageDigest.digest()\n+    }\n+  }\n+\n+  override def afterAll(): Unit = fs.close()\n+\n+}"
    },
    {
      "sha": "fb373236f65653fda20127f9bbd8b9829617af0d",
      "filename": "s3/src/test/scala/akka/stream/alpakka/s3/impl/DiskBufferSpec.scala",
      "status": "added",
      "additions": 68,
      "deletions": 0,
      "changes": 68,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/test/scala/akka/stream/alpakka/s3/impl/DiskBufferSpec.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/test/scala/akka/stream/alpakka/s3/impl/DiskBufferSpec.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/test/scala/akka/stream/alpakka/s3/impl/DiskBufferSpec.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.impl\n+\n+import java.nio.BufferOverflowException\n+import java.nio.file.Files\n+\n+import akka.actor.ActorSystem\n+import akka.stream.{ ActorMaterializer, ActorMaterializerSettings }\n+import akka.stream.scaladsl.{ Sink, Source }\n+import akka.testkit.TestKit\n+import akka.util.ByteString\n+import org.scalatest.{ BeforeAndAfterAll, FlatSpecLike, Matchers }\n+import org.scalatest.concurrent.{ Eventually, ScalaFutures }\n+\n+class DiskBufferSpec(_system: ActorSystem) extends TestKit(_system) with FlatSpecLike with Matchers with BeforeAndAfterAll with ScalaFutures with Eventually {\n+\n+  def this() = this(ActorSystem(\"DiskBufferSpec\"))\n+\n+  implicit val materializer = ActorMaterializer(ActorMaterializerSettings(system).withDebugLogging(true))\n+\n+  \"DiskBuffer\" should\n+    \"emit a chunk on its output containing the concatenation of all input values\" in {\n+      val result = Source(Vector(ByteString(1, 2, 3, 4, 5), ByteString(6, 7, 8, 9, 10, 11, 12), ByteString(13, 14)))\n+        .via(new DiskBuffer(1, 200, None))\n+        .runWith(Sink.seq)\n+        .futureValue\n+\n+      result should have size (1)\n+      val chunk = result.head\n+      chunk.size should be(14)\n+      chunk.data.runWith(Sink.seq).futureValue should be(Seq(ByteString(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\n+    }\n+\n+  it should \"fail if more than maxSize bytes are fed into it\" in {\n+    whenReady(\n+      Source(Vector(ByteString(1, 2, 3, 4, 5), ByteString(6, 7, 8, 9, 10, 11, 12), ByteString(13, 14)))\n+      .via(new DiskBuffer(1, 10, None))\n+      .runWith(Sink.seq)\n+      .failed\n+    ) { e =>\n+      e shouldBe a[BufferOverflowException]\n+    }\n+  }\n+\n+  it should \"delete its temp file after N materializations\" in {\n+    val tmpDir = Files.createTempDirectory(\"DiskBufferSpec\").toFile()\n+    val before = tmpDir.list().size\n+    val source = Source(Vector(ByteString(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\n+      .via(new DiskBuffer(2, 200, Some(tmpDir.toPath)))\n+      .runWith(Sink.seq)\n+      .futureValue\n+      .head\n+      .data\n+\n+    tmpDir.list().size should be(before + 1)\n+\n+    source.runWith(Sink.ignore).futureValue\n+    tmpDir.list().size should be(before + 1)\n+\n+    source.runWith(Sink.ignore).futureValue\n+    eventually {\n+      tmpDir.list().size should be(before)\n+    }\n+\n+  }\n+}"
    },
    {
      "sha": "62fee8422b6bd2701d57d88509097416fa20b3a9",
      "filename": "s3/src/test/scala/akka/stream/alpakka/s3/impl/MemoryBufferSpec.scala",
      "status": "added",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/test/scala/akka/stream/alpakka/s3/impl/MemoryBufferSpec.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/test/scala/akka/stream/alpakka/s3/impl/MemoryBufferSpec.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/test/scala/akka/stream/alpakka/s3/impl/MemoryBufferSpec.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.impl\n+\n+import akka.actor.ActorSystem\n+import akka.stream.{ ActorMaterializer, ActorMaterializerSettings }\n+import akka.stream.scaladsl.{ Sink, Source }\n+import akka.testkit.TestKit\n+import akka.util.ByteString\n+import org.scalatest.{ BeforeAndAfterAll, FlatSpecLike, Matchers }\n+import org.scalatest.concurrent.ScalaFutures\n+\n+class MemoryBufferSpec(_system: ActorSystem) extends TestKit(_system) with FlatSpecLike with Matchers with BeforeAndAfterAll with ScalaFutures {\n+\n+  def this() = this(ActorSystem(\"MemoryBufferSpec\"))\n+\n+  implicit val materializer = ActorMaterializer(ActorMaterializerSettings(system).withDebugLogging(true))\n+\n+  \"MemoryBuffer\" should \"emit a chunk on its output containg the concatenation of all input values\" in {\n+    val result = Source(Vector(ByteString(1, 2, 3, 4, 5), ByteString(6, 7, 8, 9, 10, 11, 12), ByteString(13, 14)))\n+      .via(new MemoryBuffer(200))\n+      .runWith(Sink.seq)\n+      .futureValue\n+\n+    result should have size (1)\n+    val chunk = result.head\n+    chunk.size should be(14)\n+    chunk.data.runWith(Sink.seq).futureValue should be(Seq(ByteString(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)))\n+  }\n+\n+  it should \"fail if more than maxSize bytes are fed into it\" in {\n+    whenReady(\n+      Source(Vector(ByteString(1, 2, 3, 4, 5), ByteString(6, 7, 8, 9, 10, 11, 12), ByteString(13, 14)))\n+      .via(new MemoryBuffer(10))\n+      .runWith(Sink.seq)\n+      .failed\n+    ) { e =>\n+      e shouldBe a[IllegalStateException]\n+    }\n+  }\n+}"
    },
    {
      "sha": "2fc47a7c8fc24169726f183f374e3ac39df59bc3",
      "filename": "s3/src/test/scala/akka/stream/alpakka/s3/impl/SplitAfterSizeSpec.scala",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/akka/alpakka/blob/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/test/scala/akka/stream/alpakka/s3/impl/SplitAfterSizeSpec.scala",
      "raw_url": "https://github.com/akka/alpakka/raw/a0f4af7ee8f2a6b41c89867696badbaf938fbea7/s3/src/test/scala/akka/stream/alpakka/s3/impl/SplitAfterSizeSpec.scala",
      "contents_url": "https://api.github.com/repos/akka/alpakka/contents/s3/src/test/scala/akka/stream/alpakka/s3/impl/SplitAfterSizeSpec.scala?ref=a0f4af7ee8f2a6b41c89867696badbaf938fbea7",
      "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (C) 2016 Lightbend Inc. <http://www.lightbend.com>\n+ */\n+package akka.stream.alpakka.s3.impl\n+\n+import akka.testkit.TestKit\n+import akka.stream.ActorMaterializerSettings\n+import org.scalatest.BeforeAndAfterAll\n+import org.scalatest.concurrent.ScalaFutures\n+import akka.stream.ActorMaterializer\n+import akka.actor.ActorSystem\n+import org.scalatest.Matchers\n+import org.scalatest.FlatSpecLike\n+import akka.stream.scaladsl.Source\n+import akka.stream.scaladsl.Flow\n+import akka.util.ByteString\n+import akka.stream.scaladsl.Sink\n+\n+class SplitAfterSizeSpec(_system: ActorSystem) extends TestKit(_system) with FlatSpecLike with Matchers with BeforeAndAfterAll with ScalaFutures {\n+\n+  def this() = this(ActorSystem(\"SplitAfterSizeSpec\"))\n+\n+  implicit val materializer = ActorMaterializer(ActorMaterializerSettings(system).withDebugLogging(true))\n+\n+  \"SplitAfterSize\" should \"yield a single empty substream on no input\" in {\n+    Source.empty[ByteString].via(\n+      SplitAfterSize(10)(Flow[ByteString]).concatSubstreams\n+    ).runWith(Sink.seq).futureValue should be(Seq.empty)\n+  }\n+\n+  it should \"start a new stream after the element that makes it reach a maximum, but not split the element itself\" in {\n+    Source(Vector(ByteString(1, 2, 3, 4, 5), ByteString(6, 7, 8, 9, 10, 11, 12), ByteString(13, 14))).via(\n+      SplitAfterSize(10)(Flow[ByteString]).prefixAndTail(10).map { case (prefix, tail) => prefix }.concatSubstreams\n+    ).runWith(Sink.seq).futureValue should be(Seq(\n+      Seq(ByteString(1, 2, 3, 4, 5), ByteString(6, 7, 8, 9, 10, 11, 12)),\n+      Seq(ByteString(13, 14))\n+    ))\n+  }\n+\n+}"
    }
  ]
}
